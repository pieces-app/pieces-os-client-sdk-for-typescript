/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TagCategoryEnum } from './TagCategoryEnum';
import {
    TagCategoryEnumFromJSON,
    TagCategoryEnumFromJSONTyped,
    TagCategoryEnumToJSON,
    TagCategoryEnumToJSONTyped,
} from './TagCategoryEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    MechanismEnumToJSONTyped,
} from './MechanismEnum';

/**
 * This is the minimum information needed when creating a Tag.
 * 
 * Default we will attach manual to a tag unless otherwise specified for mechanism.
 * 
 * you can optionally add an asset, format, or person uuid to attach this tag directly to it
 * 
 * TODO consider updating these asset,format to referenced Models
 * @export
 * @interface SeededTag
 */
export interface SeededTag {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededTag
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is the description of the tag.
     * @type {string}
     * @memberof SeededTag
     */
    text: string;
    /**
     * this is a uuid that references an asset.
     * @type {string}
     * @memberof SeededTag
     */
    asset?: string;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof SeededTag
     */
    mechanism?: MechanismEnum;
    /**
     * 
     * @type {TagCategoryEnum}
     * @memberof SeededTag
     */
    category?: TagCategoryEnum;
    /**
     * uuid of the person, you want to add this tag too
     * @type {string}
     * @memberof SeededTag
     */
    person?: string;
    /**
     * This is the embedding for the format.(NEEDs to collectionection.vector) and specific here because we can only index on a single name
     * NOTE: this the the vector index that corresponds the the couchbase lite index.
     * @type {Array<number>}
     * @memberof SeededTag
     */
    tagsVector?: Array<number>;
}



/**
 * Check if a given object implements the SeededTag interface.
 */
export function instanceOfSeededTag(value: object): value is SeededTag {
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function SeededTagFromJSON(json: any): SeededTag {
    return SeededTagFromJSONTyped(json, false);
}

export function SeededTagFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededTag {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'text': json['text'],
        'asset': json['asset'] == null ? undefined : json['asset'],
        'mechanism': json['mechanism'] == null ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'category': json['category'] == null ? undefined : TagCategoryEnumFromJSON(json['category']),
        'person': json['person'] == null ? undefined : json['person'],
        'tagsVector': json['tagsVector'] == null ? undefined : json['tagsVector'],
    };
}

export function SeededTagToJSON(json: any): SeededTag {
    return SeededTagToJSONTyped(json, false);
}

export function SeededTagToJSONTyped(value?: SeededTag | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'text': value['text'],
        'asset': value['asset'],
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'category': TagCategoryEnumToJSON(value['category']),
        'person': value['person'],
        'tagsVector': value['tagsVector'],
    };
}

