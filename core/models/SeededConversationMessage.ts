/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedTags } from './FlattenedTags';
import {
    FlattenedTagsFromJSON,
    FlattenedTagsFromJSONTyped,
    FlattenedTagsToJSON,
    FlattenedTagsToJSONTyped,
} from './FlattenedTags';
import type { ReferencedConversation } from './ReferencedConversation';
import {
    ReferencedConversationFromJSON,
    ReferencedConversationFromJSONTyped,
    ReferencedConversationToJSON,
    ReferencedConversationToJSONTyped,
} from './ReferencedConversation';
import type { FlattenedWorkstreamEvents } from './FlattenedWorkstreamEvents';
import {
    FlattenedWorkstreamEventsFromJSON,
    FlattenedWorkstreamEventsFromJSONTyped,
    FlattenedWorkstreamEventsToJSON,
    FlattenedWorkstreamEventsToJSONTyped,
} from './FlattenedWorkstreamEvents';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { FragmentFormat } from './FragmentFormat';
import {
    FragmentFormatFromJSON,
    FragmentFormatFromJSONTyped,
    FragmentFormatToJSON,
    FragmentFormatToJSONTyped,
} from './FragmentFormat';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { FlattenedRanges } from './FlattenedRanges';
import {
    FlattenedRangesFromJSON,
    FlattenedRangesFromJSONTyped,
    FlattenedRangesToJSON,
    FlattenedRangesToJSONTyped,
} from './FlattenedRanges';
import type { ConversationMessageSentimentEnum } from './ConversationMessageSentimentEnum';
import {
    ConversationMessageSentimentEnumFromJSON,
    ConversationMessageSentimentEnumFromJSONTyped,
    ConversationMessageSentimentEnumToJSON,
    ConversationMessageSentimentEnumToJSONTyped,
} from './ConversationMessageSentimentEnum';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
    FlattenedWorkstreamSummariesToJSONTyped,
} from './FlattenedWorkstreamSummaries';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedAssetsToJSONTyped,
} from './FlattenedAssets';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
    FlattenedConversationMessagesToJSONTyped,
} from './FlattenedConversationMessages';
import type { QGPTConversationMessageRoleEnum } from './QGPTConversationMessageRoleEnum';
import {
    QGPTConversationMessageRoleEnumFromJSON,
    QGPTConversationMessageRoleEnumFromJSONTyped,
    QGPTConversationMessageRoleEnumToJSON,
    QGPTConversationMessageRoleEnumToJSONTyped,
} from './QGPTConversationMessageRoleEnum';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
    ModelToJSONTyped,
} from './Model';
import type { FlattenedIdentifiedWorkstreamPatternEngineSources } from './FlattenedIdentifiedWorkstreamPatternEngineSources';
import {
    FlattenedIdentifiedWorkstreamPatternEngineSourcesFromJSON,
    FlattenedIdentifiedWorkstreamPatternEngineSourcesFromJSONTyped,
    FlattenedIdentifiedWorkstreamPatternEngineSourcesToJSON,
    FlattenedIdentifiedWorkstreamPatternEngineSourcesToJSONTyped,
} from './FlattenedIdentifiedWorkstreamPatternEngineSources';
import type { FlattenedAnchors } from './FlattenedAnchors';
import {
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
    FlattenedAnchorsToJSONTyped,
} from './FlattenedAnchors';

/**
 * This is a seeded version of a ConversationMessage.
 * 
 * conversation is optional, this is because it can be used within the SeededConversation, however if this is passed into the /messages/create w/o a conversation uuid then we will throw an error.
 * @export
 * @interface SeededConversationMessage
 */
export interface SeededConversationMessage {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededConversationMessage
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof SeededConversationMessage
     */
    created?: GroupedTimestamp;
    /**
     * 
     * @type {Model}
     * @memberof SeededConversationMessage
     */
    model?: Model;
    /**
     * 
     * @type {FragmentFormat}
     * @memberof SeededConversationMessage
     */
    fragment: FragmentFormat;
    /**
     * 
     * @type {ReferencedConversation}
     * @memberof SeededConversationMessage
     */
    conversation?: ReferencedConversation;
    /**
     * 
     * @type {ConversationMessageSentimentEnum}
     * @memberof SeededConversationMessage
     */
    sentiment?: ConversationMessageSentimentEnum;
    /**
     * 
     * @type {QGPTConversationMessageRoleEnum}
     * @memberof SeededConversationMessage
     */
    role: QGPTConversationMessageRoleEnum;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof SeededConversationMessage
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedRanges}
     * @memberof SeededConversationMessage
     */
    ranges?: FlattenedRanges;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof SeededConversationMessage
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedTags}
     * @memberof SeededConversationMessage
     */
    tags?: FlattenedTags;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof SeededConversationMessage
     */
    messages?: FlattenedConversationMessages;
    /**
     * 
     * @type {FlattenedWorkstreamEvents}
     * @memberof SeededConversationMessage
     */
    workstreamEvents?: FlattenedWorkstreamEvents;
    /**
     * 
     * @type {FlattenedIdentifiedWorkstreamPatternEngineSources}
     * @memberof SeededConversationMessage
     */
    sources?: FlattenedIdentifiedWorkstreamPatternEngineSources;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof SeededConversationMessage
     */
    anchors?: FlattenedAnchors;
}


/**
 * Check if a given object implements the SeededConversationMessage interface.
 */
export function instanceOfSeededConversationMessage(value: object): value is SeededConversationMessage {
    if (!('fragment' in value) || value['fragment'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    return true;
}

export function SeededConversationMessageFromJSON(json: any): SeededConversationMessage {
    return SeededConversationMessageFromJSONTyped(json, false);
}

export function SeededConversationMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededConversationMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'created': json['created'] == null ? undefined : GroupedTimestampFromJSON(json['created']),
        'model': json['model'] == null ? undefined : ModelFromJSON(json['model']),
        'fragment': FragmentFormatFromJSON(json['fragment']),
        'conversation': json['conversation'] == null ? undefined : ReferencedConversationFromJSON(json['conversation']),
        'sentiment': ConversationMessageSentimentEnumFromJSON(json['sentiment']),
        'role': QGPTConversationMessageRoleEnumFromJSON(json['role']),
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'ranges': json['ranges'] == null ? undefined : FlattenedRangesFromJSON(json['ranges']),
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'tags': json['tags'] == null ? undefined : FlattenedTagsFromJSON(json['tags']),
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
        'workstreamEvents': json['workstream_events'] == null ? undefined : FlattenedWorkstreamEventsFromJSON(json['workstream_events']),
        'sources': json['sources'] == null ? undefined : FlattenedIdentifiedWorkstreamPatternEngineSourcesFromJSON(json['sources']),
        'anchors': json['anchors'] == null ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
    };
}

export function SeededConversationMessageToJSON(json: any): SeededConversationMessage {
    return SeededConversationMessageToJSONTyped(json, false);
}

export function SeededConversationMessageToJSONTyped(value?: SeededConversationMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'created': GroupedTimestampToJSON(value['created']),
        'model': ModelToJSON(value['model']),
        'fragment': FragmentFormatToJSON(value['fragment']),
        'conversation': ReferencedConversationToJSON(value['conversation']),
        'sentiment': ConversationMessageSentimentEnumToJSON(value['sentiment']),
        'role': QGPTConversationMessageRoleEnumToJSON(value['role']),
        'assets': FlattenedAssetsToJSON(value['assets']),
        'ranges': FlattenedRangesToJSON(value['ranges']),
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'tags': FlattenedTagsToJSON(value['tags']),
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
        'workstream_events': FlattenedWorkstreamEventsToJSON(value['workstreamEvents']),
        'sources': FlattenedIdentifiedWorkstreamPatternEngineSourcesToJSON(value['sources']),
        'anchors': FlattenedAnchorsToJSON(value['anchors']),
    };
}

