/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { SeededPKCEADDITIONALPARAMETERS } from './SeededPKCEADDITIONALPARAMETERS';
import {
    SeededPKCEADDITIONALPARAMETERSFromJSON,
    SeededPKCEADDITIONALPARAMETERSFromJSONTyped,
    SeededPKCEADDITIONALPARAMETERSToJSON,
    SeededPKCEADDITIONALPARAMETERSToJSONTyped,
} from './SeededPKCEADDITIONALPARAMETERS';

/**
 * A model that initialized a PKCE Authentication Flow.
 * @export
 * @interface SeededPKCE
 */
export interface SeededPKCE {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededPKCE
     */
    schema?: EmbeddedModelSchema;
    /**
     * Indicates to Auth0 which OAuth 2.0 Flow you want to perform. Use code for Authorization Code Grant (PKCE) Flow.
     * @type {string}
     * @memberof SeededPKCE
     */
    responseType: SeededPKCEResponseTypeEnum;
    /**
     * An opaque value the clients adds to the initial request that Auth0 includes when redirecting the back to the client. This value must be used by the client to prevent CSRF attacks.
     * @type {string}
     * @memberof SeededPKCE
     */
    state: string;
    /**
     * A local key that is held as the comparator to state, thus they should be the same.
     * @type {string}
     * @memberof SeededPKCE
     */
    nonce: string;
    /**
     * http://localhost:8080/authentication/response
     * @type {string}
     * @memberof SeededPKCE
     */
    redirectUri?: string;
    /**
     * Generated challenge from the code_verifier.
     * @type {string}
     * @memberof SeededPKCE
     */
    codeChallenge: string;
    /**
     * Method used to generate the challenge. The PKCE spec defines two methods, S256 and plain, however, Auth0 supports only S256 since the latter is discouraged.
     * @type {string}
     * @memberof SeededPKCE
     */
    codeChallengeMethod: SeededPKCECodeChallengeMethodEnum;
    /**
     * https://auth.pieces.services/authorize
     * @type {string}
     * @memberof SeededPKCE
     */
    domain?: string;
    /**
     * The unique identifier of the target API you want to access.
     * i.e. https://pieces.us.auth0.com/api/v2/
     * @type {string}
     * @memberof SeededPKCE
     */
    audience?: string;
    /**
     * Provides a hint to Auth0 as to what flow should be displayed. The default behavior is to show a login page but you can override this by passing 'signup' to show the signup page instead.
     * @type {string}
     * @memberof SeededPKCE
     */
    screenHint?: SeededPKCEScreenHintEnum;
    /**
     * 	To initiate a silent authentication request, use prompt=none (see Remarks for more info).
     * @type {string}
     * @memberof SeededPKCE
     */
    prompt?: SeededPKCEPromptEnum;
    /**
     * 
     * @type {string}
     * @memberof SeededPKCE
     */
    organization?: string;
    /**
     * 
     * @type {string}
     * @memberof SeededPKCE
     */
    invitation?: string;
    /**
     * The scopes which you want to request authorization for. These must be separated by a space. You can request any of the standard OpenID Connect (OIDC) scopes about users, such as profile and email, custom claims that must conform to a namespaced format, or any scopes supported by the target API (for example, read:contacts). Include offline_access to get a Refresh Token.
     * @type {Array<string>}
     * @memberof SeededPKCE
     */
    scope: Array<SeededPKCEScopeEnum>;
    /**
     * Your application's Client ID.
     * @type {string}
     * @memberof SeededPKCE
     */
    clientId: string;
    /**
     * 
     * @type {SeededPKCEADDITIONALPARAMETERS}
     * @memberof SeededPKCE
     */
    aDDITIONALPARAMETERS?: SeededPKCEADDITIONALPARAMETERS;
    /**
     * 
     * @type {string}
     * @memberof SeededPKCE
     */
    responseMode?: SeededPKCEResponseModeEnum;
}
/**
 * @export
 */
export const SeededPKCEResponseTypeEnum = {
    Unknown: 'UNKNOWN',
    Code: 'code',
    Token: 'token',
    IdToken: 'id_token'
} as const;
export type SeededPKCEResponseTypeEnum = typeof SeededPKCEResponseTypeEnum[keyof typeof SeededPKCEResponseTypeEnum];

    export function instanceOfSeededPKCEResponseTypeEnum(value: any): boolean {
        for (const key in SeededPKCEResponseTypeEnum) {
            if (Object.prototype.hasOwnProperty.call(SeededPKCEResponseTypeEnum, key)) {
                if (SeededPKCEResponseTypeEnum[key as keyof typeof SeededPKCEResponseTypeEnum] === value) {
                    return true;
                }
            }
        }
        return false;
    }

    export function SeededPKCEResponseTypeEnumFromJSON(json: any): SeededPKCEResponseTypeEnum {
        return SeededPKCEResponseTypeEnumFromJSONTyped(json, false);
    }

    export function SeededPKCEResponseTypeEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPKCEResponseTypeEnum {
        if (json === null || json === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseTypeEnum;
        }

        if (instanceOfSeededPKCEResponseTypeEnum(json)) {
            return json as SeededPKCEResponseTypeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseTypeEnum;
        }
    }

    export function SeededPKCEResponseTypeEnumToJSON(value?: SeededPKCEResponseTypeEnum | null): any {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseTypeEnum;
        }

        // This must be checked when arguments are passed as 'any'
            if (instanceOfSeededPKCEResponseTypeEnum(value)) {
            return value as SeededPKCEResponseTypeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseTypeEnum;
        }
    }

    export function SeededPKCEResponseTypeEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): SeededPKCEResponseTypeEnum {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseTypeEnum;
        }
        if (instanceOfSeededPKCEResponseTypeEnum(value)) {
            return value as SeededPKCEResponseTypeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseTypeEnum;
        }
    }

/**
 * @export
 */
export const SeededPKCECodeChallengeMethodEnum = {
    Unknown: 'UNKNOWN',
    S256: 'S256'
} as const;
export type SeededPKCECodeChallengeMethodEnum = typeof SeededPKCECodeChallengeMethodEnum[keyof typeof SeededPKCECodeChallengeMethodEnum];

    export function instanceOfSeededPKCECodeChallengeMethodEnum(value: any): boolean {
        for (const key in SeededPKCECodeChallengeMethodEnum) {
            if (Object.prototype.hasOwnProperty.call(SeededPKCECodeChallengeMethodEnum, key)) {
                if (SeededPKCECodeChallengeMethodEnum[key as keyof typeof SeededPKCECodeChallengeMethodEnum] === value) {
                    return true;
                }
            }
        }
        return false;
    }

    export function SeededPKCECodeChallengeMethodEnumFromJSON(json: any): SeededPKCECodeChallengeMethodEnum {
        return SeededPKCECodeChallengeMethodEnumFromJSONTyped(json, false);
    }

    export function SeededPKCECodeChallengeMethodEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPKCECodeChallengeMethodEnum {
        if (json === null || json === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCECodeChallengeMethodEnum;
        }

        if (instanceOfSeededPKCECodeChallengeMethodEnum(json)) {
            return json as SeededPKCECodeChallengeMethodEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCECodeChallengeMethodEnum;
        }
    }

    export function SeededPKCECodeChallengeMethodEnumToJSON(value?: SeededPKCECodeChallengeMethodEnum | null): any {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCECodeChallengeMethodEnum;
        }

        // This must be checked when arguments are passed as 'any'
            if (instanceOfSeededPKCECodeChallengeMethodEnum(value)) {
            return value as SeededPKCECodeChallengeMethodEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCECodeChallengeMethodEnum;
        }
    }

    export function SeededPKCECodeChallengeMethodEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): SeededPKCECodeChallengeMethodEnum {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCECodeChallengeMethodEnum;
        }
        if (instanceOfSeededPKCECodeChallengeMethodEnum(value)) {
            return value as SeededPKCECodeChallengeMethodEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCECodeChallengeMethodEnum;
        }
    }

/**
 * @export
 */
export const SeededPKCEScreenHintEnum = {
    Unknown: 'UNKNOWN',
    Signup: 'signup'
} as const;
export type SeededPKCEScreenHintEnum = typeof SeededPKCEScreenHintEnum[keyof typeof SeededPKCEScreenHintEnum];

    export function instanceOfSeededPKCEScreenHintEnum(value: any): boolean {
        for (const key in SeededPKCEScreenHintEnum) {
            if (Object.prototype.hasOwnProperty.call(SeededPKCEScreenHintEnum, key)) {
                if (SeededPKCEScreenHintEnum[key as keyof typeof SeededPKCEScreenHintEnum] === value) {
                    return true;
                }
            }
        }
        return false;
    }

    export function SeededPKCEScreenHintEnumFromJSON(json: any): SeededPKCEScreenHintEnum {
        return SeededPKCEScreenHintEnumFromJSONTyped(json, false);
    }

    export function SeededPKCEScreenHintEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPKCEScreenHintEnum {
        if (json === null || json === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEScreenHintEnum;
        }

        if (instanceOfSeededPKCEScreenHintEnum(json)) {
            return json as SeededPKCEScreenHintEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEScreenHintEnum;
        }
    }

    export function SeededPKCEScreenHintEnumToJSON(value?: SeededPKCEScreenHintEnum | null): any {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEScreenHintEnum;
        }

        // This must be checked when arguments are passed as 'any'
            if (instanceOfSeededPKCEScreenHintEnum(value)) {
            return value as SeededPKCEScreenHintEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEScreenHintEnum;
        }
    }

    export function SeededPKCEScreenHintEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): SeededPKCEScreenHintEnum {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEScreenHintEnum;
        }
        if (instanceOfSeededPKCEScreenHintEnum(value)) {
            return value as SeededPKCEScreenHintEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEScreenHintEnum;
        }
    }

/**
 * @export
 */
export const SeededPKCEPromptEnum = {
    Unknown: 'UNKNOWN',
    Login: 'login',
    None: 'none'
} as const;
export type SeededPKCEPromptEnum = typeof SeededPKCEPromptEnum[keyof typeof SeededPKCEPromptEnum];

    export function instanceOfSeededPKCEPromptEnum(value: any): boolean {
        for (const key in SeededPKCEPromptEnum) {
            if (Object.prototype.hasOwnProperty.call(SeededPKCEPromptEnum, key)) {
                if (SeededPKCEPromptEnum[key as keyof typeof SeededPKCEPromptEnum] === value) {
                    return true;
                }
            }
        }
        return false;
    }

    export function SeededPKCEPromptEnumFromJSON(json: any): SeededPKCEPromptEnum {
        return SeededPKCEPromptEnumFromJSONTyped(json, false);
    }

    export function SeededPKCEPromptEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPKCEPromptEnum {
        if (json === null || json === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEPromptEnum;
        }

        if (instanceOfSeededPKCEPromptEnum(json)) {
            return json as SeededPKCEPromptEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEPromptEnum;
        }
    }

    export function SeededPKCEPromptEnumToJSON(value?: SeededPKCEPromptEnum | null): any {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEPromptEnum;
        }

        // This must be checked when arguments are passed as 'any'
            if (instanceOfSeededPKCEPromptEnum(value)) {
            return value as SeededPKCEPromptEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEPromptEnum;
        }
    }

    export function SeededPKCEPromptEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): SeededPKCEPromptEnum {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEPromptEnum;
        }
        if (instanceOfSeededPKCEPromptEnum(value)) {
            return value as SeededPKCEPromptEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEPromptEnum;
        }
    }

/**
 * @export
 */
export const SeededPKCEScopeEnum = {
    Unknown: 'UNKNOWN',
    OfflineAccess: 'offline_access',
    Email: 'email',
    Profile: 'profile',
    Openid: 'openid'
} as const;
export type SeededPKCEScopeEnum = typeof SeededPKCEScopeEnum[keyof typeof SeededPKCEScopeEnum];

/**
 * @export
 */
export const SeededPKCEResponseModeEnum = {
    Unknown: 'UNKNOWN',
    FormPost: 'form_post',
    WebMessage: 'web_message',
    Fragment: 'fragment',
    Query: 'query'
} as const;
export type SeededPKCEResponseModeEnum = typeof SeededPKCEResponseModeEnum[keyof typeof SeededPKCEResponseModeEnum];

    export function instanceOfSeededPKCEResponseModeEnum(value: any): boolean {
        for (const key in SeededPKCEResponseModeEnum) {
            if (Object.prototype.hasOwnProperty.call(SeededPKCEResponseModeEnum, key)) {
                if (SeededPKCEResponseModeEnum[key as keyof typeof SeededPKCEResponseModeEnum] === value) {
                    return true;
                }
            }
        }
        return false;
    }

    export function SeededPKCEResponseModeEnumFromJSON(json: any): SeededPKCEResponseModeEnum {
        return SeededPKCEResponseModeEnumFromJSONTyped(json, false);
    }

    export function SeededPKCEResponseModeEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPKCEResponseModeEnum {
        if (json === null || json === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseModeEnum;
        }

        if (instanceOfSeededPKCEResponseModeEnum(json)) {
            return json as SeededPKCEResponseModeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseModeEnum;
        }
    }

    export function SeededPKCEResponseModeEnumToJSON(value?: SeededPKCEResponseModeEnum | null): any {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseModeEnum;
        }

        // This must be checked when arguments are passed as 'any'
            if (instanceOfSeededPKCEResponseModeEnum(value)) {
            return value as SeededPKCEResponseModeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseModeEnum;
        }
    }

    export function SeededPKCEResponseModeEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): SeededPKCEResponseModeEnum {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseModeEnum;
        }
        if (instanceOfSeededPKCEResponseModeEnum(value)) {
            return value as SeededPKCEResponseModeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as SeededPKCEResponseModeEnum;
        }
    }



/**
 * Check if a given object implements the SeededPKCE interface.
 */
export function instanceOfSeededPKCE(value: object): value is SeededPKCE {
    if (!('responseType' in value) || value['responseType'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('nonce' in value) || value['nonce'] === undefined) return false;
    if (!('codeChallenge' in value) || value['codeChallenge'] === undefined) return false;
    if (!('codeChallengeMethod' in value) || value['codeChallengeMethod'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    return true;
}

export function SeededPKCEFromJSON(json: any): SeededPKCE {
    return SeededPKCEFromJSONTyped(json, false);
}

export function SeededPKCEFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPKCE {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'responseType': SeededPKCEResponseTypeEnumFromJSON(json['response_type']),
        'state': json['state'],
        'nonce': json['nonce'],
        'redirectUri': json['redirect_uri'] == null ? undefined : json['redirect_uri'],
        'codeChallenge': json['code_challenge'],
        'codeChallengeMethod': SeededPKCECodeChallengeMethodEnumFromJSON(json['code_challenge_method']),
        'domain': json['domain'] == null ? undefined : json['domain'],
        'audience': json['audience'] == null ? undefined : json['audience'],
        'screenHint': SeededPKCEScreenHintEnumFromJSON(json['screen_hint']),
        'prompt': SeededPKCEPromptEnumFromJSON(json['prompt']),
        'organization': json['organization'] == null ? undefined : json['organization'],
        'invitation': json['invitation'] == null ? undefined : json['invitation'],
        'scope': json['scope'],
        'clientId': json['client_id'],
        'aDDITIONALPARAMETERS': json['ADDITIONAL_PARAMETERS'] == null ? undefined : SeededPKCEADDITIONALPARAMETERSFromJSON(json['ADDITIONAL_PARAMETERS']),
        'responseMode': SeededPKCEResponseModeEnumFromJSON(json['response_mode']),
    };
}

export function SeededPKCEToJSON(json: any): SeededPKCE {
    return SeededPKCEToJSONTyped(json, false);
}

export function SeededPKCEToJSONTyped(value?: SeededPKCE | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'responseType': SeededPKCEResponseTypeEnumToJSON(value['response_type']),
        'state': value['state'],
        'nonce': value['nonce'],
        'redirect_uri': value['redirectUri'],
        'code_challenge': value['codeChallenge'],
        'codeChallengeMethod': SeededPKCECodeChallengeMethodEnumToJSON(value['code_challenge_method']),
        'domain': value['domain'],
        'audience': value['audience'],
        'screenHint': SeededPKCEScreenHintEnumToJSON(value['screen_hint']),
        'prompt': SeededPKCEPromptEnumToJSON(value['prompt']),
        'organization': value['organization'],
        'invitation': value['invitation'],
        'scope': value['scope'],
        'client_id': value['clientId'],
        'ADDITIONAL_PARAMETERS': SeededPKCEADDITIONALPARAMETERSToJSON(value['aDDITIONALPARAMETERS']),
        'responseMode': SeededPKCEResponseModeEnumToJSON(value['response_mode']),
    };
}

