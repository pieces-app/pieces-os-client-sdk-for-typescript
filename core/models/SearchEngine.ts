/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TemporalSearchOptions } from './TemporalSearchOptions';
import {
    TemporalSearchOptionsFromJSON,
    TemporalSearchOptionsFromJSONTyped,
    TemporalSearchOptionsToJSON,
    TemporalSearchOptionsToJSONTyped,
} from './TemporalSearchOptions';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { SearchEngines } from './SearchEngines';
import {
    SearchEnginesFromJSON,
    SearchEnginesFromJSONTyped,
    SearchEnginesToJSON,
    SearchEnginesToJSONTyped,
} from './SearchEngines';
import type { EmbeddingsSearchOptions } from './EmbeddingsSearchOptions';
import {
    EmbeddingsSearchOptionsFromJSON,
    EmbeddingsSearchOptionsFromJSONTyped,
    EmbeddingsSearchOptionsToJSON,
    EmbeddingsSearchOptionsToJSONTyped,
} from './EmbeddingsSearchOptions';
import type { WorkstreamSearchOptions } from './WorkstreamSearchOptions';
import {
    WorkstreamSearchOptionsFromJSON,
    WorkstreamSearchOptionsFromJSONTyped,
    WorkstreamSearchOptionsToJSON,
    WorkstreamSearchOptionsToJSONTyped,
} from './WorkstreamSearchOptions';
import type { FullTextSearchOptions } from './FullTextSearchOptions';
import {
    FullTextSearchOptionsFromJSON,
    FullTextSearchOptionsFromJSONTyped,
    FullTextSearchOptionsToJSON,
    FullTextSearchOptionsToJSONTyped,
} from './FullTextSearchOptions';

/**
 * This will determine the type of search that will run
 * 
 * These are all different searching methods all of which are exclusive.
 * Meaning that you cannot mix & match types.
 * 
 * operations: is here if you want to build complex searching behavior.
 * (A || B) && (B || C) , note this can get very complex but can be as flexible as you need.
 * @export
 * @interface SearchEngine
 */
export interface SearchEngine {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SearchEngine
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof SearchEngine
     */
    query?: string;
    /**
     * 
     * @type {EmbeddingsSearchOptions}
     * @memberof SearchEngine
     */
    embeddings?: EmbeddingsSearchOptions;
    /**
     * 
     * @type {FullTextSearchOptions}
     * @memberof SearchEngine
     */
    fullText?: FullTextSearchOptions;
    /**
     * 
     * @type {TemporalSearchOptions}
     * @memberof SearchEngine
     */
    temporal?: TemporalSearchOptions;
    /**
     * 
     * @type {WorkstreamSearchOptions}
     * @memberof SearchEngine
     */
    workstream?: WorkstreamSearchOptions;
    /**
     * 
     * @type {SearchEngines}
     * @memberof SearchEngine
     */
    operations?: SearchEngines;
}

/**
 * Check if a given object implements the SearchEngine interface.
 */
export function instanceOfSearchEngine(value: object): value is SearchEngine {
    return true;
}

export function SearchEngineFromJSON(json: any): SearchEngine {
    return SearchEngineFromJSONTyped(json, false);
}

export function SearchEngineFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchEngine {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'query': json['query'] == null ? undefined : json['query'],
        'embeddings': json['embeddings'] == null ? undefined : EmbeddingsSearchOptionsFromJSON(json['embeddings']),
        'fullText': json['full_text'] == null ? undefined : FullTextSearchOptionsFromJSON(json['full_text']),
        'temporal': json['temporal'] == null ? undefined : TemporalSearchOptionsFromJSON(json['temporal']),
        'workstream': json['workstream'] == null ? undefined : WorkstreamSearchOptionsFromJSON(json['workstream']),
        'operations': json['operations'] == null ? undefined : SearchEnginesFromJSON(json['operations']),
    };
}

export function SearchEngineToJSON(json: any): SearchEngine {
    return SearchEngineToJSONTyped(json, false);
}

export function SearchEngineToJSONTyped(value?: SearchEngine | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'query': value['query'],
        'embeddings': EmbeddingsSearchOptionsToJSON(value['embeddings']),
        'full_text': FullTextSearchOptionsToJSON(value['fullText']),
        'temporal': TemporalSearchOptionsToJSON(value['temporal']),
        'workstream': WorkstreamSearchOptionsToJSON(value['workstream']),
        'operations': SearchEnginesToJSON(value['operations']),
    };
}

