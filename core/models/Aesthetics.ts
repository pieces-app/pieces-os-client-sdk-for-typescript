/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Theme } from './Theme';
import {
    ThemeFromJSON,
    ThemeFromJSONTyped,
    ThemeToJSON,
    ThemeToJSONTyped,
} from './Theme';
import type { Font } from './Font';
import {
    FontFromJSON,
    FontFromJSONTyped,
    FontToJSON,
    FontToJSONTyped,
} from './Font';

/**
 * These are aesthetics properties that will ensure the darkmode + font size and other aesthetics properties persist:)
 * @export
 * @interface Aesthetics
 */
export interface Aesthetics {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Aesthetics
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Theme}
     * @memberof Aesthetics
     */
    theme: Theme;
    /**
     * 
     * @type {Font}
     * @memberof Aesthetics
     */
    font: Font;
}

/**
 * Check if a given object implements the Aesthetics interface.
 */
export function instanceOfAesthetics(value: object): value is Aesthetics {
    if (!('theme' in value) || value['theme'] === undefined) return false;
    if (!('font' in value) || value['font'] === undefined) return false;
    return true;
}

export function AestheticsFromJSON(json: any): Aesthetics {
    return AestheticsFromJSONTyped(json, false);
}

export function AestheticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Aesthetics {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'theme': ThemeFromJSON(json['theme']),
        'font': FontFromJSON(json['font']),
    };
}

export function AestheticsToJSON(json: any): Aesthetics {
    return AestheticsToJSONTyped(json, false);
}

export function AestheticsToJSONTyped(value?: Aesthetics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'theme': ThemeToJSON(value['theme']),
        'font': FontToJSON(value['font']),
    };
}

