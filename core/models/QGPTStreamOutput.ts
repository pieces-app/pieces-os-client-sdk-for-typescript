/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QGPTStreamedOutputExtractedMaterials } from './QGPTStreamedOutputExtractedMaterials';
import {
    QGPTStreamedOutputExtractedMaterialsFromJSON,
    QGPTStreamedOutputExtractedMaterialsFromJSONTyped,
    QGPTStreamedOutputExtractedMaterialsToJSON,
    QGPTStreamedOutputExtractedMaterialsToJSONTyped,
} from './QGPTStreamedOutputExtractedMaterials';
import type { QGPTQuestionOutput } from './QGPTQuestionOutput';
import {
    QGPTQuestionOutputFromJSON,
    QGPTQuestionOutputFromJSONTyped,
    QGPTQuestionOutputToJSON,
    QGPTQuestionOutputToJSONTyped,
} from './QGPTQuestionOutput';
import type { QGPTAgentRoutes } from './QGPTAgentRoutes';
import {
    QGPTAgentRoutesFromJSON,
    QGPTAgentRoutesFromJSONTyped,
    QGPTAgentRoutesToJSON,
    QGPTAgentRoutesToJSONTyped,
} from './QGPTAgentRoutes';
import type { MigrationProgress } from './MigrationProgress';
import {
    MigrationProgressFromJSON,
    MigrationProgressFromJSONTyped,
    MigrationProgressToJSON,
    MigrationProgressToJSONTyped,
} from './MigrationProgress';
import type { QGPTRelevanceOutput } from './QGPTRelevanceOutput';
import {
    QGPTRelevanceOutputFromJSON,
    QGPTRelevanceOutputFromJSONTyped,
    QGPTRelevanceOutputToJSON,
    QGPTRelevanceOutputToJSONTyped,
} from './QGPTRelevanceOutput';
import type { QGPTStreamEnum } from './QGPTStreamEnum';
import {
    QGPTStreamEnumFromJSON,
    QGPTStreamEnumFromJSONTyped,
    QGPTStreamEnumToJSON,
    QGPTStreamEnumToJSONTyped,
} from './QGPTStreamEnum';

/**
 * This is the out for the /qgpt/stream endpoint.
 * 
 * 200: success
 * 401: invalid authentication/api key
 * 429: Rate limit/Quota exceeded
 * 500: server had an error
 * 503: the engine is currently overloaded
 * @export
 * @interface QGPTStreamOutput
 */
export interface QGPTStreamOutput {
    /**
     * This is the id used to represent the stream of response. this will always be present. We will use the value passed inby the client, or we will generate one.
     * @type {string}
     * @memberof QGPTStreamOutput
     */
    request?: string;
    /**
     * 
     * @type {QGPTRelevanceOutput}
     * @memberof QGPTStreamOutput
     */
    relevance?: QGPTRelevanceOutput;
    /**
     * 
     * @type {QGPTQuestionOutput}
     * @memberof QGPTStreamOutput
     */
    question?: QGPTQuestionOutput;
    /**
     * 
     * @type {QGPTStreamEnum}
     * @memberof QGPTStreamOutput
     */
    status?: QGPTStreamEnum;
    /**
     * This is the ID of a predefined persisted conversation, if this is not present we will create a new conversation for the input/output.(in the case of a question)
     * @type {string}
     * @memberof QGPTStreamOutput
     */
    conversation: string;
    /**
     * This will be provided
     * @type {number}
     * @memberof QGPTStreamOutput
     */
    statusCode?: number | null;
    /**
     * optional error message is the status code is NOT 200
     * @type {string}
     * @memberof QGPTStreamOutput
     */
    errorMessage?: string;
    /**
     * 
     * @type {QGPTAgentRoutes}
     * @memberof QGPTStreamOutput
     */
    agentRoutes?: QGPTAgentRoutes;
    /**
     * 
     * @type {QGPTStreamedOutputExtractedMaterials}
     * @memberof QGPTStreamOutput
     */
    extracted?: QGPTStreamedOutputExtractedMaterials;
    /**
     * 
     * @type {MigrationProgress}
     * @memberof QGPTStreamOutput
     */
    migration?: MigrationProgress;
}



/**
 * Check if a given object implements the QGPTStreamOutput interface.
 */
export function instanceOfQGPTStreamOutput(value: object): value is QGPTStreamOutput {
    if (!('conversation' in value) || value['conversation'] === undefined) return false;
    return true;
}

export function QGPTStreamOutputFromJSON(json: any): QGPTStreamOutput {
    return QGPTStreamOutputFromJSONTyped(json, false);
}

export function QGPTStreamOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTStreamOutput {
    if (json == null) {
        return json;
    }
    return {
        
        'request': json['request'] == null ? undefined : json['request'],
        'relevance': json['relevance'] == null ? undefined : QGPTRelevanceOutputFromJSON(json['relevance']),
        'question': json['question'] == null ? undefined : QGPTQuestionOutputFromJSON(json['question']),
        'status': json['status'] == null ? undefined : QGPTStreamEnumFromJSON(json['status']),
        'conversation': json['conversation'],
        'statusCode': json['statusCode'] == null ? undefined : json['statusCode'],
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
        'agentRoutes': json['agentRoutes'] == null ? undefined : QGPTAgentRoutesFromJSON(json['agentRoutes']),
        'extracted': json['extracted'] == null ? undefined : QGPTStreamedOutputExtractedMaterialsFromJSON(json['extracted']),
        'migration': json['migration'] == null ? undefined : MigrationProgressFromJSON(json['migration']),
    };
}

export function QGPTStreamOutputToJSON(json: any): QGPTStreamOutput {
    return QGPTStreamOutputToJSONTyped(json, false);
}

export function QGPTStreamOutputToJSONTyped(value?: QGPTStreamOutput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'request': value['request'],
        'relevance': QGPTRelevanceOutputToJSON(value['relevance']),
        'question': QGPTQuestionOutputToJSON(value['question']),
        'status': QGPTStreamEnumToJSON(value['status']),
        'conversation': value['conversation'],
        'statusCode': value['statusCode'],
        'errorMessage': value['errorMessage'],
        'agentRoutes': QGPTAgentRoutesToJSON(value['agentRoutes']),
        'extracted': QGPTStreamedOutputExtractedMaterialsToJSON(value['extracted']),
        'migration': MigrationProgressToJSON(value['migration']),
    };
}

