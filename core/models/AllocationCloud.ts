/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AllocationCloudUrls } from './AllocationCloudUrls';
import {
    AllocationCloudUrlsFromJSON,
    AllocationCloudUrlsFromJSONTyped,
    AllocationCloudUrlsToJSON,
    AllocationCloudUrlsToJSONTyped,
} from './AllocationCloudUrls';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { AllocationCloudStatus } from './AllocationCloudStatus';
import {
    AllocationCloudStatusFromJSON,
    AllocationCloudStatusFromJSONTyped,
    AllocationCloudStatusToJSON,
    AllocationCloudStatusToJSONTyped,
} from './AllocationCloudStatus';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';

/**
 * update && version: will be present only if your cloud was successfully spun up && running.
 * 
 * updated: is the last time this was updated.
 * @export
 * @interface AllocationCloud
 */
export interface AllocationCloud {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof AllocationCloud
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is a uuid that represents this cloud.(this is the same as the userid)
     * @type {string}
     * @memberof AllocationCloud
     */
    id: string;
    /**
     * this is your useruuid.
     * @type {string}
     * @memberof AllocationCloud
     */
    user: string;
    /**
     * 
     * @type {AllocationCloudUrls}
     * @memberof AllocationCloud
     */
    urls: AllocationCloudUrls;
    /**
     * 
     * @type {AllocationCloudStatus}
     * @memberof AllocationCloud
     */
    status: AllocationCloudStatus;
    /**
     * This is the project that this is attached to.
     * @type {string}
     * @memberof AllocationCloud
     */
    project: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof AllocationCloud
     */
    updated?: GroupedTimestamp;
    /**
     * this is the current version of the server.
     * @type {string}
     * @memberof AllocationCloud
     */
    version?: string;
    /**
     * this is the region where the project is defined.
     * @type {string}
     * @memberof AllocationCloud
     */
    region?: string;
}


/**
 * Check if a given object implements the AllocationCloud interface.
 */
export function instanceOfAllocationCloud(value: object): value is AllocationCloud {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('urls' in value) || value['urls'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('project' in value) || value['project'] === undefined) return false;
    return true;
}

export function AllocationCloudFromJSON(json: any): AllocationCloud {
    return AllocationCloudFromJSONTyped(json, false);
}

export function AllocationCloudFromJSONTyped(json: any, ignoreDiscriminator: boolean): AllocationCloud {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'user': json['user'],
        'urls': AllocationCloudUrlsFromJSON(json['urls']),
        'status': AllocationCloudStatusFromJSON(json['status']),
        'project': json['project'],
        'updated': json['updated'] == null ? undefined : GroupedTimestampFromJSON(json['updated']),
        'version': json['version'] == null ? undefined : json['version'],
        'region': json['region'] == null ? undefined : json['region'],
    };
}

export function AllocationCloudToJSON(json: any): AllocationCloud {
    return AllocationCloudToJSONTyped(json, false);
}

export function AllocationCloudToJSONTyped(value?: AllocationCloud | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'user': value['user'],
        'urls': AllocationCloudUrlsToJSON(value['urls']),
        'status': AllocationCloudStatusToJSON(value['status']),
        'project': value['project'],
        'updated': GroupedTimestampToJSON(value['updated']),
        'version': value['version'],
        'region': value['region'],
    };
}

