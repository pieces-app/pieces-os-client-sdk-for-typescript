/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This will be a simple model with a score and a text value that will represent the value returned for this answer.
 * @export
 * @interface QGPTQuestionAnswer
 */
export interface QGPTQuestionAnswer {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof QGPTQuestionAnswer
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is the score from 0-1 on how good this answer is.
     * @type {number}
     * @memberof QGPTQuestionAnswer
     */
    score: number;
    /**
     * 
     * @type {string}
     * @memberof QGPTQuestionAnswer
     */
    text: string;
}

/**
 * Check if a given object implements the QGPTQuestionAnswer interface.
 */
export function instanceOfQGPTQuestionAnswer(value: object): value is QGPTQuestionAnswer {
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function QGPTQuestionAnswerFromJSON(json: any): QGPTQuestionAnswer {
    return QGPTQuestionAnswerFromJSONTyped(json, false);
}

export function QGPTQuestionAnswerFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTQuestionAnswer {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'score': json['score'],
        'text': json['text'],
    };
}

export function QGPTQuestionAnswerToJSON(json: any): QGPTQuestionAnswer {
    return QGPTQuestionAnswerToJSONTyped(json, false);
}

export function QGPTQuestionAnswerToJSONTyped(value?: QGPTQuestionAnswer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'score': value['score'],
        'text': value['text'],
    };
}

