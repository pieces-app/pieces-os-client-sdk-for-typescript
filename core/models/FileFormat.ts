/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { TransferableBytes } from './TransferableBytes';
import {
    TransferableBytesFromJSON,
    TransferableBytesFromJSONTyped,
    TransferableBytesToJSON,
    TransferableBytesToJSONTyped,
} from './TransferableBytes';
import type { TransferableString } from './TransferableString';
import {
    TransferableStringFromJSON,
    TransferableStringFromJSONTyped,
    TransferableStringToJSON,
    TransferableStringToJSONTyped,
} from './TransferableString';

/**
 * This describes a FileFormat. If you need meta data you can get all of that from your format wrapper.
 * @export
 * @interface FileFormat
 */
export interface FileFormat {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FileFormat
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {TransferableBytes}
     * @memberof FileFormat
     */
    bytes?: TransferableBytes;
    /**
     * 
     * @type {TransferableString}
     * @memberof FileFormat
     */
    string?: TransferableString;
}

/**
 * Check if a given object implements the FileFormat interface.
 */
export function instanceOfFileFormat(value: object): value is FileFormat {
    return true;
}

export function FileFormatFromJSON(json: any): FileFormat {
    return FileFormatFromJSONTyped(json, false);
}

export function FileFormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileFormat {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'bytes': json['bytes'] == null ? undefined : TransferableBytesFromJSON(json['bytes']),
        'string': json['string'] == null ? undefined : TransferableStringFromJSON(json['string']),
    };
}

export function FileFormatToJSON(json: any): FileFormat {
    return FileFormatToJSONTyped(json, false);
}

export function FileFormatToJSONTyped(value?: FileFormat | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'bytes': TransferableBytesToJSON(value['bytes']),
        'string': TransferableStringToJSON(value['string']),
    };
}

