/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { FlattenedShare } from './FlattenedShare';
import {
    FlattenedShareFromJSON,
    FlattenedShareFromJSONTyped,
    FlattenedShareToJSON,
    FlattenedShareToJSONTyped,
} from './FlattenedShare';

/**
 * This is a [DAG SAFE] version of a share. with just a required share ID.
 * @export
 * @interface ReferencedShare
 */
export interface ReferencedShare {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof ReferencedShare
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof ReferencedShare
     */
    id: string;
    /**
     * 
     * @type {FlattenedShare}
     * @memberof ReferencedShare
     */
    reference?: FlattenedShare;
}

/**
 * Check if a given object implements the ReferencedShare interface.
 */
export function instanceOfReferencedShare(value: object): value is ReferencedShare {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function ReferencedShareFromJSON(json: any): ReferencedShare {
    return ReferencedShareFromJSONTyped(json, false);
}

export function ReferencedShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReferencedShare {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'reference': json['reference'] == null ? undefined : FlattenedShareFromJSON(json['reference']),
    };
}

export function ReferencedShareToJSON(json: any): ReferencedShare {
    return ReferencedShareToJSONTyped(json, false);
}

export function ReferencedShareToJSONTyped(value?: ReferencedShare | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'reference': FlattenedShareToJSON(value['reference']),
    };
}

