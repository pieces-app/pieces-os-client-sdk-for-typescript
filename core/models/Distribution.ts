/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { MailgunDistribution } from './MailgunDistribution';
import {
    MailgunDistributionFromJSON,
    MailgunDistributionFromJSONTyped,
    MailgunDistributionToJSON,
    MailgunDistributionToJSONTyped,
} from './MailgunDistribution';
import type { FlattenedShare } from './FlattenedShare';
import {
    FlattenedShareFromJSON,
    FlattenedShareFromJSONTyped,
    FlattenedShareToJSON,
    FlattenedShareToJSONTyped,
} from './FlattenedShare';
import type { GitHubDistribution } from './GitHubDistribution';
import {
    GitHubDistributionFromJSON,
    GitHubDistributionFromJSONTyped,
    GitHubDistributionToJSON,
    GitHubDistributionToJSONTyped,
} from './GitHubDistribution';

/**
 * This is a fully referenced version of a Distribution.
 * TODO add additional distributions such as slack, google_chat, ...etc
 * @export
 * @interface Distribution
 */
export interface Distribution {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Distribution
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Distribution
     */
    id: string;
    /**
     * 
     * @type {FlattenedShare}
     * @memberof Distribution
     */
    share: FlattenedShare;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Distribution
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Distribution
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Distribution
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {MailgunDistribution}
     * @memberof Distribution
     */
    mailgun?: MailgunDistribution;
    /**
     * 
     * @type {GitHubDistribution}
     * @memberof Distribution
     */
    github?: GitHubDistribution;
}


/**
 * Check if a given object implements the Distribution interface.
 */
export function instanceOfDistribution(value: object): value is Distribution {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('share' in value) || value['share'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    return true;
}

export function DistributionFromJSON(json: any): Distribution {
    return DistributionFromJSONTyped(json, false);
}

export function DistributionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Distribution {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'share': FlattenedShareFromJSON(json['share']),
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'mailgun': json['mailgun'] == null ? undefined : MailgunDistributionFromJSON(json['mailgun']),
        'github': json['github'] == null ? undefined : GitHubDistributionFromJSON(json['github']),
    };
}

export function DistributionToJSON(json: any): Distribution {
    return DistributionToJSONTyped(json, false);
}

export function DistributionToJSONTyped(value?: Distribution | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'share': FlattenedShareToJSON(value['share']),
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'mailgun': MailgunDistributionToJSON(value['mailgun']),
        'github': GitHubDistributionToJSON(value['github']),
    };
}

