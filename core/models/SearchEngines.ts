/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FilterOperationTypeEnum } from './FilterOperationTypeEnum';
import {
    FilterOperationTypeEnumFromJSON,
    FilterOperationTypeEnumFromJSONTyped,
    FilterOperationTypeEnumToJSON,
    FilterOperationTypeEnumToJSONTyped,
} from './FilterOperationTypeEnum';
import type { SearchEngine } from './SearchEngine';
import {
    SearchEngineFromJSON,
    SearchEngineFromJSONTyped,
    SearchEngineToJSON,
    SearchEngineToJSONTyped,
} from './SearchEngine';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a model for plural Engine.
 * This means that you can run multiple searches, this follow similar behavior to the Asset Filtering.where you can
 * create you own complex operations: IE search a query in FTS, and filter all that have the create from here to here.
 * 
 * note: each Engine will only represent 1 search operation, however you many pass in operations to create further nesting. IE
 * 
 * Engine: [FTS + w/ operations: [created filter, updated filer, ncs Search] w/ a type of OR:::: This can be as nested as you want however will just increase the time till it returns results.]
 * 
 * note: type: default behavior for the type is an AND operation.
 * @export
 * @interface SearchEngines
 */
export interface SearchEngines {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SearchEngines
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<SearchEngine>}
     * @memberof SearchEngines
     */
    iterable: Array<SearchEngine>;
    /**
     * 
     * @type {FilterOperationTypeEnum}
     * @memberof SearchEngines
     */
    type?: FilterOperationTypeEnum;
}


/**
 * Check if a given object implements the SearchEngines interface.
 */
export function instanceOfSearchEngines(value: object): value is SearchEngines {
    if (!('iterable' in value) || value['iterable'] === undefined) return false;
    return true;
}

export function SearchEnginesFromJSON(json: any): SearchEngines {
    return SearchEnginesFromJSONTyped(json, false);
}

export function SearchEnginesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchEngines {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(SearchEngineFromJSON)),
        'type': FilterOperationTypeEnumFromJSON(json['type']),
    };
}

export function SearchEnginesToJSON(json: any): SearchEngines {
    return SearchEnginesToJSONTyped(json, false);
}

export function SearchEnginesToJSONTyped(value?: SearchEngines | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'iterable': ((value['iterable'] as Array<any>).map(SearchEngineToJSON)),
        'type': FilterOperationTypeEnumToJSON(value['type']),
    };
}

