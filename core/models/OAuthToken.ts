/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * A model representing a returnable response for a OAuthGroup Token
 * @export
 * @interface OAuthToken
 */
export interface OAuthToken {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof OAuthToken
     */
    schema?: EmbeddedModelSchema;
    /**
     * The Access Token
     * @type {string}
     * @memberof OAuthToken
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthToken
     */
    tokenType: OAuthTokenTokenTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof OAuthToken
     */
    expiresIn: number;
    /**
     * 
     * @type {string}
     * @memberof OAuthToken
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthToken
     */
    refreshToken?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthToken
     */
    idToken?: string;
}
/**
 * @export
 */
export const OAuthTokenTokenTypeEnum = {
    Unknown: 'UNKNOWN',
    Bearer: 'Bearer'
} as const;
export type OAuthTokenTokenTypeEnum = typeof OAuthTokenTokenTypeEnum[keyof typeof OAuthTokenTokenTypeEnum];

    export function instanceOfOAuthTokenTokenTypeEnum(value: any): boolean {
        for (const key in OAuthTokenTokenTypeEnum) {
            if (Object.prototype.hasOwnProperty.call(OAuthTokenTokenTypeEnum, key)) {
                if (OAuthTokenTokenTypeEnum[key as keyof typeof OAuthTokenTokenTypeEnum] === value) {
                    return true;
                }
            }
        }
        return false;
    }

    export function OAuthTokenTokenTypeEnumFromJSON(json: any): OAuthTokenTokenTypeEnum {
        return OAuthTokenTokenTypeEnumFromJSONTyped(json, false);
    }

    export function OAuthTokenTokenTypeEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthTokenTokenTypeEnum {
        if (json === null || json === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as OAuthTokenTokenTypeEnum;
        }

        if (instanceOfOAuthTokenTokenTypeEnum(json)) {
            return json as OAuthTokenTokenTypeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as OAuthTokenTokenTypeEnum;
        }
    }

    export function OAuthTokenTokenTypeEnumToJSON(value?: OAuthTokenTokenTypeEnum | null): any {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as OAuthTokenTokenTypeEnum;
        }

        // This must be checked when arguments are passed as 'any'
            if (instanceOfOAuthTokenTokenTypeEnum(value)) {
            return value as OAuthTokenTokenTypeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as OAuthTokenTokenTypeEnum;
        }
    }

    export function OAuthTokenTokenTypeEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): OAuthTokenTokenTypeEnum {
        if (value === null || value === undefined) {
            // Return x-enum-default
            return 'UNKNOWN' as OAuthTokenTokenTypeEnum;
        }
        if (instanceOfOAuthTokenTokenTypeEnum(value)) {
            return value as OAuthTokenTokenTypeEnum;
        }
        else {
            // Return x-enum-default
            return 'UNKNOWN' as OAuthTokenTokenTypeEnum;
        }
    }



/**
 * Check if a given object implements the OAuthToken interface.
 */
export function instanceOfOAuthToken(value: object): value is OAuthToken {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    if (!('expiresIn' in value) || value['expiresIn'] === undefined) return false;
    return true;
}

export function OAuthTokenFromJSON(json: any): OAuthToken {
    return OAuthTokenFromJSONTyped(json, false);
}

export function OAuthTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthToken {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'accessToken': json['access_token'],
        'tokenType': OAuthTokenTokenTypeEnumFromJSON(json['token_type']),
        'expiresIn': json['expires_in'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'refreshToken': json['refresh_token'] == null ? undefined : json['refresh_token'],
        'idToken': json['id_token'] == null ? undefined : json['id_token'],
    };
}

export function OAuthTokenToJSON(json: any): OAuthToken {
    return OAuthTokenToJSONTyped(json, false);
}

export function OAuthTokenToJSONTyped(value?: OAuthToken | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'access_token': value['accessToken'],
        'tokenType': OAuthTokenTokenTypeEnumToJSON(value['token_type']),
        'expires_in': value['expiresIn'],
        'scope': value['scope'],
        'refresh_token': value['refreshToken'],
        'id_token': value['idToken'],
    };
}

