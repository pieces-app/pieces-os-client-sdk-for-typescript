/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QGPTConversation } from './QGPTConversation';
import {
    QGPTConversationFromJSON,
    QGPTConversationFromJSONTyped,
    QGPTConversationToJSON,
    QGPTConversationToJSONTyped,
} from './QGPTConversation';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { QGPTPromptPipeline } from './QGPTPromptPipeline';
import {
    QGPTPromptPipelineFromJSON,
    QGPTPromptPipelineFromJSONTyped,
    QGPTPromptPipelineToJSON,
    QGPTPromptPipelineToJSONTyped,
} from './QGPTPromptPipeline';

/**
 * Query is your followup question.
 * 
 * Conversation is a list of the back and fourth with the qgpt bot.
 * where the first entry in the array was the last message sent.
 * @export
 * @interface QGPTRepromptInput
 */
export interface QGPTRepromptInput {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof QGPTRepromptInput
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof QGPTRepromptInput
     */
    query: string;
    /**
     * 
     * @type {QGPTConversation}
     * @memberof QGPTRepromptInput
     */
    conversation: QGPTConversation;
    /**
     * optional application id
     * @type {string}
     * @memberof QGPTRepromptInput
     */
    application?: string;
    /**
     * optional model id
     * @type {string}
     * @memberof QGPTRepromptInput
     */
    model?: string;
    /**
     * 
     * @type {QGPTPromptPipeline}
     * @memberof QGPTRepromptInput
     */
    pipeline?: QGPTPromptPipeline;
}

/**
 * Check if a given object implements the QGPTRepromptInput interface.
 */
export function instanceOfQGPTRepromptInput(value: object): value is QGPTRepromptInput {
    if (!('query' in value) || value['query'] === undefined) return false;
    if (!('conversation' in value) || value['conversation'] === undefined) return false;
    return true;
}

export function QGPTRepromptInputFromJSON(json: any): QGPTRepromptInput {
    return QGPTRepromptInputFromJSONTyped(json, false);
}

export function QGPTRepromptInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTRepromptInput {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'query': json['query'],
        'conversation': QGPTConversationFromJSON(json['conversation']),
        'application': json['application'] == null ? undefined : json['application'],
        'model': json['model'] == null ? undefined : json['model'],
        'pipeline': json['pipeline'] == null ? undefined : QGPTPromptPipelineFromJSON(json['pipeline']),
    };
}

export function QGPTRepromptInputToJSON(json: any): QGPTRepromptInput {
    return QGPTRepromptInputToJSONTyped(json, false);
}

export function QGPTRepromptInputToJSONTyped(value?: QGPTRepromptInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'query': value['query'],
        'conversation': QGPTConversationToJSON(value['conversation']),
        'application': value['application'],
        'model': value['model'],
        'pipeline': QGPTPromptPipelineToJSON(value['pipeline']),
    };
}

