/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MailgunMetadata } from './MailgunMetadata';
import {
    MailgunMetadataFromJSON,
    MailgunMetadataFromJSONTyped,
    MailgunMetadataToJSON,
    MailgunMetadataToJSONTyped,
} from './MailgunMetadata';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { ExternallySourcedEnum } from './ExternallySourcedEnum';
import {
    ExternallySourcedEnumFromJSON,
    ExternallySourcedEnumFromJSONTyped,
    ExternallySourcedEnumToJSON,
    ExternallySourcedEnumToJSONTyped,
} from './ExternallySourcedEnum';

/**
 * This is all optional properties around the most basic information around a non-pieces user.
 * 
 * A Basic type will NOT have a scope as it is not an actual pieces user.
 * @export
 * @interface PersonBasicType
 */
export interface PersonBasicType {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof PersonBasicType
     */
    schema?: EmbeddedModelSchema;
    /**
     * username or twitter handle...etc
     * @type {string}
     * @memberof PersonBasicType
     */
    username?: string;
    /**
     * This is the name of the basic user.
     * @type {string}
     * @memberof PersonBasicType
     */
    name?: string;
    /**
     * this is a url picture representation of a user.
     * @type {string}
     * @memberof PersonBasicType
     */
    picture?: string;
    /**
     * an email that was extracted.
     * @type {string}
     * @memberof PersonBasicType
     */
    email?: string;
    /**
     * 
     * @type {ExternallySourcedEnum}
     * @memberof PersonBasicType
     */
    sourced?: ExternallySourcedEnum;
    /**
     * This is a specific url that this basic user came from.
     * @type {string}
     * @memberof PersonBasicType
     */
    url?: string;
    /**
     * 
     * @type {MailgunMetadata}
     * @memberof PersonBasicType
     */
    mailgun?: MailgunMetadata;
}



/**
 * Check if a given object implements the PersonBasicType interface.
 */
export function instanceOfPersonBasicType(value: object): value is PersonBasicType {
    return true;
}

export function PersonBasicTypeFromJSON(json: any): PersonBasicType {
    return PersonBasicTypeFromJSONTyped(json, false);
}

export function PersonBasicTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonBasicType {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'username': json['username'] == null ? undefined : json['username'],
        'name': json['name'] == null ? undefined : json['name'],
        'picture': json['picture'] == null ? undefined : json['picture'],
        'email': json['email'] == null ? undefined : json['email'],
        'sourced': json['sourced'] == null ? undefined : ExternallySourcedEnumFromJSON(json['sourced']),
        'url': json['url'] == null ? undefined : json['url'],
        'mailgun': json['mailgun'] == null ? undefined : MailgunMetadataFromJSON(json['mailgun']),
    };
}

export function PersonBasicTypeToJSON(json: any): PersonBasicType {
    return PersonBasicTypeToJSONTyped(json, false);
}

export function PersonBasicTypeToJSONTyped(value?: PersonBasicType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'username': value['username'],
        'name': value['name'],
        'picture': value['picture'],
        'email': value['email'],
        'sourced': ExternallySourcedEnumToJSON(value['sourced']),
        'url': value['url'],
        'mailgun': MailgunMetadataToJSON(value['mailgun']),
    };
}

