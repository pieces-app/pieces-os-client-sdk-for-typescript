/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { OCRAnalysis } from './OCRAnalysis';
import {
    OCRAnalysisFromJSON,
    OCRAnalysisFromJSONTyped,
    OCRAnalysisToJSON,
    OCRAnalysisToJSONTyped,
} from './OCRAnalysis';

/**
 * 
 * @export
 * @interface OCRAnalyses
 */
export interface OCRAnalyses {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof OCRAnalyses
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<OCRAnalysis>}
     * @memberof OCRAnalyses
     */
    iterable: Array<OCRAnalysis>;
}

/**
 * Check if a given object implements the OCRAnalyses interface.
 */
export function instanceOfOCRAnalyses(value: object): value is OCRAnalyses {
    if (!('iterable' in value) || value['iterable'] === undefined) return false;
    return true;
}

export function OCRAnalysesFromJSON(json: any): OCRAnalyses {
    return OCRAnalysesFromJSONTyped(json, false);
}

export function OCRAnalysesFromJSONTyped(json: any, ignoreDiscriminator: boolean): OCRAnalyses {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(OCRAnalysisFromJSON)),
    };
}

export function OCRAnalysesToJSON(json: any): OCRAnalyses {
    return OCRAnalysesToJSONTyped(json, false);
}

export function OCRAnalysesToJSONTyped(value?: OCRAnalyses | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'iterable': ((value['iterable'] as Array<any>).map(OCRAnalysisToJSON)),
    };
}

