/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * These are the references of the formats **Only UUIDS**
 * @export
 * @interface FlattenedPreview
 */
export interface FlattenedPreview {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedPreview
     */
    schema?: EmbeddedModelSchema;
    /**
     * this is a reference(uuid) to the base format
     * @type {string}
     * @memberof FlattenedPreview
     */
    base: string;
    /**
     * this is a reference(uuid) to the overlay format
     * @type {string}
     * @memberof FlattenedPreview
     */
    overlay?: string;
}


/**
 * Check if a given object implements the FlattenedPreview interface.
 */
export function instanceOfFlattenedPreview(value: object): value is FlattenedPreview {
    if (!('base' in value) || value['base'] === undefined) return false;
    return true;
}

export function FlattenedPreviewFromJSON(json: any): FlattenedPreview {
    return FlattenedPreviewFromJSONTyped(json, false);
}

export function FlattenedPreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedPreview {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'base': json['base'],
        'overlay': json['overlay'] == null ? undefined : json['overlay'],
    };
}

export function FlattenedPreviewToJSON(json: any): FlattenedPreview {
    return FlattenedPreviewToJSONTyped(json, false);
}

export function FlattenedPreviewToJSONTyped(value?: FlattenedPreview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'base': value['base'],
        'overlay': value['overlay'],
    };
}

