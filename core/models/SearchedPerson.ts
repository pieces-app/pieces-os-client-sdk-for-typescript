/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Person } from './Person';
import {
    PersonFromJSON,
    PersonFromJSONTyped,
    PersonToJSON,
    PersonToJSONTyped,
} from './Person';

/**
 * This is used for the Persons searching endpoint.
 * 
 * person here is only provided if transferables are set to true.
 * 
 * temporal: if this is provided this means that their material matched the input via a timestamp.
 * 
 * TODO will want to consider returning related materials to this material potentially both associated/ and not associated materials
 * ie suggestion: WorkstreamSuggestions
 * @export
 * @interface SearchedPerson
 */
export interface SearchedPerson {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SearchedPerson
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Person}
     * @memberof SearchedPerson
     */
    person?: Person;
    /**
     * 
     * @type {boolean}
     * @memberof SearchedPerson
     */
    exact: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchedPerson
     */
    similarity: number;
    /**
     * 
     * @type {boolean}
     * @memberof SearchedPerson
     */
    temporal?: boolean;
    /**
     * This is the uuid of the person.
     * @type {string}
     * @memberof SearchedPerson
     */
    identifier: string;
}


/**
 * Check if a given object implements the SearchedPerson interface.
 */
export function instanceOfSearchedPerson(value: object): value is SearchedPerson {
    if (!('exact' in value) || value['exact'] === undefined) return false;
    if (!('similarity' in value) || value['similarity'] === undefined) return false;
    if (!('identifier' in value) || value['identifier'] === undefined) return false;
    return true;
}

export function SearchedPersonFromJSON(json: any): SearchedPerson {
    return SearchedPersonFromJSONTyped(json, false);
}

export function SearchedPersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchedPerson {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'person': json['person'] == null ? undefined : PersonFromJSON(json['person']),
        'exact': json['exact'],
        'similarity': json['similarity'],
        'temporal': json['temporal'] == null ? undefined : json['temporal'],
        'identifier': json['identifier'],
    };
}

export function SearchedPersonToJSON(json: any): SearchedPerson {
    return SearchedPersonToJSONTyped(json, false);
}

export function SearchedPersonToJSONTyped(value?: SearchedPerson | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'person': PersonToJSON(value['person']),
        'exact': value['exact'],
        'similarity': value['similarity'],
        'temporal': value['temporal'],
        'identifier': value['identifier'],
    };
}

