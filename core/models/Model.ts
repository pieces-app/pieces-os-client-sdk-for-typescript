/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { ModelTypeEnum } from './ModelTypeEnum';
import {
    ModelTypeEnumFromJSON,
    ModelTypeEnumFromJSONTyped,
    ModelTypeEnumToJSON,
    ModelTypeEnumToJSONTyped,
} from './ModelTypeEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { ExternalMLProviderEnum } from './ExternalMLProviderEnum';
import {
    ExternalMLProviderEnumFromJSON,
    ExternalMLProviderEnumFromJSONTyped,
    ExternalMLProviderEnumToJSON,
    ExternalMLProviderEnumToJSONTyped,
} from './ExternalMLProviderEnum';
import type { ModelUsageEnum } from './ModelUsageEnum';
import {
    ModelUsageEnumFromJSON,
    ModelUsageEnumFromJSONTyped,
    ModelUsageEnumToJSON,
    ModelUsageEnumToJSONTyped,
} from './ModelUsageEnum';
import type { ByteDescriptor } from './ByteDescriptor';
import {
    ByteDescriptorFromJSON,
    ByteDescriptorFromJSONTyped,
    ByteDescriptorToJSON,
    ByteDescriptorToJSONTyped,
} from './ByteDescriptor';
import type { ModelCapabilities } from './ModelCapabilities';
import {
    ModelCapabilitiesFromJSON,
    ModelCapabilitiesFromJSONTyped,
    ModelCapabilitiesToJSON,
    ModelCapabilitiesToJSONTyped,
} from './ModelCapabilities';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { ModelFoundationEnum } from './ModelFoundationEnum';
import {
    ModelFoundationEnumFromJSON,
    ModelFoundationEnumFromJSONTyped,
    ModelFoundationEnumToJSON,
    ModelFoundationEnumToJSONTyped,
} from './ModelFoundationEnum';
import type { ModelMaxTokens } from './ModelMaxTokens';
import {
    ModelMaxTokensFromJSON,
    ModelMaxTokensFromJSONTyped,
    ModelMaxTokensToJSON,
    ModelMaxTokensToJSONTyped,
} from './ModelMaxTokens';

/**
 * This is a Machine Learning Model, that will give readable information about the Machine Learning Model Used.
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Model
     */
    schema?: EmbeddedModelSchema;
    /**
     * uuid
     * 
     * @type {string}
     * @memberof Model
     */
    id: string;
    /**
     * this is a version of the model.
     * @type {string}
     * @memberof Model
     */
    version: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Model
     */
    created: GroupedTimestamp;
    /**
     * This is an Optional Name of the Model.
     * @type {string}
     * @memberof Model
     */
    name: string;
    /**
     * An Optional Description of the model itself.
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * This will inform the user if this was a model that is hosted in the cloud
     * @type {boolean}
     * @memberof Model
     */
    cloud: boolean;
    /**
     * 
     * @type {ModelTypeEnum}
     * @memberof Model
     */
    type: ModelTypeEnum;
    /**
     * 
     * @type {ModelUsageEnum}
     * @memberof Model
     */
    usage: ModelUsageEnum;
    /**
     * 
     * @type {ByteDescriptor}
     * @memberof Model
     */
    bytes?: ByteDescriptor;
    /**
     * 
     * @type {ByteDescriptor}
     * @memberof Model
     */
    ram?: ByteDescriptor;
    /**
     * quantization is a string like: q8f16_0,  q4f16_1, etc...
     * @type {string}
     * @memberof Model
     */
    quantization?: string;
    /**
     * 
     * @type {ModelFoundationEnum}
     * @memberof Model
     */
    foundation?: ModelFoundationEnum;
    /**
     * This is an optional bool to let us know if this model has been downloaded locally.
     * @type {boolean}
     * @memberof Model
     */
    downloaded?: boolean;
    /**
     * This is a boolean that represents if the model is loaded into memory.(this is not persisted, and is calculated on the fly.)
     * @type {boolean}
     * @memberof Model
     */
    loaded?: boolean;
    /**
     * This is the unique model name used to load the model.
     * @type {string}
     * @memberof Model
     */
    unique?: string;
    /**
     * This is the number of parameters in terms of billions.
     * @type {number}
     * @memberof Model
     */
    parameters?: number;
    /**
     * 
     * @type {ExternalMLProviderEnum}
     * @memberof Model
     */
    provider?: ExternalMLProviderEnum;
    /**
     * This is an optional bool that is optimized for CPU usage.
     * @type {boolean}
     * @memberof Model
     */
    cpu?: boolean;
    /**
     * This is a calculated property, that will say if this is currently downloading.
     * @type {boolean}
     * @memberof Model
     */
    downloading?: boolean;
    /**
     * 
     * @type {ModelMaxTokens}
     * @memberof Model
     */
    maxTokens?: ModelMaxTokens;
    /**
     * This will let us know if this is a custom, or fine tuned model imported by the user.
     * @type {boolean}
     * @memberof Model
     */
    custom?: boolean;
    /**
     * 
     * @type {ModelCapabilities}
     * @memberof Model
     */
    capabilities?: ModelCapabilities;
    /**
     * 
     * @type {Score}
     * @memberof Model
     */
    score?: Score;
}


/**
 * Check if a given object implements the Model interface.
 */
export function instanceOfModel(value: object): value is Model {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('cloud' in value) || value['cloud'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('usage' in value) || value['usage'] === undefined) return false;
    return true;
}

export function ModelFromJSON(json: any): Model {
    return ModelFromJSONTyped(json, false);
}

export function ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'version': json['version'],
        'created': GroupedTimestampFromJSON(json['created']),
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'cloud': json['cloud'],
        'type': ModelTypeEnumFromJSON(json['type']),
        'usage': ModelUsageEnumFromJSON(json['usage']),
        'bytes': json['bytes'] == null ? undefined : ByteDescriptorFromJSON(json['bytes']),
        'ram': json['ram'] == null ? undefined : ByteDescriptorFromJSON(json['ram']),
        'quantization': json['quantization'] == null ? undefined : json['quantization'],
        'foundation': ModelFoundationEnumFromJSON(json['foundation']),
        'downloaded': json['downloaded'] == null ? undefined : json['downloaded'],
        'loaded': json['loaded'] == null ? undefined : json['loaded'],
        'unique': json['unique'] == null ? undefined : json['unique'],
        'parameters': json['parameters'] == null ? undefined : json['parameters'],
        'provider': ExternalMLProviderEnumFromJSON(json['provider']),
        'cpu': json['cpu'] == null ? undefined : json['cpu'],
        'downloading': json['downloading'] == null ? undefined : json['downloading'],
        'maxTokens': json['maxTokens'] == null ? undefined : ModelMaxTokensFromJSON(json['maxTokens']),
        'custom': json['custom'] == null ? undefined : json['custom'],
        'capabilities': json['capabilities'] == null ? undefined : ModelCapabilitiesFromJSON(json['capabilities']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
    };
}

export function ModelToJSON(json: any): Model {
    return ModelToJSONTyped(json, false);
}

export function ModelToJSONTyped(value?: Model | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'version': value['version'],
        'created': GroupedTimestampToJSON(value['created']),
        'name': value['name'],
        'description': value['description'],
        'cloud': value['cloud'],
        'type': ModelTypeEnumToJSON(value['type']),
        'usage': ModelUsageEnumToJSON(value['usage']),
        'bytes': ByteDescriptorToJSON(value['bytes']),
        'ram': ByteDescriptorToJSON(value['ram']),
        'quantization': value['quantization'],
        'foundation': ModelFoundationEnumToJSON(value['foundation']),
        'downloaded': value['downloaded'],
        'loaded': value['loaded'],
        'unique': value['unique'],
        'parameters': value['parameters'],
        'provider': ExternalMLProviderEnumToJSON(value['provider']),
        'cpu': value['cpu'],
        'downloading': value['downloading'],
        'maxTokens': ModelMaxTokensToJSON(value['maxTokens']),
        'custom': value['custom'],
        'capabilities': ModelCapabilitiesToJSON(value['capabilities']),
        'score': ScoreToJSON(value['score']),
    };
}

