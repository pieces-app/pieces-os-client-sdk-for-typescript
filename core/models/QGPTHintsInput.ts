/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelevantQGPTSeeds } from './RelevantQGPTSeeds';
import {
    RelevantQGPTSeedsFromJSON,
    RelevantQGPTSeedsFromJSONTyped,
    RelevantQGPTSeedsToJSON,
    RelevantQGPTSeedsToJSONTyped,
} from './RelevantQGPTSeeds';
import type { QGPTQuestionAnswer } from './QGPTQuestionAnswer';
import {
    QGPTQuestionAnswerFromJSON,
    QGPTQuestionAnswerFromJSONTyped,
    QGPTQuestionAnswerToJSON,
    QGPTQuestionAnswerToJSONTyped,
} from './QGPTQuestionAnswer';

/**
 * Query is your hints question.
 * Relevant is the relevant snippets.
 * Answer is the previous answer.(that we are asking a hint up for.)
 * 
 * Query and Answer are both optional here because, you may pass over relevant snippets over ahead of hand if you already have them to answer your questions.
 * @export
 * @interface QGPTHintsInput
 */
export interface QGPTHintsInput {
    /**
     * 
     * @type {string}
     * @memberof QGPTHintsInput
     */
    query?: string;
    /**
     * 
     * @type {QGPTQuestionAnswer}
     * @memberof QGPTHintsInput
     */
    answer?: QGPTQuestionAnswer;
    /**
     * 
     * @type {RelevantQGPTSeeds}
     * @memberof QGPTHintsInput
     */
    relevant: RelevantQGPTSeeds;
    /**
     * optional application id
     * @type {string}
     * @memberof QGPTHintsInput
     */
    application?: string;
    /**
     * optional model id
     * @type {string}
     * @memberof QGPTHintsInput
     */
    model?: string;
}

/**
 * Check if a given object implements the QGPTHintsInput interface.
 */
export function instanceOfQGPTHintsInput(value: object): value is QGPTHintsInput {
    if (!('relevant' in value) || value['relevant'] === undefined) return false;
    return true;
}

export function QGPTHintsInputFromJSON(json: any): QGPTHintsInput {
    return QGPTHintsInputFromJSONTyped(json, false);
}

export function QGPTHintsInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTHintsInput {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'] == null ? undefined : json['query'],
        'answer': json['answer'] == null ? undefined : QGPTQuestionAnswerFromJSON(json['answer']),
        'relevant': RelevantQGPTSeedsFromJSON(json['relevant']),
        'application': json['application'] == null ? undefined : json['application'],
        'model': json['model'] == null ? undefined : json['model'],
    };
}

export function QGPTHintsInputToJSON(json: any): QGPTHintsInput {
    return QGPTHintsInputToJSONTyped(json, false);
}

export function QGPTHintsInputToJSONTyped(value?: QGPTHintsInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'],
        'answer': QGPTQuestionAnswerToJSON(value['answer']),
        'relevant': RelevantQGPTSeedsToJSON(value['relevant']),
        'application': value['application'],
        'model': value['model'],
    };
}

