/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TLPCodeFragmentClassificationMetadata } from './TLPCodeFragmentClassificationMetadata';
import {
    TLPCodeFragmentClassificationMetadataFromJSON,
    TLPCodeFragmentClassificationMetadataFromJSONTyped,
    TLPCodeFragmentClassificationMetadataToJSON,
    TLPCodeFragmentClassificationMetadataToJSONTyped,
} from './TLPCodeFragmentClassificationMetadata';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { SystemExecutionInformation } from './SystemExecutionInformation';
import {
    SystemExecutionInformationFromJSON,
    SystemExecutionInformationFromJSONTyped,
    SystemExecutionInformationToJSON,
    SystemExecutionInformationToJSONTyped,
} from './SystemExecutionInformation';

/**
 * Model for ML big query classification.
 * @export
 * @interface TLPCodeFragmentClassification
 */
export interface TLPCodeFragmentClassification {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TLPCodeFragmentClassification
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    asset: string;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    classification: string;
    /**
     * 
     * @type {number}
     * @memberof TLPCodeFragmentClassification
     */
    probability: number;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    context: string;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    distribution?: string;
    /**
     * 
     * @type {TLPCodeFragmentClassificationMetadata}
     * @memberof TLPCodeFragmentClassification
     */
    metadata?: TLPCodeFragmentClassificationMetadata;
    /**
     * identifier for the user
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    user: string;
    /**
     * this is the time it takes to run this model.
     * @type {number}
     * @memberof TLPCodeFragmentClassification
     */
    latency?: number;
    /**
     * 
     * @type {SystemExecutionInformation}
     * @memberof TLPCodeFragmentClassification
     */
    system?: SystemExecutionInformation;
    /**
     * 
     * @type {string}
     * @memberof TLPCodeFragmentClassification
     */
    os: string;
}

/**
 * Check if a given object implements the TLPCodeFragmentClassification interface.
 */
export function instanceOfTLPCodeFragmentClassification(value: object): value is TLPCodeFragmentClassification {
    if (!('asset' in value) || value['asset'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('classification' in value) || value['classification'] === undefined) return false;
    if (!('probability' in value) || value['probability'] === undefined) return false;
    if (!('context' in value) || value['context'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('os' in value) || value['os'] === undefined) return false;
    return true;
}

export function TLPCodeFragmentClassificationFromJSON(json: any): TLPCodeFragmentClassification {
    return TLPCodeFragmentClassificationFromJSONTyped(json, false);
}

export function TLPCodeFragmentClassificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPCodeFragmentClassification {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'asset': json['asset'],
        'model': json['model'],
        'created': json['created'],
        'classification': json['classification'],
        'probability': json['probability'],
        'context': json['context'],
        'distribution': json['distribution'] == null ? undefined : json['distribution'],
        'metadata': json['metadata'] == null ? undefined : TLPCodeFragmentClassificationMetadataFromJSON(json['metadata']),
        'user': json['user'],
        'latency': json['latency'] == null ? undefined : json['latency'],
        'system': json['system'] == null ? undefined : SystemExecutionInformationFromJSON(json['system']),
        'os': json['os'],
    };
}

export function TLPCodeFragmentClassificationToJSON(json: any): TLPCodeFragmentClassification {
    return TLPCodeFragmentClassificationToJSONTyped(json, false);
}

export function TLPCodeFragmentClassificationToJSONTyped(value?: TLPCodeFragmentClassification | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'asset': value['asset'],
        'model': value['model'],
        'created': value['created'],
        'classification': value['classification'],
        'probability': value['probability'],
        'context': value['context'],
        'distribution': value['distribution'],
        'metadata': TLPCodeFragmentClassificationMetadataToJSON(value['metadata']),
        'user': value['user'],
        'latency': value['latency'],
        'system': SystemExecutionInformationToJSON(value['system']),
        'os': value['os'],
    };
}

