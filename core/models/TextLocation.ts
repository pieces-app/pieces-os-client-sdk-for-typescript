/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a generic model that is used for text location.
 * @export
 * @interface TextLocation
 */
export interface TextLocation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TextLocation
     */
    schema?: EmbeddedModelSchema;
    /**
     * this is the value that was found.
     * @type {string}
     * @memberof TextLocation
     */
    text: string;
    /**
     * this is the start index within the original string.
     * @type {number}
     * @memberof TextLocation
     */
    start: number;
    /**
     * this is the end index within the original string.
     * @type {number}
     * @memberof TextLocation
     */
    end: number;
}

/**
 * Check if a given object implements the TextLocation interface.
 */
export function instanceOfTextLocation(value: object): value is TextLocation {
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    return true;
}

export function TextLocationFromJSON(json: any): TextLocation {
    return TextLocationFromJSONTyped(json, false);
}

export function TextLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'text': json['text'],
        'start': json['start'],
        'end': json['end'],
    };
}

export function TextLocationToJSON(json: any): TextLocation {
    return TextLocationToJSONTyped(json, false);
}

export function TextLocationToJSONTyped(value?: TextLocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'text': value['text'],
        'start': value['start'],
        'end': value['end'],
    };
}

