/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeededUser } from './SeededUser';
import {
    SeededUserFromJSON,
    SeededUserFromJSONTyped,
    SeededUserToJSON,
    SeededUserToJSONTyped,
} from './SeededUser';
import type { Assets } from './Assets';
import {
    AssetsFromJSON,
    AssetsFromJSONTyped,
    AssetsToJSON,
    AssetsToJSONTyped,
} from './Assets';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
    AssetToJSONTyped,
} from './Asset';
import type { AccessEnum } from './AccessEnum';
import {
    AccessEnumFromJSON,
    AccessEnumFromJSONTyped,
    AccessEnumToJSON,
    AccessEnumToJSONTyped,
} from './AccessEnum';

/**
 *  required to pass in an asset or assets.
 * @export
 * @interface SeededShare
 */
export interface SeededShare {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededShare
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Asset}
     * @memberof SeededShare
     */
    asset?: Asset;
    /**
     * if private please specificy some users you want to share this with.
     * @type {Array<SeededUser>}
     * @memberof SeededShare
     */
    users?: Array<SeededUser>;
    /**
     * 
     * @type {AccessEnum}
     * @memberof SeededShare
     */
    access: AccessEnum;
    /**
     * 
     * @type {Assets}
     * @memberof SeededShare
     */
    assets?: Assets;
    /**
     * optional name, if it is available. and must be unique.
     * @type {string}
     * @memberof SeededShare
     */
    name?: string;
}



/**
 * Check if a given object implements the SeededShare interface.
 */
export function instanceOfSeededShare(value: object): value is SeededShare {
    if (!('access' in value) || value['access'] === undefined) return false;
    return true;
}

export function SeededShareFromJSON(json: any): SeededShare {
    return SeededShareFromJSONTyped(json, false);
}

export function SeededShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededShare {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'asset': json['asset'] == null ? undefined : AssetFromJSON(json['asset']),
        'users': json['users'] == null ? undefined : ((json['users'] as Array<any>).map(SeededUserFromJSON)),
        'access': AccessEnumFromJSON(json['access']),
        'assets': json['assets'] == null ? undefined : AssetsFromJSON(json['assets']),
        'name': json['name'] == null ? undefined : json['name'],
    };
}

export function SeededShareToJSON(json: any): SeededShare {
    return SeededShareToJSONTyped(json, false);
}

export function SeededShareToJSONTyped(value?: SeededShare | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'asset': AssetToJSON(value['asset']),
        'users': value['users'] == null ? undefined : ((value['users'] as Array<any>).map(SeededUserToJSON)),
        'access': AccessEnumToJSON(value['access']),
        'assets': AssetsToJSON(value['assets']),
        'name': value['name'],
    };
}

