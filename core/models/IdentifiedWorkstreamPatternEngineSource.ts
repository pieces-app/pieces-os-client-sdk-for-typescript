/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
    FlattenedConversationsToJSONTyped,
} from './FlattenedConversations';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
    FlattenedWebsitesToJSONTyped,
} from './FlattenedWebsites';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
    FlattenedWorkstreamSummariesToJSONTyped,
} from './FlattenedWorkstreamSummaries';
import type { WorkstreamPatternEngineSource } from './WorkstreamPatternEngineSource';
import {
    WorkstreamPatternEngineSourceFromJSON,
    WorkstreamPatternEngineSourceFromJSONTyped,
    WorkstreamPatternEngineSourceToJSON,
    WorkstreamPatternEngineSourceToJSONTyped,
} from './WorkstreamPatternEngineSource';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { FlattenedWorkstreamEvents } from './FlattenedWorkstreamEvents';
import {
    FlattenedWorkstreamEventsFromJSON,
    FlattenedWorkstreamEventsFromJSONTyped,
    FlattenedWorkstreamEventsToJSON,
    FlattenedWorkstreamEventsToJSONTyped,
} from './FlattenedWorkstreamEvents';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
    FlattenedConversationMessagesToJSONTyped,
} from './FlattenedConversationMessages';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
    FlattenedPersonsToJSONTyped,
} from './FlattenedPersons';
import type { FlattenedAnchors } from './FlattenedAnchors';
import {
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
    FlattenedAnchorsToJSONTyped,
} from './FlattenedAnchors';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { WorkstreamPatternEngineSourceSupportedAccessibility } from './WorkstreamPatternEngineSourceSupportedAccessibility';
import {
    WorkstreamPatternEngineSourceSupportedAccessibilityFromJSON,
    WorkstreamPatternEngineSourceSupportedAccessibilityFromJSONTyped,
    WorkstreamPatternEngineSourceSupportedAccessibilityToJSON,
    WorkstreamPatternEngineSourceSupportedAccessibilityToJSONTyped,
} from './WorkstreamPatternEngineSourceSupportedAccessibility';

/**
 * This is a specific persisted model for WorkstreamPatternEngineSources that are persisted in the database(not just on the WPE event)
 * 
 * note: there is a "WorkstreamPatternEngineSource" model however we will NOT be modify this because it is linked to a different model that would require additional code to properly associate/disassociate.
 * 
 * note: we get 3 raw events from the WPE data so far:(encapsulated in the "WorkstreamPatternEngineSource") event
 * 1. (deprecated) browserUrl - defaults to null
 * 2. appTitle - ** not sure on default here ** (this is because this is always present on all WPE events.)
 * 3. (deprecated) windowTitle - defaults to "Window Title Not Found"
 * 
 * NOTE we will no longer support adding window title and browser url on the source it will be generic(we will next update this to include these associations)
 * 
 * note: raw is the raw value from the WPE(expect I will replace the defaults w/ nullish values)
 * @export
 * @interface IdentifiedWorkstreamPatternEngineSource
 */
export interface IdentifiedWorkstreamPatternEngineSource {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    id: string;
    /**
     * 
     * @type {WorkstreamPatternEngineSource}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    raw: WorkstreamPatternEngineSource;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    updated: GroupedTimestamp;
    /**
     * This will determine if we want to filter this specific source
     * @type {boolean}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    filter?: boolean;
    /**
     * 
     * @type {Score}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    score?: Score;
    /**
     * This is the name of the source(defualt original data) this is NOT used for matching just for readability
     * @type {string}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    readable: string;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedWorkstreamEvents}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    workstreamEvents?: FlattenedWorkstreamEvents;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    conversations?: FlattenedConversations;
    /**
     * 
     * @type {WorkstreamPatternEngineSourceSupportedAccessibility}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    accessibility?: WorkstreamPatternEngineSourceSupportedAccessibility;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    messages?: FlattenedConversationMessages;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    anchors?: FlattenedAnchors;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    persons?: FlattenedPersons;
    /**
     * This is the embedding for the wpeSource.(NEEDs to collectionection.vector) and specific here because we can only index on a single name
     * NOTE: this the the vector index that corresponds the the couchbase lite index.
     * @type {Array<number>}
     * @memberof IdentifiedWorkstreamPatternEngineSource
     */
    workstreamPatternEngineSourcesVector?: Array<number>;
}

/**
 * Check if a given object implements the IdentifiedWorkstreamPatternEngineSource interface.
 */
export function instanceOfIdentifiedWorkstreamPatternEngineSource(value: object): value is IdentifiedWorkstreamPatternEngineSource {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('raw' in value) || value['raw'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('readable' in value) || value['readable'] === undefined) return false;
    return true;
}

export function IdentifiedWorkstreamPatternEngineSourceFromJSON(json: any): IdentifiedWorkstreamPatternEngineSource {
    return IdentifiedWorkstreamPatternEngineSourceFromJSONTyped(json, false);
}

export function IdentifiedWorkstreamPatternEngineSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentifiedWorkstreamPatternEngineSource {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'raw': WorkstreamPatternEngineSourceFromJSON(json['raw']),
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'filter': json['filter'] == null ? undefined : json['filter'],
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'readable': json['readable'],
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'workstreamEvents': json['workstream_events'] == null ? undefined : FlattenedWorkstreamEventsFromJSON(json['workstream_events']),
        'conversations': json['conversations'] == null ? undefined : FlattenedConversationsFromJSON(json['conversations']),
        'accessibility': json['accessibility'] == null ? undefined : WorkstreamPatternEngineSourceSupportedAccessibilityFromJSON(json['accessibility']),
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
        'websites': json['websites'] == null ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'anchors': json['anchors'] == null ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
        'persons': json['persons'] == null ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'workstreamPatternEngineSourcesVector': json['workstreamPatternEngineSourcesVector'] == null ? undefined : json['workstreamPatternEngineSourcesVector'],
    };
}

export function IdentifiedWorkstreamPatternEngineSourceToJSON(json: any): IdentifiedWorkstreamPatternEngineSource {
    return IdentifiedWorkstreamPatternEngineSourceToJSONTyped(json, false);
}

export function IdentifiedWorkstreamPatternEngineSourceToJSONTyped(value?: IdentifiedWorkstreamPatternEngineSource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'raw': WorkstreamPatternEngineSourceToJSON(value['raw']),
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'filter': value['filter'],
        'score': ScoreToJSON(value['score']),
        'readable': value['readable'],
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'workstream_events': FlattenedWorkstreamEventsToJSON(value['workstreamEvents']),
        'conversations': FlattenedConversationsToJSON(value['conversations']),
        'accessibility': WorkstreamPatternEngineSourceSupportedAccessibilityToJSON(value['accessibility']),
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
        'websites': FlattenedWebsitesToJSON(value['websites']),
        'anchors': FlattenedAnchorsToJSON(value['anchors']),
        'persons': FlattenedPersonsToJSON(value['persons']),
        'workstreamPatternEngineSourcesVector': value['workstreamPatternEngineSourcesVector'],
    };
}

