/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Activities } from './Activities';
import {
    ActivitiesFromJSON,
    ActivitiesFromJSONTyped,
    ActivitiesToJSON,
    ActivitiesToJSONTyped,
} from './Activities';
import type { Sensitives } from './Sensitives';
import {
    SensitivesFromJSON,
    SensitivesFromJSONTyped,
    SensitivesToJSON,
    SensitivesToJSONTyped,
} from './Sensitives';
import type { Hints } from './Hints';
import {
    HintsFromJSON,
    HintsFromJSONTyped,
    HintsToJSON,
    HintsToJSONTyped,
} from './Hints';
import type { Websites } from './Websites';
import {
    WebsitesFromJSON,
    WebsitesFromJSONTyped,
    WebsitesToJSON,
    WebsitesToJSONTyped,
} from './Websites';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Preview } from './Preview';
import {
    PreviewFromJSON,
    PreviewFromJSONTyped,
    PreviewToJSON,
    PreviewToJSONTyped,
} from './Preview';
import type { Formats } from './Formats';
import {
    FormatsFromJSON,
    FormatsFromJSONTyped,
    FormatsToJSON,
    FormatsToJSONTyped,
} from './Formats';
import type { Conversations } from './Conversations';
import {
    ConversationsFromJSON,
    ConversationsFromJSONTyped,
    ConversationsToJSON,
    ConversationsToJSONTyped,
} from './Conversations';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { WorkstreamSummaries } from './WorkstreamSummaries';
import {
    WorkstreamSummariesFromJSON,
    WorkstreamSummariesFromJSONTyped,
    WorkstreamSummariesToJSON,
    WorkstreamSummariesToJSONTyped,
} from './WorkstreamSummaries';
import type { Anchors } from './Anchors';
import {
    AnchorsFromJSON,
    AnchorsFromJSONTyped,
    AnchorsToJSON,
    AnchorsToJSONTyped,
} from './Anchors';
import type { ReferencedFormat } from './ReferencedFormat';
import {
    ReferencedFormatFromJSON,
    ReferencedFormatFromJSONTyped,
    ReferencedFormatToJSON,
    ReferencedFormatToJSONTyped,
} from './ReferencedFormat';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { Annotations } from './Annotations';
import {
    AnnotationsFromJSON,
    AnnotationsFromJSONTyped,
    AnnotationsToJSON,
    AnnotationsToJSONTyped,
} from './Annotations';
import type { ConversationMessages } from './ConversationMessages';
import {
    ConversationMessagesFromJSON,
    ConversationMessagesFromJSONTyped,
    ConversationMessagesToJSON,
    ConversationMessagesToJSONTyped,
} from './ConversationMessages';
import type { Persons } from './Persons';
import {
    PersonsFromJSON,
    PersonsFromJSONTyped,
    PersonsToJSON,
    PersonsToJSONTyped,
} from './Persons';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    MechanismEnumToJSONTyped,
} from './MechanismEnum';
import type { Shares } from './Shares';
import {
    SharesFromJSON,
    SharesFromJSONTyped,
    SharesToJSON,
    SharesToJSONTyped,
} from './Shares';
import type { Tags } from './Tags';
import {
    TagsFromJSON,
    TagsFromJSONTyped,
    TagsToJSON,
    TagsToJSONTyped,
} from './Tags';

/**
 * An Asset Model representing data extracted from an Application connecting a group of data containing one or more Formats.
 * 
 * Below formats, preview, and original CAN to be pollinated (DAG Unsafe) because it is a root node and it's child leaf nodes will prevent cycles agressively.
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Asset
     */
    schema?: EmbeddedModelSchema;
    /**
     * The globally available UID representing the asset in the Database, both locally and in the cloud.
     * @type {string}
     * @memberof Asset
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    creator: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    synced?: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {Formats}
     * @memberof Asset
     */
    formats: Formats;
    /**
     * 
     * @type {Preview}
     * @memberof Asset
     */
    preview: Preview;
    /**
     * 
     * @type {ReferencedFormat}
     * @memberof Asset
     */
    original: ReferencedFormat;
    /**
     * 
     * @type {Shares}
     * @memberof Asset
     */
    shares?: Shares;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof Asset
     */
    mechanism: MechanismEnum;
    /**
     * 
     * @type {Websites}
     * @memberof Asset
     */
    websites?: Websites;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    interacted?: GroupedTimestamp;
    /**
     * 
     * @type {Tags}
     * @memberof Asset
     */
    tags?: Tags;
    /**
     * 
     * @type {Sensitives}
     * @memberof Asset
     */
    sensitives?: Sensitives;
    /**
     * 
     * @type {Persons}
     * @memberof Asset
     */
    persons?: Persons;
    /**
     * This is an optional boolean that will flag that this asset came from a currated collection.
     * @type {boolean}
     * @memberof Asset
     */
    curated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Asset
     */
    discovered?: boolean;
    /**
     * 
     * @type {Activities}
     * @memberof Asset
     */
    activities?: Activities;
    /**
     * 
     * @type {Score}
     * @memberof Asset
     */
    score?: Score;
    /**
     * 
     * @type {boolean}
     * @memberof Asset
     */
    favorited?: boolean;
    /**
     * This will determine if this is a asset that the user did not explicitly save.
     * @type {boolean}
     * @memberof Asset
     */
    pseudo?: boolean;
    /**
     * 
     * @type {Annotations}
     * @memberof Asset
     */
    annotations?: Annotations;
    /**
     * 
     * @type {Hints}
     * @memberof Asset
     */
    hints?: Hints;
    /**
     * 
     * @type {Anchors}
     * @memberof Asset
     */
    anchors?: Anchors;
    /**
     * 
     * @type {Conversations}
     * @memberof Asset
     */
    conversations?: Conversations;
    /**
     * 
     * @type {WorkstreamSummaries}
     * @memberof Asset
     */
    summaries?: WorkstreamSummaries;
    /**
     * 
     * @type {ConversationMessages}
     * @memberof Asset
     */
    messages?: ConversationMessages;
    /**
     * This will let us know if this asset was generated as a 'demo' snippet
     * @type {boolean}
     * @memberof Asset
     */
    demo?: boolean;
}


/**
 * Check if a given object implements the Asset interface.
 */
export function instanceOfAsset(value: object): value is Asset {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creator' in value) || value['creator'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('formats' in value) || value['formats'] === undefined) return false;
    if (!('preview' in value) || value['preview'] === undefined) return false;
    if (!('original' in value) || value['original'] === undefined) return false;
    if (!('mechanism' in value) || value['mechanism'] === undefined) return false;
    return true;
}

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'creator': json['creator'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'synced': json['synced'] == null ? undefined : GroupedTimestampFromJSON(json['synced']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'formats': FormatsFromJSON(json['formats']),
        'preview': PreviewFromJSON(json['preview']),
        'original': ReferencedFormatFromJSON(json['original']),
        'shares': json['shares'] == null ? undefined : SharesFromJSON(json['shares']),
        'mechanism': MechanismEnumFromJSON(json['mechanism']),
        'websites': json['websites'] == null ? undefined : WebsitesFromJSON(json['websites']),
        'interacted': json['interacted'] == null ? undefined : GroupedTimestampFromJSON(json['interacted']),
        'tags': json['tags'] == null ? undefined : TagsFromJSON(json['tags']),
        'sensitives': json['sensitives'] == null ? undefined : SensitivesFromJSON(json['sensitives']),
        'persons': json['persons'] == null ? undefined : PersonsFromJSON(json['persons']),
        'curated': json['curated'] == null ? undefined : json['curated'],
        'discovered': json['discovered'] == null ? undefined : json['discovered'],
        'activities': json['activities'] == null ? undefined : ActivitiesFromJSON(json['activities']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'favorited': json['favorited'] == null ? undefined : json['favorited'],
        'pseudo': json['pseudo'] == null ? undefined : json['pseudo'],
        'annotations': json['annotations'] == null ? undefined : AnnotationsFromJSON(json['annotations']),
        'hints': json['hints'] == null ? undefined : HintsFromJSON(json['hints']),
        'anchors': json['anchors'] == null ? undefined : AnchorsFromJSON(json['anchors']),
        'conversations': json['conversations'] == null ? undefined : ConversationsFromJSON(json['conversations']),
        'summaries': json['summaries'] == null ? undefined : WorkstreamSummariesFromJSON(json['summaries']),
        'messages': json['messages'] == null ? undefined : ConversationMessagesFromJSON(json['messages']),
        'demo': json['demo'] == null ? undefined : json['demo'],
    };
}

export function AssetToJSON(json: any): Asset {
    return AssetToJSONTyped(json, false);
}

export function AssetToJSONTyped(value?: Asset | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'name': value['name'],
        'creator': value['creator'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'synced': GroupedTimestampToJSON(value['synced']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'formats': FormatsToJSON(value['formats']),
        'preview': PreviewToJSON(value['preview']),
        'original': ReferencedFormatToJSON(value['original']),
        'shares': SharesToJSON(value['shares']),
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'websites': WebsitesToJSON(value['websites']),
        'interacted': GroupedTimestampToJSON(value['interacted']),
        'tags': TagsToJSON(value['tags']),
        'sensitives': SensitivesToJSON(value['sensitives']),
        'persons': PersonsToJSON(value['persons']),
        'curated': value['curated'],
        'discovered': value['discovered'],
        'activities': ActivitiesToJSON(value['activities']),
        'score': ScoreToJSON(value['score']),
        'favorited': value['favorited'],
        'pseudo': value['pseudo'],
        'annotations': AnnotationsToJSON(value['annotations']),
        'hints': HintsToJSON(value['hints']),
        'anchors': AnchorsToJSON(value['anchors']),
        'conversations': ConversationsToJSON(value['conversations']),
        'summaries': WorkstreamSummariesToJSON(value['summaries']),
        'messages': ConversationMessagesToJSON(value['messages']),
        'demo': value['demo'],
    };
}

