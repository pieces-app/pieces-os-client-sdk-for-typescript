/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { WindowDimensions } from './WindowDimensions';
import {
    WindowDimensionsFromJSON,
    WindowDimensionsFromJSONTyped,
    WindowDimensionsToJSON,
    WindowDimensionsToJSONTyped,
} from './WindowDimensions';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';

/**
 * This model is used for the dimensions of the copilot/feed/xyz window.
 * 
 * if dimensions/captured are null this means we do not have the dimensions for this given window.
 * 
 * TODO: consider adding 5 markers here for the qr codes(ie location of these as wel)
 * NOTE: will want to add type of calibration for this specific dimension(ie copilot/feed/xyz)
 * @export
 * @interface WorkstreamPatternEngineVisionCalibration
 */
export interface WorkstreamPatternEngineVisionCalibration {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof WorkstreamPatternEngineVisionCalibration
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is the name of the window(foreground window).(this will always be present)
     * @type {string}
     * @memberof WorkstreamPatternEngineVisionCalibration
     */
    foreground: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof WorkstreamPatternEngineVisionCalibration
     */
    captured?: GroupedTimestamp;
    /**
     * 
     * @type {WindowDimensions}
     * @memberof WorkstreamPatternEngineVisionCalibration
     */
    dimensions?: WindowDimensions;
}


/**
 * Check if a given object implements the WorkstreamPatternEngineVisionCalibration interface.
 */
export function instanceOfWorkstreamPatternEngineVisionCalibration(value: object): value is WorkstreamPatternEngineVisionCalibration {
    if (!('foreground' in value) || value['foreground'] === undefined) return false;
    return true;
}

export function WorkstreamPatternEngineVisionCalibrationFromJSON(json: any): WorkstreamPatternEngineVisionCalibration {
    return WorkstreamPatternEngineVisionCalibrationFromJSONTyped(json, false);
}

export function WorkstreamPatternEngineVisionCalibrationFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamPatternEngineVisionCalibration {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'foreground': json['foreground'],
        'captured': json['captured'] == null ? undefined : GroupedTimestampFromJSON(json['captured']),
        'dimensions': json['dimensions'] == null ? undefined : WindowDimensionsFromJSON(json['dimensions']),
    };
}

export function WorkstreamPatternEngineVisionCalibrationToJSON(json: any): WorkstreamPatternEngineVisionCalibration {
    return WorkstreamPatternEngineVisionCalibrationToJSONTyped(json, false);
}

export function WorkstreamPatternEngineVisionCalibrationToJSONTyped(value?: WorkstreamPatternEngineVisionCalibration | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'foreground': value['foreground'],
        'captured': GroupedTimestampToJSON(value['captured']),
        'dimensions': WindowDimensionsToJSON(value['dimensions']),
    };
}

