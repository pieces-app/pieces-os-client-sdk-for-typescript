/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferencedAsset } from './ReferencedAsset';
import {
    ReferencedAssetFromJSON,
    ReferencedAssetFromJSONTyped,
    ReferencedAssetToJSON,
    ReferencedAssetToJSONTyped,
} from './ReferencedAsset';
import type { ReferencedAnnotation } from './ReferencedAnnotation';
import {
    ReferencedAnnotationFromJSON,
    ReferencedAnnotationFromJSONTyped,
    ReferencedAnnotationToJSON,
    ReferencedAnnotationToJSONTyped,
} from './ReferencedAnnotation';
import type { ReferencedModel } from './ReferencedModel';
import {
    ReferencedModelFromJSON,
    ReferencedModelFromJSONTyped,
    ReferencedModelToJSON,
    ReferencedModelToJSONTyped,
} from './ReferencedModel';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';

/**
 * This is a PersonSpecific Model. and will let us know for all the assets that get attached to the person if, this person was attached via a model or just attached automatically.
 * 
 * explanation here are the reason why a Person was attached to an asset.
 * @export
 * @interface PersonModel
 */
export interface PersonModel {
    /**
     * 
     * @type {ReferencedAsset}
     * @memberof PersonModel
     */
    asset?: ReferencedAsset;
    /**
     * 
     * @type {ReferencedModel}
     * @memberof PersonModel
     */
    model?: ReferencedModel;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof PersonModel
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {ReferencedAnnotation}
     * @memberof PersonModel
     */
    explanation?: ReferencedAnnotation;
}


/**
 * Check if a given object implements the PersonModel interface.
 */
export function instanceOfPersonModel(value: object): value is PersonModel {
    return true;
}

export function PersonModelFromJSON(json: any): PersonModel {
    return PersonModelFromJSONTyped(json, false);
}

export function PersonModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonModel {
    if (json == null) {
        return json;
    }
    return {
        
        'asset': json['asset'] == null ? undefined : ReferencedAssetFromJSON(json['asset']),
        'model': json['model'] == null ? undefined : ReferencedModelFromJSON(json['model']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'explanation': json['explanation'] == null ? undefined : ReferencedAnnotationFromJSON(json['explanation']),
    };
}

export function PersonModelToJSON(json: any): PersonModel {
    return PersonModelToJSONTyped(json, false);
}

export function PersonModelToJSONTyped(value?: PersonModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'asset': ReferencedAssetToJSON(value['asset']),
        'model': ReferencedModelToJSON(value['model']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'explanation': ReferencedAnnotationToJSON(value['explanation']),
    };
}

