/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedTags } from './FlattenedTags';
import {
    FlattenedTagsFromJSON,
    FlattenedTagsFromJSONTyped,
    FlattenedTagsToJSON,
    FlattenedTagsToJSONTyped,
} from './FlattenedTags';
import type { FlattenedWorkstreamEvents } from './FlattenedWorkstreamEvents';
import {
    FlattenedWorkstreamEventsFromJSON,
    FlattenedWorkstreamEventsFromJSONTyped,
    FlattenedWorkstreamEventsToJSON,
    FlattenedWorkstreamEventsToJSONTyped,
} from './FlattenedWorkstreamEvents';
import type { FlattenedAnnotations } from './FlattenedAnnotations';
import {
    FlattenedAnnotationsFromJSON,
    FlattenedAnnotationsFromJSONTyped,
    FlattenedAnnotationsToJSON,
    FlattenedAnnotationsToJSONTyped,
} from './FlattenedAnnotations';
import type { FlattenedWorkstreamPatternEngineSourceWindows } from './FlattenedWorkstreamPatternEngineSourceWindows';
import {
    FlattenedWorkstreamPatternEngineSourceWindowsFromJSON,
    FlattenedWorkstreamPatternEngineSourceWindowsFromJSONTyped,
    FlattenedWorkstreamPatternEngineSourceWindowsToJSON,
    FlattenedWorkstreamPatternEngineSourceWindowsToJSONTyped,
} from './FlattenedWorkstreamPatternEngineSourceWindows';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
    FlattenedConversationsToJSONTyped,
} from './FlattenedConversations';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
    FlattenedWorkstreamSummariesToJSONTyped,
} from './FlattenedWorkstreamSummaries';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedAssetsToJSONTyped,
} from './FlattenedAssets';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
    FlattenedConversationMessagesToJSONTyped,
} from './FlattenedConversationMessages';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    MechanismEnumToJSONTyped,
} from './MechanismEnum';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
    FlattenedPersonsToJSONTyped,
} from './FlattenedPersons';
import type { FlattenedIdentifiedWorkstreamPatternEngineSources } from './FlattenedIdentifiedWorkstreamPatternEngineSources';
import {
    FlattenedIdentifiedWorkstreamPatternEngineSourcesFromJSON,
    FlattenedIdentifiedWorkstreamPatternEngineSourcesFromJSONTyped,
    FlattenedIdentifiedWorkstreamPatternEngineSourcesToJSON,
    FlattenedIdentifiedWorkstreamPatternEngineSourcesToJSONTyped,
} from './FlattenedIdentifiedWorkstreamPatternEngineSources';

/**
 * This is a specific model for related websites to an asset.
 * 
 * NOTE: website <> source window displays a many to many relationship, however is a 1 to 1 relationship with logic built in to ensure that this remains a 1 to one relationship.
 * Please take a look at the the workstreamEvent creation(specifically when creating a website <> source window relationship), as well as the associate for a website <> a source window,
 * This will ensure that we only ever have a single website, this will update the website if the time stamp if we are seeing the website again and as well update the source windows name as well if this is different so that is is only ever possible to have a website<>sourceWindow where a website can only ever have 1 source window.
 * @export
 * @interface Website
 */
export interface Website {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Website
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Website
     */
    id: string;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof Website
     */
    assets?: FlattenedAssets;
    /**
     * this is the actual website url.
     * @type {string}
     * @memberof Website
     */
    url: string;
    /**
     * This is a name that is customized.
     * @type {string}
     * @memberof Website
     */
    name: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Website
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Website
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Website
     */
    deleted?: GroupedTimestamp;
    /**
     * This is a Map<String, MechanismEnum> where the the key is an asset id.
     * @type {{ [key: string]: MechanismEnum; }}
     * @memberof Website
     */
    mechanisms?: { [key: string]: MechanismEnum; };
    /**
     * This is an optional value that will keep track of the number of times this has been interacted with.
     * @type {number}
     * @memberof Website
     */
    interactions?: number;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof Website
     */
    persons?: FlattenedPersons;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof Website
     */
    conversations?: FlattenedConversations;
    /**
     * 
     * @type {Score}
     * @memberof Website
     */
    score?: Score;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof Website
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof Website
     */
    messages?: FlattenedConversationMessages;
    /**
     * 
     * @type {FlattenedAnnotations}
     * @memberof Website
     */
    annotations?: FlattenedAnnotations;
    /**
     * 
     * @type {FlattenedWorkstreamEvents}
     * @memberof Website
     */
    workstreamEvents?: FlattenedWorkstreamEvents;
    /**
     * 
     * @type {FlattenedIdentifiedWorkstreamPatternEngineSources}
     * @memberof Website
     */
    sources?: FlattenedIdentifiedWorkstreamPatternEngineSources;
    /**
     * 
     * @type {FlattenedWorkstreamPatternEngineSourceWindows}
     * @memberof Website
     */
    sourceWindows?: FlattenedWorkstreamPatternEngineSourceWindows;
    /**
     * 
     * @type {FlattenedTags}
     * @memberof Website
     */
    tags?: FlattenedTags;
}

/**
 * Check if a given object implements the Website interface.
 */
export function instanceOfWebsite(value: object): value is Website {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    return true;
}

export function WebsiteFromJSON(json: any): Website {
    return WebsiteFromJSONTyped(json, false);
}

export function WebsiteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Website {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'url': json['url'],
        'name': json['name'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'mechanisms': json['mechanisms'] == null ? undefined : (mapValues(json['mechanisms'], MechanismEnumFromJSON)),
        'interactions': json['interactions'] == null ? undefined : json['interactions'],
        'persons': json['persons'] == null ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'conversations': json['conversations'] == null ? undefined : FlattenedConversationsFromJSON(json['conversations']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
        'annotations': json['annotations'] == null ? undefined : FlattenedAnnotationsFromJSON(json['annotations']),
        'workstreamEvents': json['workstream_events'] == null ? undefined : FlattenedWorkstreamEventsFromJSON(json['workstream_events']),
        'sources': json['sources'] == null ? undefined : FlattenedIdentifiedWorkstreamPatternEngineSourcesFromJSON(json['sources']),
        'sourceWindows': json['source_windows'] == null ? undefined : FlattenedWorkstreamPatternEngineSourceWindowsFromJSON(json['source_windows']),
        'tags': json['tags'] == null ? undefined : FlattenedTagsFromJSON(json['tags']),
    };
}

export function WebsiteToJSON(json: any): Website {
    return WebsiteToJSONTyped(json, false);
}

export function WebsiteToJSONTyped(value?: Website | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'assets': FlattenedAssetsToJSON(value['assets']),
        'url': value['url'],
        'name': value['name'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'mechanisms': value['mechanisms'] == null ? undefined : (mapValues(value['mechanisms'], MechanismEnumToJSON)),
        'interactions': value['interactions'],
        'persons': FlattenedPersonsToJSON(value['persons']),
        'conversations': FlattenedConversationsToJSON(value['conversations']),
        'score': ScoreToJSON(value['score']),
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
        'annotations': FlattenedAnnotationsToJSON(value['annotations']),
        'workstream_events': FlattenedWorkstreamEventsToJSON(value['workstreamEvents']),
        'sources': FlattenedIdentifiedWorkstreamPatternEngineSourcesToJSON(value['sources']),
        'source_windows': FlattenedWorkstreamPatternEngineSourceWindowsToJSON(value['sourceWindows']),
        'tags': FlattenedTagsToJSON(value['tags']),
    };
}

