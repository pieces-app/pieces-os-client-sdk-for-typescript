/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkstreamSuggestion } from './WorkstreamSuggestion';
import {
    WorkstreamSuggestionFromJSON,
    WorkstreamSuggestionFromJSONTyped,
    WorkstreamSuggestionToJSON,
    WorkstreamSuggestionToJSONTyped,
} from './WorkstreamSuggestion';
import type { WorkstreamSuggestionType } from './WorkstreamSuggestionType';
import {
    WorkstreamSuggestionTypeFromJSON,
    WorkstreamSuggestionTypeFromJSONTyped,
    WorkstreamSuggestionTypeToJSON,
    WorkstreamSuggestionTypeToJSONTyped,
} from './WorkstreamSuggestionType';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a list of the materials used in the workstream suggestions.
 * 
 * The feed will return a list of individual material that will be required to be fetched and re-referenced.(the materials that is.)
 * 
 * Considering if we want to have all the materaials just being referenced( ie ReferencedWebsite/ReferencedWorkstreamSummary/...xyz) && rebuilt
 * @export
 * @interface WorkstreamSuggestions
 */
export interface WorkstreamSuggestions {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof WorkstreamSuggestions
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<WorkstreamSuggestion>}
     * @memberof WorkstreamSuggestions
     */
    iterable: Array<WorkstreamSuggestion>;
    /**
     * This is iterable <WorkstreamSuggestionType>[] that gives the type of each of the items in the iterable.
     * I.E. types[0] is the suggestion type of the item at iterable[0].
     * @type {Array<WorkstreamSuggestionType>}
     * @memberof WorkstreamSuggestions
     */
    types?: Array<WorkstreamSuggestionType>;
}


/**
 * Check if a given object implements the WorkstreamSuggestions interface.
 */
export function instanceOfWorkstreamSuggestions(value: object): value is WorkstreamSuggestions {
    if (!('iterable' in value) || value['iterable'] === undefined) return false;
    return true;
}

export function WorkstreamSuggestionsFromJSON(json: any): WorkstreamSuggestions {
    return WorkstreamSuggestionsFromJSONTyped(json, false);
}

export function WorkstreamSuggestionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamSuggestions {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(WorkstreamSuggestionFromJSON)),
        'types': json['types'] == null ? undefined : ((json['types'] as Array<any>).map(WorkstreamSuggestionTypeFromJSON)),
    };
}

export function WorkstreamSuggestionsToJSON(json: any): WorkstreamSuggestions {
    return WorkstreamSuggestionsToJSONTyped(json, false);
}

export function WorkstreamSuggestionsToJSONTyped(value?: WorkstreamSuggestions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'iterable': ((value['iterable'] as Array<any>).map(WorkstreamSuggestionToJSON)),
        'types': value['types'] == null ? undefined : ((value['types'] as Array<any>).map(WorkstreamSuggestionTypeToJSON)),
    };
}

