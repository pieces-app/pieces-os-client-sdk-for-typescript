/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a nice microclass to help with managing the size of a File or Fragment in a readable way for UI's
 * @export
 * @interface ByteDescriptor
 */
export interface ByteDescriptor {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof ByteDescriptor
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {number}
     * @memberof ByteDescriptor
     */
    value: number;
    /**
     * 
     * @type {string}
     * @memberof ByteDescriptor
     */
    readable: string;
}

/**
 * Check if a given object implements the ByteDescriptor interface.
 */
export function instanceOfByteDescriptor(value: object): value is ByteDescriptor {
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('readable' in value) || value['readable'] === undefined) return false;
    return true;
}

export function ByteDescriptorFromJSON(json: any): ByteDescriptor {
    return ByteDescriptorFromJSONTyped(json, false);
}

export function ByteDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ByteDescriptor {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'value': json['value'],
        'readable': json['readable'],
    };
}

export function ByteDescriptorToJSON(json: any): ByteDescriptor {
    return ByteDescriptorToJSONTyped(json, false);
}

export function ByteDescriptorToJSONTyped(value?: ByteDescriptor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'value': value['value'],
        'readable': value['readable'],
    };
}

