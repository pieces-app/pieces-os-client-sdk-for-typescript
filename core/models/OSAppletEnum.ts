/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * This is an enum specifically for the different types of micro_applications/experiences/feature module
 * 
 * NOTE: TODO copilot_wasm or copilot_minimal
 * NOTE: WORKSTREAM_ACTIVITY and WORKFLOW_ACTIVITY might be diff in the future(workflow is what we have today, workstream will be a v2)
 * NOTE: PLACEHOLDERS here are here to buy some additional changes for enums that dont yet exist(JIC) if not used, then not used.
 * @export
 */
export const OSAppletEnum = {
    UnknownAppletModule: 'UNKNOWN_APPLET_MODULE',
    Copilot: 'COPILOT',
    PiecesOsToolbar: 'PIECES_OS_TOOLBAR',
    WorkstreamSuggestions: 'WORKSTREAM_SUGGESTIONS',
    SavedMaterials: 'SAVED_MATERIALS',
    WorkflowActivity: 'WORKFLOW_ACTIVITY',
    WorkstreamActivity: 'WORKSTREAM_ACTIVITY',
    GlobalSearch: 'GLOBAL_SEARCH',
    PiecesSuiteSettingsAndIntegrationsManager: 'PIECES_SUITE_SETTINGS_AND_INTEGRATIONS_MANAGER',
    CapturedContext: 'CAPTURED_CONTEXT',
    UpdatesAndUpcoming: 'UPDATES_AND_UPCOMING',
    NotificationsManager: 'NOTIFICATIONS_MANAGER',
    SharebleLinkViewer: 'SHAREBLE_LINK_VIEWER',
    FutureAppletModulePlaceholderA: 'FUTURE_APPLET_MODULE_PLACEHOLDER_A',
    FutureAppletModulePlaceholderB: 'FUTURE_APPLET_MODULE_PLACEHOLDER_B',
    FutureAppletModulePlaceholderC: 'FUTURE_APPLET_MODULE_PLACEHOLDER_C'
} as const;
export type OSAppletEnum = typeof OSAppletEnum[keyof typeof OSAppletEnum];


export function instanceOfOSAppletEnum(value: any): boolean {
    for (const key in OSAppletEnum) {
        if (Object.prototype.hasOwnProperty.call(OSAppletEnum, key)) {
            if (OSAppletEnum[key as keyof typeof OSAppletEnum] === value) {
                return true;
            }
        }
    }
    return false;
}

export function OSAppletEnumFromJSON(json: any): OSAppletEnum {
    return OSAppletEnumFromJSONTyped(json, false);
}

export function OSAppletEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): OSAppletEnum {
    if (json === null || json === undefined) {
        // Return x-enum-default
        return 'UNKNOWN_APPLET_MODULE' as OSAppletEnum;
    }

    if (instanceOfOSAppletEnum(json)) {
        return json as OSAppletEnum;
    }
    else {
        // Return x-enum-default
        return 'UNKNOWN_APPLET_MODULE' as OSAppletEnum;
    }
}

export function OSAppletEnumToJSON(value?: OSAppletEnum | null): any {
    if (value === null || value === undefined) {
        // Return x-enum-default
        return 'UNKNOWN_APPLET_MODULE' as OSAppletEnum;
    }

    // This must be checked when arguments are passed as 'any'
    if (instanceOfOSAppletEnum(value)) {
        return value as OSAppletEnum;
    }
    else {
        // Return x-enum-default
        return 'UNKNOWN_APPLET_MODULE' as OSAppletEnum;
    }
}

export function OSAppletEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): OSAppletEnum {
    if (value === null || value === undefined) {
        // Return x-enum-default
        return 'UNKNOWN_APPLET_MODULE' as OSAppletEnum;
    }
    if (instanceOfOSAppletEnum(value)) {
        return value as OSAppletEnum;
    }
    else {
        // Return x-enum-default
        return 'UNKNOWN_APPLET_MODULE' as OSAppletEnum;
    }
}
