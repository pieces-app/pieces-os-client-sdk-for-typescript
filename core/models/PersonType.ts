/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserProfile } from './UserProfile';
import {
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
    UserProfileToJSONTyped,
} from './UserProfile';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { PersonBasicType } from './PersonBasicType';
import {
    PersonBasicTypeFromJSON,
    PersonBasicTypeFromJSONTyped,
    PersonBasicTypeToJSON,
    PersonBasicTypeToJSONTyped,
} from './PersonBasicType';

/**
 * basic or platform is absolutely required here.
 * basic: if provided is just information that has been either extracted from the piece or other wise added here.
 * platform: is a real Pieces User.(this user will also exist within the user's users collection. && if not then we will just use the data we have.)
 * @export
 * @interface PersonType
 */
export interface PersonType {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof PersonType
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {PersonBasicType}
     * @memberof PersonType
     */
    basic?: PersonBasicType;
    /**
     * 
     * @type {UserProfile}
     * @memberof PersonType
     */
    platform?: UserProfile;
}


/**
 * Check if a given object implements the PersonType interface.
 */
export function instanceOfPersonType(value: object): value is PersonType {
    return true;
}

export function PersonTypeFromJSON(json: any): PersonType {
    return PersonTypeFromJSONTyped(json, false);
}

export function PersonTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonType {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'basic': json['basic'] == null ? undefined : PersonBasicTypeFromJSON(json['basic']),
        'platform': json['platform'] == null ? undefined : UserProfileFromJSON(json['platform']),
    };
}

export function PersonTypeToJSON(json: any): PersonType {
    return PersonTypeToJSONTyped(json, false);
}

export function PersonTypeToJSONTyped(value?: PersonType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'basic': PersonBasicTypeToJSON(value['basic']),
        'platform': UserProfileToJSON(value['platform']),
    };
}

