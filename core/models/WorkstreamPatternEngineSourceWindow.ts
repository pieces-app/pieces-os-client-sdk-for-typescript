/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedTags } from './FlattenedTags';
import {
    FlattenedTagsFromJSON,
    FlattenedTagsFromJSONTyped,
    FlattenedTagsToJSON,
    FlattenedTagsToJSONTyped,
} from './FlattenedTags';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
    FlattenedWebsitesToJSONTyped,
} from './FlattenedWebsites';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { FlattenedWorkstreamEvents } from './FlattenedWorkstreamEvents';
import {
    FlattenedWorkstreamEventsFromJSON,
    FlattenedWorkstreamEventsFromJSONTyped,
    FlattenedWorkstreamEventsToJSON,
    FlattenedWorkstreamEventsToJSONTyped,
} from './FlattenedWorkstreamEvents';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';

/**
 * This is the source window for the workstream pattern engine
 * 
 * NOTE: website <> source window displays a many to many relationship, however is a 1 to 1 relationship with logic built in to ensure that this remains a 1 to one relationship.
 * Please take a look at the the workstreamEvent creation(specifically when creating a website <> source window relationship), as well as the associate for a website <> a source window,
 * This will ensure that we only ever have a single website, this will update the website if the time stamp if we are seeing the website again and as well update the source windows name as well if this is different so that is is only ever possible to have a website<>sourceWindow where a website can only ever have 1 source window.
 * @export
 * @interface WorkstreamPatternEngineSourceWindow
 */
export interface WorkstreamPatternEngineSourceWindow {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    schema?: EmbeddedModelSchema;
    /**
     * The id of the source window
     * @type {string}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    id: string;
    /**
     * The name of the source window
     * @type {string}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    name: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {Score}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    score?: Score;
    /**
     * 
     * @type {FlattenedWorkstreamEvents}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    workstreamEvents?: FlattenedWorkstreamEvents;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {FlattenedTags}
     * @memberof WorkstreamPatternEngineSourceWindow
     */
    tags?: FlattenedTags;
}

/**
 * Check if a given object implements the WorkstreamPatternEngineSourceWindow interface.
 */
export function instanceOfWorkstreamPatternEngineSourceWindow(value: object): value is WorkstreamPatternEngineSourceWindow {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    return true;
}

export function WorkstreamPatternEngineSourceWindowFromJSON(json: any): WorkstreamPatternEngineSourceWindow {
    return WorkstreamPatternEngineSourceWindowFromJSONTyped(json, false);
}

export function WorkstreamPatternEngineSourceWindowFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamPatternEngineSourceWindow {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'name': json['name'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'workstreamEvents': json['workstream_events'] == null ? undefined : FlattenedWorkstreamEventsFromJSON(json['workstream_events']),
        'websites': json['websites'] == null ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'tags': json['tags'] == null ? undefined : FlattenedTagsFromJSON(json['tags']),
    };
}

export function WorkstreamPatternEngineSourceWindowToJSON(json: any): WorkstreamPatternEngineSourceWindow {
    return WorkstreamPatternEngineSourceWindowToJSONTyped(json, false);
}

export function WorkstreamPatternEngineSourceWindowToJSONTyped(value?: WorkstreamPatternEngineSourceWindow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'name': value['name'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'score': ScoreToJSON(value['score']),
        'workstream_events': FlattenedWorkstreamEventsToJSON(value['workstreamEvents']),
        'websites': FlattenedWebsitesToJSON(value['websites']),
        'tags': FlattenedTagsToJSON(value['tags']),
    };
}

