/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Auth0 } from './Auth0';
import {
    Auth0FromJSON,
    Auth0FromJSONTyped,
    Auth0ToJSON,
    Auth0ToJSONTyped,
} from './Auth0';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { TokenizedPKCE } from './TokenizedPKCE';
import {
    TokenizedPKCEFromJSON,
    TokenizedPKCEFromJSONTyped,
    TokenizedPKCEToJSON,
    TokenizedPKCEToJSONTyped,
} from './TokenizedPKCE';
import type { Descope } from './Descope';
import {
    DescopeFromJSON,
    DescopeFromJSONTyped,
    DescopeToJSON,
    DescopeToJSONTyped,
} from './Descope';
import type { RevokedPKCE } from './RevokedPKCE';
import {
    RevokedPKCEFromJSON,
    RevokedPKCEFromJSONTyped,
    RevokedPKCEToJSON,
    RevokedPKCEToJSONTyped,
} from './RevokedPKCE';
import type { SeededPKCE } from './SeededPKCE';
import {
    SeededPKCEFromJSON,
    SeededPKCEFromJSONTyped,
    SeededPKCEToJSON,
    SeededPKCEToJSONTyped,
} from './SeededPKCE';
import type { ChallengedPKCE } from './ChallengedPKCE';
import {
    ChallengedPKCEFromJSON,
    ChallengedPKCEFromJSONTyped,
    ChallengedPKCEToJSON,
    ChallengedPKCEToJSONTyped,
} from './ChallengedPKCE';
import type { ResultedPKCE } from './ResultedPKCE';
import {
    ResultedPKCEFromJSON,
    ResultedPKCEFromJSONTyped,
    ResultedPKCEToJSON,
    ResultedPKCEToJSONTyped,
} from './ResultedPKCE';

/**
 * An object representing all of the properties involved in a PKCE Authentication Flow
 * @export
 * @interface PKCE
 */
export interface PKCE {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof PKCE
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ResultedPKCE}
     * @memberof PKCE
     */
    result?: ResultedPKCE;
    /**
     * 
     * @type {ChallengedPKCE}
     * @memberof PKCE
     */
    challenge?: ChallengedPKCE;
    /**
     * 
     * @type {RevokedPKCE}
     * @memberof PKCE
     */
    revocation?: RevokedPKCE;
    /**
     * 
     * @type {SeededPKCE}
     * @memberof PKCE
     */
    seed?: SeededPKCE;
    /**
     * 
     * @type {TokenizedPKCE}
     * @memberof PKCE
     */
    token?: TokenizedPKCE;
    /**
     * 
     * @type {Auth0}
     * @memberof PKCE
     */
    auth0?: Auth0;
    /**
     * 
     * @type {Descope}
     * @memberof PKCE
     */
    descope?: Descope;
}


/**
 * Check if a given object implements the PKCE interface.
 */
export function instanceOfPKCE(value: object): value is PKCE {
    return true;
}

export function PKCEFromJSON(json: any): PKCE {
    return PKCEFromJSONTyped(json, false);
}

export function PKCEFromJSONTyped(json: any, ignoreDiscriminator: boolean): PKCE {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'result': json['result'] == null ? undefined : ResultedPKCEFromJSON(json['result']),
        'challenge': json['challenge'] == null ? undefined : ChallengedPKCEFromJSON(json['challenge']),
        'revocation': json['revocation'] == null ? undefined : RevokedPKCEFromJSON(json['revocation']),
        'seed': json['seed'] == null ? undefined : SeededPKCEFromJSON(json['seed']),
        'token': json['token'] == null ? undefined : TokenizedPKCEFromJSON(json['token']),
        'auth0': json['auth0'] == null ? undefined : Auth0FromJSON(json['auth0']),
        'descope': json['descope'] == null ? undefined : DescopeFromJSON(json['descope']),
    };
}

export function PKCEToJSON(json: any): PKCE {
    return PKCEToJSONTyped(json, false);
}

export function PKCEToJSONTyped(value?: PKCE | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'result': ResultedPKCEToJSON(value['result']),
        'challenge': ChallengedPKCEToJSON(value['challenge']),
        'revocation': RevokedPKCEToJSON(value['revocation']),
        'seed': SeededPKCEToJSON(value['seed']),
        'token': TokenizedPKCEToJSON(value['token']),
        'auth0': Auth0ToJSON(value['auth0']),
        'descope': DescopeToJSON(value['descope']),
    };
}

