/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { FlattenedDistributions } from './FlattenedDistributions';
import {
    FlattenedDistributionsFromJSON,
    FlattenedDistributionsFromJSONTyped,
    FlattenedDistributionsToJSON,
    FlattenedDistributionsToJSONTyped,
} from './FlattenedDistributions';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedAssetsToJSONTyped,
} from './FlattenedAssets';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { AccessEnum } from './AccessEnum';
import {
    AccessEnumFromJSON,
    AccessEnumFromJSONTyped,
    AccessEnumToJSON,
    AccessEnumToJSONTyped,
} from './AccessEnum';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { Accessors } from './Accessors';
import {
    AccessorsFromJSON,
    AccessorsFromJSONTyped,
    AccessorsToJSON,
    AccessorsToJSONTyped,
} from './Accessors';

/**
 * This is a dag safe version of the Share.
 * 
 * if user is undefined && access is public then we have an asset that is publicly available.
 * @export
 * @interface FlattenedShare
 */
export interface FlattenedShare {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedShare
     */
    schema?: EmbeddedModelSchema;
    /**
     * This references the share it self.
     * @type {string}
     * @memberof FlattenedShare
     */
    id: string;
    /**
     * this is the asset id on the flattened share.
     * @type {string}
     * @memberof FlattenedShare
     */
    asset?: string;
    /**
     * this is the uuid of the user that the share is created for.
     * @type {string}
     * @memberof FlattenedShare
     */
    user?: string;
    /**
     * this is the prebuilt link.
     * @type {string}
     * @memberof FlattenedShare
     */
    link: string;
    /**
     * 
     * @type {AccessEnum}
     * @memberof FlattenedShare
     */
    access: AccessEnum;
    /**
     * 
     * @type {Accessors}
     * @memberof FlattenedShare
     */
    accessors: Accessors;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedShare
     */
    created: GroupedTimestamp;
    /**
     * This is a shortened version of our uuid.
     * @type {string}
     * @memberof FlattenedShare
     */
    _short: string;
    /**
     * 
     * @type {string}
     * @memberof FlattenedShare
     */
    name?: string;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof FlattenedShare
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedDistributions}
     * @memberof FlattenedShare
     */
    distributions?: FlattenedDistributions;
    /**
     * 
     * @type {Score}
     * @memberof FlattenedShare
     */
    score?: Score;
}


/**
 * Check if a given object implements the FlattenedShare interface.
 */
export function instanceOfFlattenedShare(value: object): value is FlattenedShare {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('link' in value) || value['link'] === undefined) return false;
    if (!('access' in value) || value['access'] === undefined) return false;
    if (!('accessors' in value) || value['accessors'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('_short' in value) || value['_short'] === undefined) return false;
    return true;
}

export function FlattenedShareFromJSON(json: any): FlattenedShare {
    return FlattenedShareFromJSONTyped(json, false);
}

export function FlattenedShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedShare {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'asset': json['asset'] == null ? undefined : json['asset'],
        'user': json['user'] == null ? undefined : json['user'],
        'link': json['link'],
        'access': AccessEnumFromJSON(json['access']),
        'accessors': AccessorsFromJSON(json['accessors']),
        'created': GroupedTimestampFromJSON(json['created']),
        '_short': json['short'],
        'name': json['name'] == null ? undefined : json['name'],
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'distributions': json['distributions'] == null ? undefined : FlattenedDistributionsFromJSON(json['distributions']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
    };
}

export function FlattenedShareToJSON(json: any): FlattenedShare {
    return FlattenedShareToJSONTyped(json, false);
}

export function FlattenedShareToJSONTyped(value?: FlattenedShare | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'asset': value['asset'],
        'user': value['user'],
        'link': value['link'],
        'access': AccessEnumToJSON(value['access']),
        'accessors': AccessorsToJSON(value['accessors']),
        'created': GroupedTimestampToJSON(value['created']),
        'short': value['_short'],
        'name': value['name'],
        'assets': FlattenedAssetsToJSON(value['assets']),
        'distributions': FlattenedDistributionsToJSON(value['distributions']),
        'score': ScoreToJSON(value['score']),
    };
}

