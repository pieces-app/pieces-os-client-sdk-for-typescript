/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { ClassificationGenericEnum } from './ClassificationGenericEnum';
import {
    ClassificationGenericEnumFromJSON,
    ClassificationGenericEnumFromJSONTyped,
    ClassificationGenericEnumToJSON,
    ClassificationGenericEnumToJSONTyped,
} from './ClassificationGenericEnum';
import type { ClassificationSpecificEnum } from './ClassificationSpecificEnum';
import {
    ClassificationSpecificEnumFromJSON,
    ClassificationSpecificEnumFromJSONTyped,
    ClassificationSpecificEnumToJSON,
    ClassificationSpecificEnumToJSONTyped,
} from './ClassificationSpecificEnum';

/**
 * FormatMetric
 * 
 * This is a model that will represent the about of specific formats. ie Generic: 'CODE' specific: 'DART' identifiers: ['FormatUID1, 'FormatUID2']
 * @export
 * @interface FormatMetric
 */
export interface FormatMetric {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FormatMetric
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ClassificationGenericEnum}
     * @memberof FormatMetric
     */
    generic: ClassificationGenericEnum;
    /**
     * 
     * @type {ClassificationSpecificEnum}
     * @memberof FormatMetric
     */
    specific: ClassificationSpecificEnum;
    /**
     * this is a list of format ids
     * @type {Array<string>}
     * @memberof FormatMetric
     */
    identifiers: Array<string>;
}



/**
 * Check if a given object implements the FormatMetric interface.
 */
export function instanceOfFormatMetric(value: object): value is FormatMetric {
    if (!('generic' in value) || value['generic'] === undefined) return false;
    if (!('specific' in value) || value['specific'] === undefined) return false;
    if (!('identifiers' in value) || value['identifiers'] === undefined) return false;
    return true;
}

export function FormatMetricFromJSON(json: any): FormatMetric {
    return FormatMetricFromJSONTyped(json, false);
}

export function FormatMetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormatMetric {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'generic': ClassificationGenericEnumFromJSON(json['generic']),
        'specific': ClassificationSpecificEnumFromJSON(json['specific']),
        'identifiers': json['identifiers'],
    };
}

export function FormatMetricToJSON(json: any): FormatMetric {
    return FormatMetricToJSONTyped(json, false);
}

export function FormatMetricToJSONTyped(value?: FormatMetric | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'generic': ClassificationGenericEnumToJSON(value['generic']),
        'specific': ClassificationSpecificEnumToJSON(value['specific']),
        'identifiers': value['identifiers'],
    };
}

