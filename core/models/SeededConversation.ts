/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeededAnchor } from './SeededAnchor';
import {
    SeededAnchorFromJSON,
    SeededAnchorFromJSONTyped,
    SeededAnchorToJSON,
    SeededAnchorToJSONTyped,
} from './SeededAnchor';
import type { ConversationTypeEnum } from './ConversationTypeEnum';
import {
    ConversationTypeEnumFromJSON,
    ConversationTypeEnumFromJSONTyped,
    ConversationTypeEnumToJSON,
    ConversationTypeEnumToJSONTyped,
} from './ConversationTypeEnum';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
    FlattenedWebsitesToJSONTyped,
} from './FlattenedWebsites';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedAssetsToJSONTyped,
} from './FlattenedAssets';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { SeededAnnotation } from './SeededAnnotation';
import {
    SeededAnnotationFromJSON,
    SeededAnnotationFromJSONTyped,
    SeededAnnotationToJSON,
    SeededAnnotationToJSONTyped,
} from './SeededAnnotation';
import type { QGPTPromptPipeline } from './QGPTPromptPipeline';
import {
    QGPTPromptPipelineFromJSON,
    QGPTPromptPipelineFromJSONTyped,
    QGPTPromptPipelineToJSON,
    QGPTPromptPipelineToJSONTyped,
} from './QGPTPromptPipeline';
import type { ReferencedModel } from './ReferencedModel';
import {
    ReferencedModelFromJSON,
    ReferencedModelFromJSONTyped,
    ReferencedModelToJSON,
    ReferencedModelToJSONTyped,
} from './ReferencedModel';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
    ApplicationToJSONTyped,
} from './Application';
import type { SeededConversationMessage } from './SeededConversationMessage';
import {
    SeededConversationMessageFromJSON,
    SeededConversationMessageFromJSONTyped,
    SeededConversationMessageToJSON,
    SeededConversationMessageToJSONTyped,
} from './SeededConversationMessage';

/**
 * This is a pre-Conversation object.
 * 
 * This will hold together a conversation. Ie allthe message within a conversation.
 * 
 * All the additional properties on here used on here like(anchors/assets) are used for context that will seed the conversation.
 * 
 * model is a calculated property, and will be the model of the last message sent if applicable.
 * @export
 * @interface SeededConversation
 */
export interface SeededConversation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededConversation
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is a name that is customized.
     * @type {string}
     * @memberof SeededConversation
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeededConversation
     */
    favorited?: boolean;
    /**
     * 
     * @type {Application}
     * @memberof SeededConversation
     */
    application?: Application;
    /**
     * 
     * @type {Array<SeededAnnotation>}
     * @memberof SeededConversation
     */
    annotations?: Array<SeededAnnotation>;
    /**
     * 
     * @type {Array<SeededConversationMessage>}
     * @memberof SeededConversation
     */
    messages?: Array<SeededConversationMessage>;
    /**
     * 
     * @type {ReferencedModel}
     * @memberof SeededConversation
     */
    model?: ReferencedModel;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof SeededConversation
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof SeededConversation
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {Array<SeededAnchor>}
     * @memberof SeededConversation
     */
    anchors?: Array<SeededAnchor>;
    /**
     * 
     * @type {ConversationTypeEnum}
     * @memberof SeededConversation
     */
    type: ConversationTypeEnum;
    /**
     * 
     * @type {QGPTPromptPipeline}
     * @memberof SeededConversation
     */
    pipeline?: QGPTPromptPipeline;
    /**
     * This will let us know if this conversation was generated as a 'demo' conversation
     * @type {boolean}
     * @memberof SeededConversation
     */
    demo?: boolean;
}


/**
 * Check if a given object implements the SeededConversation interface.
 */
export function instanceOfSeededConversation(value: object): value is SeededConversation {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function SeededConversationFromJSON(json: any): SeededConversation {
    return SeededConversationFromJSONTyped(json, false);
}

export function SeededConversationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededConversation {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'name': json['name'] == null ? undefined : json['name'],
        'favorited': json['favorited'] == null ? undefined : json['favorited'],
        'application': json['application'] == null ? undefined : ApplicationFromJSON(json['application']),
        'annotations': json['annotations'] == null ? undefined : ((json['annotations'] as Array<any>).map(SeededAnnotationFromJSON)),
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(SeededConversationMessageFromJSON)),
        'model': json['model'] == null ? undefined : ReferencedModelFromJSON(json['model']),
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'websites': json['websites'] == null ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'anchors': json['anchors'] == null ? undefined : ((json['anchors'] as Array<any>).map(SeededAnchorFromJSON)),
        'type': ConversationTypeEnumFromJSON(json['type']),
        'pipeline': json['pipeline'] == null ? undefined : QGPTPromptPipelineFromJSON(json['pipeline']),
        'demo': json['demo'] == null ? undefined : json['demo'],
    };
}

export function SeededConversationToJSON(json: any): SeededConversation {
    return SeededConversationToJSONTyped(json, false);
}

export function SeededConversationToJSONTyped(value?: SeededConversation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'name': value['name'],
        'favorited': value['favorited'],
        'application': ApplicationToJSON(value['application']),
        'annotations': value['annotations'] == null ? undefined : ((value['annotations'] as Array<any>).map(SeededAnnotationToJSON)),
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(SeededConversationMessageToJSON)),
        'model': ReferencedModelToJSON(value['model']),
        'assets': FlattenedAssetsToJSON(value['assets']),
        'websites': FlattenedWebsitesToJSON(value['websites']),
        'anchors': value['anchors'] == null ? undefined : ((value['anchors'] as Array<any>).map(SeededAnchorToJSON)),
        'type': ConversationTypeEnumToJSON(value['type']),
        'pipeline': QGPTPromptPipelineToJSON(value['pipeline']),
        'demo': value['demo'],
    };
}

