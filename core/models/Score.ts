/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is use as the score for an asset.
 * 
 * Manual: will be the raw sum of the asset activity events ranks with mechanismEnum == manual
 * Automatic: will be the raw sum of the asset activity events ranks with mechanismEnum == automatic
 * @export
 * @interface Score
 */
export interface Score {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Score
     */
    schema?: EmbeddedModelSchema;
    /**
     * These are points assigned via manual user driven events.
     * @type {number}
     * @memberof Score
     */
    manual: number;
    /**
     * These are point assigned via automatic activity events.
     * @type {number}
     * @memberof Score
     */
    automatic: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    priority?: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    reuse?: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    update?: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    reference?: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    searched?: number;
}

/**
 * Check if a given object implements the Score interface.
 */
export function instanceOfScore(value: object): value is Score {
    if (!('manual' in value) || value['manual'] === undefined) return false;
    if (!('automatic' in value) || value['automatic'] === undefined) return false;
    return true;
}

export function ScoreFromJSON(json: any): Score {
    return ScoreFromJSONTyped(json, false);
}

export function ScoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): Score {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'manual': json['manual'],
        'automatic': json['automatic'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'reuse': json['reuse'] == null ? undefined : json['reuse'],
        'update': json['update'] == null ? undefined : json['update'],
        'reference': json['reference'] == null ? undefined : json['reference'],
        'searched': json['searched'] == null ? undefined : json['searched'],
    };
}

export function ScoreToJSON(json: any): Score {
    return ScoreToJSONTyped(json, false);
}

export function ScoreToJSONTyped(value?: Score | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'manual': value['manual'],
        'automatic': value['automatic'],
        'priority': value['priority'],
        'reuse': value['reuse'],
        'update': value['update'],
        'reference': value['reference'],
        'searched': value['searched'],
    };
}

