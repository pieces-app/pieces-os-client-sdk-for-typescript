/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { QGPTPromptPipeline } from './QGPTPromptPipeline';
import {
    QGPTPromptPipelineFromJSON,
    QGPTPromptPipelineFromJSONTyped,
    QGPTPromptPipelineToJSON,
    QGPTPromptPipelineToJSONTyped,
} from './QGPTPromptPipeline';

/**
 * 
 * @export
 * @interface QGPTRelevanceInputOptions
 */
export interface QGPTRelevanceInputOptions {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof QGPTRelevanceInputOptions
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is an optional boolen that will tell us to use our entire snippet database as the sample.
     * @type {boolean}
     * @memberof QGPTRelevanceInputOptions
     */
    database?: boolean;
    /**
     * This is an optional boolean, that will let the serve know if you want to combine the 2 endpointsboth relevance && the Question endpoint to return the final results.
     * @type {boolean}
     * @memberof QGPTRelevanceInputOptions
     */
    question?: boolean;
    /**
     * 
     * @type {QGPTPromptPipeline}
     * @memberof QGPTRelevanceInputOptions
     */
    pipeline?: QGPTPromptPipeline;
}

/**
 * Check if a given object implements the QGPTRelevanceInputOptions interface.
 */
export function instanceOfQGPTRelevanceInputOptions(value: object): value is QGPTRelevanceInputOptions {
    return true;
}

export function QGPTRelevanceInputOptionsFromJSON(json: any): QGPTRelevanceInputOptions {
    return QGPTRelevanceInputOptionsFromJSONTyped(json, false);
}

export function QGPTRelevanceInputOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTRelevanceInputOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'database': json['database'] == null ? undefined : json['database'],
        'question': json['question'] == null ? undefined : json['question'],
        'pipeline': json['pipeline'] == null ? undefined : QGPTPromptPipelineFromJSON(json['pipeline']),
    };
}

export function QGPTRelevanceInputOptionsToJSON(json: any): QGPTRelevanceInputOptions {
    return QGPTRelevanceInputOptionsToJSONTyped(json, false);
}

export function QGPTRelevanceInputOptionsToJSONTyped(value?: QGPTRelevanceInputOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'database': value['database'],
        'question': value['question'],
        'pipeline': QGPTPromptPipelineToJSON(value['pipeline']),
    };
}

