/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { SeededTrackedKeyboardEventIdentifierDescriptionPairs } from './SeededTrackedKeyboardEventIdentifierDescriptionPairs';
import {
    SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON,
    SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSONTyped,
    SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON,
    SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSONTyped,
} from './SeededTrackedKeyboardEventIdentifierDescriptionPairs';

/**
 * This is a model that will hold relavent information in relation to a keyboard(including shortcuts) analytics event (usage).
 * @export
 * @interface SeededTrackedKeyboardEvent
 */
export interface SeededTrackedKeyboardEvent {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededTrackedKeyboardEvent
     */
    schema?: EmbeddedModelSchema;
    /**
     * This also needs structure such as key vals or enums
     * @type {string}
     * @memberof SeededTrackedKeyboardEvent
     */
    description: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof SeededTrackedKeyboardEvent
     */
    shortcut: Array<number>;
    /**
     * 
     * @type {SeededTrackedKeyboardEventIdentifierDescriptionPairs}
     * @memberof SeededTrackedKeyboardEvent
     */
    identifierDescriptionPair?: SeededTrackedKeyboardEventIdentifierDescriptionPairs;
}


/**
 * Check if a given object implements the SeededTrackedKeyboardEvent interface.
 */
export function instanceOfSeededTrackedKeyboardEvent(value: object): value is SeededTrackedKeyboardEvent {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('shortcut' in value) || value['shortcut'] === undefined) return false;
    return true;
}

export function SeededTrackedKeyboardEventFromJSON(json: any): SeededTrackedKeyboardEvent {
    return SeededTrackedKeyboardEventFromJSONTyped(json, false);
}

export function SeededTrackedKeyboardEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededTrackedKeyboardEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'description': json['description'],
        'shortcut': json['shortcut'],
        'identifierDescriptionPair': json['identifier_description_pair'] == null ? undefined : SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON(json['identifier_description_pair']),
    };
}

export function SeededTrackedKeyboardEventToJSON(json: any): SeededTrackedKeyboardEvent {
    return SeededTrackedKeyboardEventToJSONTyped(json, false);
}

export function SeededTrackedKeyboardEventToJSONTyped(value?: SeededTrackedKeyboardEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'description': value['description'],
        'shortcut': value['shortcut'],
        'identifier_description_pair': SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON(value['identifierDescriptionPair']),
    };
}

