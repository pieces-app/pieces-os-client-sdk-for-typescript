/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { QGPTTaskPipeline } from './QGPTTaskPipeline';
import {
    QGPTTaskPipelineFromJSON,
    QGPTTaskPipelineFromJSONTyped,
    QGPTTaskPipelineToJSON,
    QGPTTaskPipelineToJSONTyped,
} from './QGPTTaskPipeline';
import type { QGPTConversationPipeline } from './QGPTConversationPipeline';
import {
    QGPTConversationPipelineFromJSON,
    QGPTConversationPipelineFromJSONTyped,
    QGPTConversationPipelineToJSON,
    QGPTConversationPipelineToJSONTyped,
} from './QGPTConversationPipeline';

/**
 * This is a model related to switching between different prompts based on if we are dealing with 
 * various tasks or if we are attempting to converse with LLMs via conversation.
 * 
 * You will have 2 options-
 * 
 * 1) task- This is specifically for 1 off task operations for instance explaning a bit of code
 * 2) conversation- This is specifically for conversing with our LLMs, will provide better results && high fedility 
 *               responses for instance contextualize code conversations.
 * @export
 * @interface QGPTPromptPipeline
 */
export interface QGPTPromptPipeline {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof QGPTPromptPipeline
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {QGPTTaskPipeline}
     * @memberof QGPTPromptPipeline
     */
    task?: QGPTTaskPipeline;
    /**
     * 
     * @type {QGPTConversationPipeline}
     * @memberof QGPTPromptPipeline
     */
    conversation?: QGPTConversationPipeline;
}

/**
 * Check if a given object implements the QGPTPromptPipeline interface.
 */
export function instanceOfQGPTPromptPipeline(value: object): value is QGPTPromptPipeline {
    return true;
}

export function QGPTPromptPipelineFromJSON(json: any): QGPTPromptPipeline {
    return QGPTPromptPipelineFromJSONTyped(json, false);
}

export function QGPTPromptPipelineFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTPromptPipeline {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'task': json['task'] == null ? undefined : QGPTTaskPipelineFromJSON(json['task']),
        'conversation': json['conversation'] == null ? undefined : QGPTConversationPipelineFromJSON(json['conversation']),
    };
}

export function QGPTPromptPipelineToJSON(json: any): QGPTPromptPipeline {
    return QGPTPromptPipelineToJSONTyped(json, false);
}

export function QGPTPromptPipelineToJSONTyped(value?: QGPTPromptPipeline | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'task': QGPTTaskPipelineToJSON(value['task']),
        'conversation': QGPTConversationPipelineToJSON(value['conversation']),
    };
}

