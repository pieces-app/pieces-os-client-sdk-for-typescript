/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QGPTConversation } from './QGPTConversation';
import {
    QGPTConversationFromJSON,
    QGPTConversationFromJSONTyped,
    QGPTConversationToJSON,
    QGPTConversationToJSONTyped,
} from './QGPTConversation';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Seed } from './Seed';
import {
    SeedFromJSON,
    SeedFromJSONTyped,
    SeedToJSON,
    SeedToJSONTyped,
} from './Seed';

/**
 * This is used for /qgpt/persons/related.
 * 
 * will accept a seed, or conversation all optionally.
 * 
 * @export
 * @interface QGPTPersonsRelatedInput
 */
export interface QGPTPersonsRelatedInput {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof QGPTPersonsRelatedInput
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Seed}
     * @memberof QGPTPersonsRelatedInput
     */
    seed?: Seed;
    /**
     * 
     * @type {QGPTConversation}
     * @memberof QGPTPersonsRelatedInput
     */
    conversation?: QGPTConversation;
    /**
     * optional application id
     * @type {string}
     * @memberof QGPTPersonsRelatedInput
     */
    application?: string;
    /**
     * optional model id
     * @type {string}
     * @memberof QGPTPersonsRelatedInput
     */
    model?: string;
}

/**
 * Check if a given object implements the QGPTPersonsRelatedInput interface.
 */
export function instanceOfQGPTPersonsRelatedInput(value: object): value is QGPTPersonsRelatedInput {
    return true;
}

export function QGPTPersonsRelatedInputFromJSON(json: any): QGPTPersonsRelatedInput {
    return QGPTPersonsRelatedInputFromJSONTyped(json, false);
}

export function QGPTPersonsRelatedInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTPersonsRelatedInput {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'seed': json['seed'] == null ? undefined : SeedFromJSON(json['seed']),
        'conversation': json['conversation'] == null ? undefined : QGPTConversationFromJSON(json['conversation']),
        'application': json['application'] == null ? undefined : json['application'],
        'model': json['model'] == null ? undefined : json['model'],
    };
}

export function QGPTPersonsRelatedInputToJSON(json: any): QGPTPersonsRelatedInput {
    return QGPTPersonsRelatedInputToJSONTyped(json, false);
}

export function QGPTPersonsRelatedInputToJSONTyped(value?: QGPTPersonsRelatedInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'seed': SeedToJSON(value['seed']),
        'conversation': QGPTConversationToJSON(value['conversation']),
        'application': value['application'],
        'model': value['model'],
    };
}

