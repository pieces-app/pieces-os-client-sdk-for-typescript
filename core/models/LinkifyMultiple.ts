/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeededUser } from './SeededUser';
import {
    SeededUserFromJSON,
    SeededUserFromJSONTyped,
    SeededUserToJSON,
    SeededUserToJSONTyped,
} from './SeededUser';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { AccessEnum } from './AccessEnum';
import {
    AccessEnumFromJSON,
    AccessEnumFromJSONTyped,
    AccessEnumToJSON,
    AccessEnumToJSONTyped,
} from './AccessEnum';

/**
 * This is the incoming linkify model.
 * 
 * if access is PRIVATE then please provide and array of users to enable the link for.
 * 
 * Assumption, all assets are already backed up to the cloud.
 * 
 * @export
 * @interface LinkifyMultiple
 */
export interface LinkifyMultiple {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof LinkifyMultiple
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is an array or string that represents an already backed up asset. That will be added to a collection.
     * @type {Array<string>}
     * @memberof LinkifyMultiple
     */
    assets: Array<string>;
    /**
     * this is an array of users.
     * @type {Array<SeededUser>}
     * @memberof LinkifyMultiple
     */
    users?: Array<SeededUser>;
    /**
     * 
     * @type {AccessEnum}
     * @memberof LinkifyMultiple
     */
    access: AccessEnum;
    /**
     * optionally can give the collection a name if you want.
     * @type {string}
     * @memberof LinkifyMultiple
     */
    name?: string;
}


/**
 * Check if a given object implements the LinkifyMultiple interface.
 */
export function instanceOfLinkifyMultiple(value: object): value is LinkifyMultiple {
    if (!('assets' in value) || value['assets'] === undefined) return false;
    if (!('access' in value) || value['access'] === undefined) return false;
    return true;
}

export function LinkifyMultipleFromJSON(json: any): LinkifyMultiple {
    return LinkifyMultipleFromJSONTyped(json, false);
}

export function LinkifyMultipleFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkifyMultiple {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'assets': json['assets'],
        'users': json['users'] == null ? undefined : ((json['users'] as Array<any>).map(SeededUserFromJSON)),
        'access': AccessEnumFromJSON(json['access']),
        'name': json['name'] == null ? undefined : json['name'],
    };
}

export function LinkifyMultipleToJSON(json: any): LinkifyMultiple {
    return LinkifyMultipleToJSONTyped(json, false);
}

export function LinkifyMultipleToJSONTyped(value?: LinkifyMultiple | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'assets': value['assets'],
        'users': value['users'] == null ? undefined : ((value['users'] as Array<any>).map(SeededUserToJSON)),
        'access': AccessEnumToJSON(value['access']),
        'name': value['name'],
    };
}

