/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Classification } from './Classification';
import {
    ClassificationFromJSON,
    ClassificationFromJSONTyped,
    ClassificationToJSON,
    ClassificationToJSONTyped,
} from './Classification';
import type { PersonBasicType } from './PersonBasicType';
import {
    PersonBasicTypeFromJSON,
    PersonBasicTypeFromJSONTyped,
    PersonBasicTypeToJSON,
    PersonBasicTypeToJSONTyped,
} from './PersonBasicType';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { TransferableString } from './TransferableString';
import {
    TransferableStringFromJSON,
    TransferableStringFromJSONTyped,
    TransferableStringToJSON,
    TransferableStringToJSONTyped,
} from './TransferableString';

/**
 * A DocumentContributor is a preseeded representation of a Person
 * 
 * This can be used in the case of the browser, or in the IDE
 * 
 * If they are apart of an IDE, we can in the future provide git information (IE add a Git object for their commits)
 * 
 * person: this is most important part which is the email/name xyz
 * @export
 * @interface DocumentContributor
 */
export interface DocumentContributor {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof DocumentContributor
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Classification}
     * @memberof DocumentContributor
     */
    classification?: Classification;
    /**
     * 
     * @type {TransferableString}
     * @memberof DocumentContributor
     */
    value?: TransferableString;
    /**
     * 
     * @type {PersonBasicType}
     * @memberof DocumentContributor
     */
    person: PersonBasicType;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof DocumentContributor
     */
    updated?: GroupedTimestamp;
}

/**
 * Check if a given object implements the DocumentContributor interface.
 */
export function instanceOfDocumentContributor(value: object): value is DocumentContributor {
    if (!('person' in value) || value['person'] === undefined) return false;
    return true;
}

export function DocumentContributorFromJSON(json: any): DocumentContributor {
    return DocumentContributorFromJSONTyped(json, false);
}

export function DocumentContributorFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentContributor {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'classification': json['classification'] == null ? undefined : ClassificationFromJSON(json['classification']),
        'value': json['value'] == null ? undefined : TransferableStringFromJSON(json['value']),
        'person': PersonBasicTypeFromJSON(json['person']),
        'updated': json['updated'] == null ? undefined : GroupedTimestampFromJSON(json['updated']),
    };
}

export function DocumentContributorToJSON(json: any): DocumentContributor {
    return DocumentContributorToJSONTyped(json, false);
}

export function DocumentContributorToJSONTyped(value?: DocumentContributor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'classification': ClassificationToJSON(value['classification']),
        'value': TransferableStringToJSON(value['value']),
        'person': PersonBasicTypeToJSON(value['person']),
        'updated': GroupedTimestampToJSON(value['updated']),
    };
}

