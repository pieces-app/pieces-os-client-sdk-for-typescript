/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { ClassificationGenericEnum } from './ClassificationGenericEnum';
import {
    ClassificationGenericEnumFromJSON,
    ClassificationGenericEnumFromJSONTyped,
    ClassificationGenericEnumToJSON,
    ClassificationGenericEnumToJSONTyped,
} from './ClassificationGenericEnum';
import type { FragmentFormat } from './FragmentFormat';
import {
    FragmentFormatFromJSON,
    FragmentFormatFromJSONTyped,
    FragmentFormatToJSON,
    FragmentFormatToJSONTyped,
} from './FragmentFormat';
import type { ClassificationSpecificEnum } from './ClassificationSpecificEnum';
import {
    ClassificationSpecificEnumFromJSON,
    ClassificationSpecificEnumFromJSONTyped,
    ClassificationSpecificEnumToJSON,
    ClassificationSpecificEnumToJSONTyped,
} from './ClassificationSpecificEnum';

/**
 * This is the output iterable model for '/machine_learning/text/technical_language/parsers/segmentation'
 * 
 * specific is optional here, however you can pass in classify: true to get the specific classificaiton in the case the generic is code.
 * @export
 * @interface SegmentedTechnicalLanguageFragment
 */
export interface SegmentedTechnicalLanguageFragment {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SegmentedTechnicalLanguageFragment
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ClassificationGenericEnum}
     * @memberof SegmentedTechnicalLanguageFragment
     */
    generic: ClassificationGenericEnum;
    /**
     * 
     * @type {ClassificationSpecificEnum}
     * @memberof SegmentedTechnicalLanguageFragment
     */
    specific?: ClassificationSpecificEnum;
    /**
     * 
     * @type {FragmentFormat}
     * @memberof SegmentedTechnicalLanguageFragment
     */
    fragment: FragmentFormat;
}


/**
 * Check if a given object implements the SegmentedTechnicalLanguageFragment interface.
 */
export function instanceOfSegmentedTechnicalLanguageFragment(value: object): value is SegmentedTechnicalLanguageFragment {
    if (!('generic' in value) || value['generic'] === undefined) return false;
    if (!('fragment' in value) || value['fragment'] === undefined) return false;
    return true;
}

export function SegmentedTechnicalLanguageFragmentFromJSON(json: any): SegmentedTechnicalLanguageFragment {
    return SegmentedTechnicalLanguageFragmentFromJSONTyped(json, false);
}

export function SegmentedTechnicalLanguageFragmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): SegmentedTechnicalLanguageFragment {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'generic': ClassificationGenericEnumFromJSON(json['generic']),
        'specific': ClassificationSpecificEnumFromJSON(json['specific']),
        'fragment': FragmentFormatFromJSON(json['fragment']),
    };
}

export function SegmentedTechnicalLanguageFragmentToJSON(json: any): SegmentedTechnicalLanguageFragment {
    return SegmentedTechnicalLanguageFragmentToJSONTyped(json, false);
}

export function SegmentedTechnicalLanguageFragmentToJSONTyped(value?: SegmentedTechnicalLanguageFragment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'generic': ClassificationGenericEnumToJSON(value['generic']),
        'specific': ClassificationSpecificEnumToJSON(value['specific']),
        'fragment': FragmentFormatToJSON(value['fragment']),
    };
}

