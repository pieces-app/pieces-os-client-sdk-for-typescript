/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Anchor } from './Anchor';
import {
    AnchorFromJSON,
    AnchorFromJSONTyped,
    AnchorToJSON,
    AnchorToJSONTyped,
} from './Anchor';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { SearchedAnchorPoints } from './SearchedAnchorPoints';
import {
    SearchedAnchorPointsFromJSON,
    SearchedAnchorPointsFromJSONTyped,
    SearchedAnchorPointsToJSON,
    SearchedAnchorPointsToJSONTyped,
} from './SearchedAnchorPoints';

/**
 * This is used for the Anchors searching endpoint.
 * 
 * anchor here is only provided if transferables are set to true.
 * 
 * temporal: if this is provided this means that their material matched the input via a timestamp.
 * 
 * TODO will want to consider returning related materials to this material potentially both associated/ and not associated materials
 * ie suggestion: WorkstreamSuggestions
 * 
 * note: if we match a specific anchorPoint we will provide this as well.
 * @export
 * @interface SearchedAnchor
 */
export interface SearchedAnchor {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SearchedAnchor
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Anchor}
     * @memberof SearchedAnchor
     */
    anchor?: Anchor;
    /**
     * 
     * @type {SearchedAnchorPoints}
     * @memberof SearchedAnchor
     */
    points?: SearchedAnchorPoints;
    /**
     * 
     * @type {boolean}
     * @memberof SearchedAnchor
     */
    exact: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchedAnchor
     */
    similarity: number;
    /**
     * 
     * @type {boolean}
     * @memberof SearchedAnchor
     */
    temporal?: boolean;
    /**
     * This is the uuid of the anchor.
     * @type {string}
     * @memberof SearchedAnchor
     */
    identifier: string;
}

/**
 * Check if a given object implements the SearchedAnchor interface.
 */
export function instanceOfSearchedAnchor(value: object): value is SearchedAnchor {
    if (!('exact' in value) || value['exact'] === undefined) return false;
    if (!('similarity' in value) || value['similarity'] === undefined) return false;
    if (!('identifier' in value) || value['identifier'] === undefined) return false;
    return true;
}

export function SearchedAnchorFromJSON(json: any): SearchedAnchor {
    return SearchedAnchorFromJSONTyped(json, false);
}

export function SearchedAnchorFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchedAnchor {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'anchor': json['anchor'] == null ? undefined : AnchorFromJSON(json['anchor']),
        'points': json['points'] == null ? undefined : SearchedAnchorPointsFromJSON(json['points']),
        'exact': json['exact'],
        'similarity': json['similarity'],
        'temporal': json['temporal'] == null ? undefined : json['temporal'],
        'identifier': json['identifier'],
    };
}

export function SearchedAnchorToJSON(json: any): SearchedAnchor {
    return SearchedAnchorToJSONTyped(json, false);
}

export function SearchedAnchorToJSONTyped(value?: SearchedAnchor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'anchor': AnchorToJSON(value['anchor']),
        'points': SearchedAnchorPointsToJSON(value['points']),
        'exact': value['exact'],
        'similarity': value['similarity'],
        'temporal': value['temporal'],
        'identifier': value['identifier'],
    };
}

