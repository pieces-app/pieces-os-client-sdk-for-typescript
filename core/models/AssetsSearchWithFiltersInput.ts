/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { AssetSearchSpace } from './AssetSearchSpace';
import {
    AssetSearchSpaceFromJSON,
    AssetSearchSpaceFromJSONTyped,
    AssetSearchSpaceToJSON,
    AssetSearchSpaceToJSONTyped,
} from './AssetSearchSpace';
import type { AssetFilters } from './AssetFilters';
import {
    AssetFiltersFromJSON,
    AssetFiltersFromJSONTyped,
    AssetFiltersToJSON,
    AssetFiltersToJSONTyped,
} from './AssetFilters';

/**
 * 
 * @export
 * @interface AssetsSearchWithFiltersInput
 */
export interface AssetsSearchWithFiltersInput {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof AssetsSearchWithFiltersInput
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof AssetsSearchWithFiltersInput
     */
    query?: string;
    /**
     * 
     * @type {AssetSearchSpace}
     * @memberof AssetsSearchWithFiltersInput
     */
    space?: AssetSearchSpace;
    /**
     * 
     * @type {AssetFilters}
     * @memberof AssetsSearchWithFiltersInput
     */
    filters?: AssetFilters;
    /**
     * This is an optional bool that will let us know, if we want to ignore case or not.(default is to allow casing)ie casing:true.
     * @type {boolean}
     * @memberof AssetsSearchWithFiltersInput
     */
    casing?: boolean;
}

/**
 * Check if a given object implements the AssetsSearchWithFiltersInput interface.
 */
export function instanceOfAssetsSearchWithFiltersInput(value: object): value is AssetsSearchWithFiltersInput {
    return true;
}

export function AssetsSearchWithFiltersInputFromJSON(json: any): AssetsSearchWithFiltersInput {
    return AssetsSearchWithFiltersInputFromJSONTyped(json, false);
}

export function AssetsSearchWithFiltersInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssetsSearchWithFiltersInput {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'query': json['query'] == null ? undefined : json['query'],
        'space': json['space'] == null ? undefined : AssetSearchSpaceFromJSON(json['space']),
        'filters': json['filters'] == null ? undefined : AssetFiltersFromJSON(json['filters']),
        'casing': json['casing'] == null ? undefined : json['casing'],
    };
}

export function AssetsSearchWithFiltersInputToJSON(json: any): AssetsSearchWithFiltersInput {
    return AssetsSearchWithFiltersInputToJSONTyped(json, false);
}

export function AssetsSearchWithFiltersInputToJSONTyped(value?: AssetsSearchWithFiltersInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'query': value['query'],
        'space': AssetSearchSpaceToJSON(value['space']),
        'filters': AssetFiltersToJSON(value['filters']),
        'casing': value['casing'],
    };
}

