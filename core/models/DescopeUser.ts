/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Auth0OpenAIUserMetadata } from './Auth0OpenAIUserMetadata';
import {
    Auth0OpenAIUserMetadataFromJSON,
    Auth0OpenAIUserMetadataFromJSONTyped,
    Auth0OpenAIUserMetadataToJSON,
    Auth0OpenAIUserMetadataToJSONTyped,
} from './Auth0OpenAIUserMetadata';
import type { Auth0UserAllocationMetadata } from './Auth0UserAllocationMetadata';
import {
    Auth0UserAllocationMetadataFromJSON,
    Auth0UserAllocationMetadataFromJSONTyped,
    Auth0UserAllocationMetadataToJSON,
    Auth0UserAllocationMetadataToJSONTyped,
} from './Auth0UserAllocationMetadata';
import type { AnonymousTemporalRange } from './AnonymousTemporalRange';
import {
    AnonymousTemporalRangeFromJSON,
    AnonymousTemporalRangeFromJSONTyped,
    AnonymousTemporalRangeToJSON,
    AnonymousTemporalRangeToJSONTyped,
} from './AnonymousTemporalRange';

/**
 * An object representing all of the properties that are available within a DescopeUser
 * @export
 * @interface DescopeUser
 */
export interface DescopeUser {
    /**
     * 
     * @type {string}
     * @memberof DescopeUser
     */
    userId: string;
    /**
     * This is the user's global id
     * @type {string}
     * @memberof DescopeUser
     */
    id: string;
    /**
     * i.e Mark
     * @type {string}
     * @memberof DescopeUser
     */
    givenName: string;
    /**
     * i.e '' or Donald
     * @type {string}
     * @memberof DescopeUser
     */
    middleName?: string;
    /**
     * i.e Widman
     * @type {string}
     * @memberof DescopeUser
     */
    familyName: string;
    /**
     * i.e Mark Widman
     * @type {string}
     * @memberof DescopeUser
     */
    name?: string;
    /**
     * i.e brian.powell@pieces.app
     * @type {string}
     * @memberof DescopeUser
     */
    email: string;
    /**
     * a users phone number
     * @type {string}
     * @memberof DescopeUser
     */
    phone?: string;
    /**
     * the url of the users picture
     * @type {string}
     * @memberof DescopeUser
     */
    picture?: string;
    /**
     * 
     * @type {number}
     * @memberof DescopeUser
     */
    createdTime?: number;
    /**
     * these are the ids for the social providers ie google/github
     * @type {Array<string>}
     * @memberof DescopeUser
     */
    loginIds?: Array<string>;
    /**
     * these are all of the registered social providers
     * @type {Array<string>}
     * @memberof DescopeUser
     */
    oauth?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DescopeUser
     */
    isVerifiedEmail?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DescopeUser
     */
    status?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DescopeUser
     */
    welcomeEmail?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DescopeUser
     */
    vanity?: string;
    /**
     * 
     * @type {string}
     * @memberof DescopeUser
     */
    cloudKey?: string;
    /**
     * 
     * @type {Auth0UserAllocationMetadata}
     * @memberof DescopeUser
     */
    allocation?: Auth0UserAllocationMetadata;
    /**
     * 
     * @type {Auth0OpenAIUserMetadata}
     * @memberof DescopeUser
     */
    openAi?: Auth0OpenAIUserMetadata;
    /**
     * 
     * @type {AnonymousTemporalRange}
     * @memberof DescopeUser
     */
    beta?: AnonymousTemporalRange;
}


/**
 * Check if a given object implements the DescopeUser interface.
 */
export function instanceOfDescopeUser(value: object): value is DescopeUser {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('givenName' in value) || value['givenName'] === undefined) return false;
    if (!('familyName' in value) || value['familyName'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function DescopeUserFromJSON(json: any): DescopeUser {
    return DescopeUserFromJSONTyped(json, false);
}

export function DescopeUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): DescopeUser {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'id': json['id'],
        'givenName': json['givenName'],
        'middleName': json['middleName'] == null ? undefined : json['middleName'],
        'familyName': json['familyName'],
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'picture': json['picture'] == null ? undefined : json['picture'],
        'createdTime': json['createdTime'] == null ? undefined : json['createdTime'],
        'loginIds': json['loginIds'] == null ? undefined : json['loginIds'],
        'oauth': json['oauth'] == null ? undefined : json['oauth'],
        'isVerifiedEmail': json['isVerifiedEmail'] == null ? undefined : json['isVerifiedEmail'],
        'status': json['status'] == null ? undefined : json['status'],
        'welcomeEmail': json['welcome_email'] == null ? undefined : json['welcome_email'],
        'vanity': json['vanity'] == null ? undefined : json['vanity'],
        'cloudKey': json['cloud_key'] == null ? undefined : json['cloud_key'],
        'allocation': json['allocation'] == null ? undefined : Auth0UserAllocationMetadataFromJSON(json['allocation']),
        'openAi': json['open_ai'] == null ? undefined : Auth0OpenAIUserMetadataFromJSON(json['open_ai']),
        'beta': json['beta'] == null ? undefined : AnonymousTemporalRangeFromJSON(json['beta']),
    };
}

export function DescopeUserToJSON(json: any): DescopeUser {
    return DescopeUserToJSONTyped(json, false);
}

export function DescopeUserToJSONTyped(value?: DescopeUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'id': value['id'],
        'givenName': value['givenName'],
        'middleName': value['middleName'],
        'familyName': value['familyName'],
        'name': value['name'],
        'email': value['email'],
        'phone': value['phone'],
        'picture': value['picture'],
        'createdTime': value['createdTime'],
        'loginIds': value['loginIds'],
        'oauth': value['oauth'],
        'isVerifiedEmail': value['isVerifiedEmail'],
        'status': value['status'],
        'welcome_email': value['welcomeEmail'],
        'vanity': value['vanity'],
        'cloud_key': value['cloudKey'],
        'allocation': Auth0UserAllocationMetadataToJSON(value['allocation']),
        'open_ai': Auth0OpenAIUserMetadataToJSON(value['openAi']),
        'beta': AnonymousTemporalRangeToJSON(value['beta']),
    };
}

