/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Format } from './Format';
import {
    FormatFromJSON,
    FormatFromJSONTyped,
    FormatToJSON,
    FormatToJSONTyped,
} from './Format';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
    ModelToJSONTyped,
} from './Model';

/**
 * This is the data collected during the ocr analysis of an image.
 * @export
 * @interface OCRAnalysis
 */
export interface OCRAnalysis {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof OCRAnalysis
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof OCRAnalysis
     */
    id: string;
    /**
     * 
     * @type {Format}
     * @memberof OCRAnalysis
     */
    raw: Format;
    /**
     * 
     * @type {Format}
     * @memberof OCRAnalysis
     */
    hocr: Format;
    /**
     * this is a reference the the imageAnalysis.
     * @type {string}
     * @memberof OCRAnalysis
     */
    image: string;
    /**
     * 
     * @type {Model}
     * @memberof OCRAnalysis
     */
    model: Model;
}


/**
 * Check if a given object implements the OCRAnalysis interface.
 */
export function instanceOfOCRAnalysis(value: object): value is OCRAnalysis {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('raw' in value) || value['raw'] === undefined) return false;
    if (!('hocr' in value) || value['hocr'] === undefined) return false;
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    return true;
}

export function OCRAnalysisFromJSON(json: any): OCRAnalysis {
    return OCRAnalysisFromJSONTyped(json, false);
}

export function OCRAnalysisFromJSONTyped(json: any, ignoreDiscriminator: boolean): OCRAnalysis {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'raw': FormatFromJSON(json['raw']),
        'hocr': FormatFromJSON(json['hocr']),
        'image': json['image'],
        'model': ModelFromJSON(json['model']),
    };
}

export function OCRAnalysisToJSON(json: any): OCRAnalysis {
    return OCRAnalysisToJSONTyped(json, false);
}

export function OCRAnalysisToJSONTyped(value?: OCRAnalysis | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'raw': FormatToJSON(value['raw']),
        'hocr': FormatToJSON(value['hocr']),
        'image': value['image'],
        'model': ModelToJSON(value['model']),
    };
}

