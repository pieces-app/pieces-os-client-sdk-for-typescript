/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferencedFormat } from './ReferencedFormat';
import {
    ReferencedFormatFromJSON,
    ReferencedFormatFromJSONTyped,
    ReferencedFormatToJSON,
    ReferencedFormatToJSONTyped,
} from './ReferencedFormat';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a preview Model that will hold references to at minimum the base preview. which can be potentiall a base image, or also base text/code and then the oveylay is another format(image/text/code) that is 'overlayed' ontop of the base format.
 * @export
 * @interface Preview
 */
export interface Preview {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Preview
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ReferencedFormat}
     * @memberof Preview
     */
    base: ReferencedFormat;
    /**
     * 
     * @type {ReferencedFormat}
     * @memberof Preview
     */
    overlay?: ReferencedFormat;
}

/**
 * Check if a given object implements the Preview interface.
 */
export function instanceOfPreview(value: object): value is Preview {
    if (!('base' in value) || value['base'] === undefined) return false;
    return true;
}

export function PreviewFromJSON(json: any): Preview {
    return PreviewFromJSONTyped(json, false);
}

export function PreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): Preview {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'base': ReferencedFormatFromJSON(json['base']),
        'overlay': json['overlay'] == null ? undefined : ReferencedFormatFromJSON(json['overlay']),
    };
}

export function PreviewToJSON(json: any): Preview {
    return PreviewToJSONTyped(json, false);
}

export function PreviewToJSONTyped(value?: Preview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'base': ReferencedFormatToJSON(value['base']),
        'overlay': ReferencedFormatToJSON(value['overlay']),
    };
}

