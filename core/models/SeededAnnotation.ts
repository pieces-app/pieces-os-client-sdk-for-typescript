/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
    FlattenedConversationsToJSONTyped,
} from './FlattenedConversations';
import type { FlattenedTags } from './FlattenedTags';
import {
    FlattenedTagsFromJSON,
    FlattenedTagsFromJSONTyped,
    FlattenedTagsToJSON,
    FlattenedTagsToJSONTyped,
} from './FlattenedTags';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
    FlattenedWebsitesToJSONTyped,
} from './FlattenedWebsites';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
    FlattenedWorkstreamSummariesToJSONTyped,
} from './FlattenedWorkstreamSummaries';
import type { FlattenedWorkstreamEvents } from './FlattenedWorkstreamEvents';
import {
    FlattenedWorkstreamEventsFromJSON,
    FlattenedWorkstreamEventsFromJSONTyped,
    FlattenedWorkstreamEventsToJSON,
    FlattenedWorkstreamEventsToJSONTyped,
} from './FlattenedWorkstreamEvents';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedAssetsToJSONTyped,
} from './FlattenedAssets';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
    FlattenedConversationMessagesToJSONTyped,
} from './FlattenedConversationMessages';
import type { AnnotationTypeEnum } from './AnnotationTypeEnum';
import {
    AnnotationTypeEnumFromJSON,
    AnnotationTypeEnumFromJSONTyped,
    AnnotationTypeEnumToJSON,
    AnnotationTypeEnumToJSONTyped,
} from './AnnotationTypeEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    MechanismEnumToJSONTyped,
} from './MechanismEnum';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
    FlattenedPersonsToJSONTyped,
} from './FlattenedPersons';
import type { FlattenedAnchors } from './FlattenedAnchors';
import {
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
    FlattenedAnchorsToJSONTyped,
} from './FlattenedAnchors';

/**
 * This is the percursor to a fully referenced Annotation.
 * @export
 * @interface SeededAnnotation
 */
export interface SeededAnnotation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededAnnotation
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof SeededAnnotation
     */
    mechanism?: MechanismEnum;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    asset?: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    person?: string;
    /**
     * 
     * @type {AnnotationTypeEnum}
     * @memberof SeededAnnotation
     */
    type: AnnotationTypeEnum;
    /**
     * This is the text of the annotation.
     * @type {string}
     * @memberof SeededAnnotation
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    model?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeededAnnotation
     */
    pseudo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeededAnnotation
     */
    favorited?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    anchor?: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    conversation?: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    workstreamSummary?: string;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof SeededAnnotation
     */
    messages?: FlattenedConversationMessages;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof SeededAnnotation
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof SeededAnnotation
     */
    persons?: FlattenedPersons;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof SeededAnnotation
     */
    anchors?: FlattenedAnchors;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof SeededAnnotation
     */
    conversations?: FlattenedConversations;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof SeededAnnotation
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {FlattenedTags}
     * @memberof SeededAnnotation
     */
    tags?: FlattenedTags;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof SeededAnnotation
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedWorkstreamEvents}
     * @memberof SeededAnnotation
     */
    workstreamEvents?: FlattenedWorkstreamEvents;
}



/**
 * Check if a given object implements the SeededAnnotation interface.
 */
export function instanceOfSeededAnnotation(value: object): value is SeededAnnotation {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function SeededAnnotationFromJSON(json: any): SeededAnnotation {
    return SeededAnnotationFromJSONTyped(json, false);
}

export function SeededAnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededAnnotation {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'mechanism': json['mechanism'] == null ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'asset': json['asset'] == null ? undefined : json['asset'],
        'person': json['person'] == null ? undefined : json['person'],
        'type': AnnotationTypeEnumFromJSON(json['type']),
        'text': json['text'],
        'model': json['model'] == null ? undefined : json['model'],
        'pseudo': json['pseudo'] == null ? undefined : json['pseudo'],
        'favorited': json['favorited'] == null ? undefined : json['favorited'],
        'anchor': json['anchor'] == null ? undefined : json['anchor'],
        'conversation': json['conversation'] == null ? undefined : json['conversation'],
        'workstreamSummary': json['workstream_summary'] == null ? undefined : json['workstream_summary'],
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'persons': json['persons'] == null ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'anchors': json['anchors'] == null ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
        'conversations': json['conversations'] == null ? undefined : FlattenedConversationsFromJSON(json['conversations']),
        'websites': json['websites'] == null ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'tags': json['tags'] == null ? undefined : FlattenedTagsFromJSON(json['tags']),
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'workstreamEvents': json['workstream_events'] == null ? undefined : FlattenedWorkstreamEventsFromJSON(json['workstream_events']),
    };
}

export function SeededAnnotationToJSON(json: any): SeededAnnotation {
    return SeededAnnotationToJSONTyped(json, false);
}

export function SeededAnnotationToJSONTyped(value?: SeededAnnotation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'asset': value['asset'],
        'person': value['person'],
        'type': AnnotationTypeEnumToJSON(value['type']),
        'text': value['text'],
        'model': value['model'],
        'pseudo': value['pseudo'],
        'favorited': value['favorited'],
        'anchor': value['anchor'],
        'conversation': value['conversation'],
        'workstream_summary': value['workstreamSummary'],
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
        'assets': FlattenedAssetsToJSON(value['assets']),
        'persons': FlattenedPersonsToJSON(value['persons']),
        'anchors': FlattenedAnchorsToJSON(value['anchors']),
        'conversations': FlattenedConversationsToJSON(value['conversations']),
        'websites': FlattenedWebsitesToJSON(value['websites']),
        'tags': FlattenedTagsToJSON(value['tags']),
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'workstream_events': FlattenedWorkstreamEventsToJSON(value['workstreamEvents']),
    };
}

