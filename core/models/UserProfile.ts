/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExternalProviders } from './ExternalProviders';
import {
    ExternalProvidersFromJSON,
    ExternalProvidersFromJSONTyped,
    ExternalProvidersToJSON,
    ExternalProvidersToJSONTyped,
} from './ExternalProviders';
import type { Auth0UserMetadata } from './Auth0UserMetadata';
import {
    Auth0UserMetadataFromJSON,
    Auth0UserMetadataFromJSONTyped,
    Auth0UserMetadataToJSON,
    Auth0UserMetadataToJSONTyped,
} from './Auth0UserMetadata';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { AllocationCloud } from './AllocationCloud';
import {
    AllocationCloudFromJSON,
    AllocationCloudFromJSONTyped,
    AllocationCloudToJSON,
    AllocationCloudToJSONTyped,
} from './AllocationCloud';
import type { Aesthetics } from './Aesthetics';
import {
    AestheticsFromJSON,
    AestheticsFromJSONTyped,
    AestheticsToJSON,
    AestheticsToJSONTyped,
} from './Aesthetics';
import type { DescopeUserMetadata } from './DescopeUserMetadata';
import {
    DescopeUserMetadataFromJSON,
    DescopeUserMetadataFromJSONTyped,
    DescopeUserMetadataToJSON,
    DescopeUserMetadataToJSONTyped,
} from './DescopeUserMetadata';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';

/**
 * This is the model for a user logged into Pieces.
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof UserProfile
     */
    schema?: EmbeddedModelSchema;
    /**
     * mapped from picture.URL pointing to the user's profile picture. 
     * @type {string}
     * @memberof UserProfile
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email?: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof UserProfile
     */
    created?: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof UserProfile
     */
    updated?: GroupedTimestamp;
    /**
     * 	(unique) User's username.
     * 	
     * @type {string}
     * @memberof UserProfile
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    id: string;
    /**
     * This is the name of the User.
     * @type {string}
     * @memberof UserProfile
     */
    name?: string;
    /**
     * 
     * @type {Aesthetics}
     * @memberof UserProfile
     */
    aesthetics: Aesthetics;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    vanityname?: string;
    /**
     * 
     * @type {AllocationCloud}
     * @memberof UserProfile
     */
    allocation?: AllocationCloud;
    /**
     * 
     * @type {ExternalProviders}
     * @memberof UserProfile
     */
    providers?: ExternalProviders;
    /**
     * 
     * @type {Auth0UserMetadata}
     * @memberof UserProfile
     */
    auth0?: Auth0UserMetadata;
    /**
     * 
     * @type {DescopeUserMetadata}
     * @memberof UserProfile
     */
    descope?: DescopeUserMetadata;
}


/**
 * Check if a given object implements the UserProfile interface.
 */
export function instanceOfUserProfile(value: object): value is UserProfile {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('aesthetics' in value) || value['aesthetics'] === undefined) return false;
    return true;
}

export function UserProfileFromJSON(json: any): UserProfile {
    return UserProfileFromJSONTyped(json, false);
}

export function UserProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserProfile {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'picture': json['picture'] == null ? undefined : json['picture'],
        'email': json['email'] == null ? undefined : json['email'],
        'created': json['created'] == null ? undefined : GroupedTimestampFromJSON(json['created']),
        'updated': json['updated'] == null ? undefined : GroupedTimestampFromJSON(json['updated']),
        'username': json['username'] == null ? undefined : json['username'],
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'aesthetics': AestheticsFromJSON(json['aesthetics']),
        'vanityname': json['vanityname'] == null ? undefined : json['vanityname'],
        'allocation': json['allocation'] == null ? undefined : AllocationCloudFromJSON(json['allocation']),
        'providers': json['providers'] == null ? undefined : ExternalProvidersFromJSON(json['providers']),
        'auth0': json['auth0'] == null ? undefined : Auth0UserMetadataFromJSON(json['auth0']),
        'descope': json['descope'] == null ? undefined : DescopeUserMetadataFromJSON(json['descope']),
    };
}

export function UserProfileToJSON(json: any): UserProfile {
    return UserProfileToJSONTyped(json, false);
}

export function UserProfileToJSONTyped(value?: UserProfile | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'picture': value['picture'],
        'email': value['email'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'username': value['username'],
        'id': value['id'],
        'name': value['name'],
        'aesthetics': AestheticsToJSON(value['aesthetics']),
        'vanityname': value['vanityname'],
        'allocation': AllocationCloudToJSON(value['allocation']),
        'providers': ExternalProvidersToJSON(value['providers']),
        'auth0': Auth0UserMetadataToJSON(value['auth0']),
        'descope': DescopeUserMetadataToJSON(value['descope']),
    };
}

