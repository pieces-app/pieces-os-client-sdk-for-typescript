/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { TextLocation } from './TextLocation';
import {
    TextLocationFromJSON,
    TextLocationFromJSONTyped,
    TextLocationToJSON,
    TextLocationToJSONTyped,
} from './TextLocation';

/**
 * Thext Match currently used for sensitive for scales for people, and anything related to text matching.
 * 
 * group: is the entire match
 * subgroup is the inner match within the group.(optional)
 * @export
 * @interface TextMatch
 */
export interface TextMatch {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TextMatch
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {TextLocation}
     * @memberof TextMatch
     */
    group: TextLocation;
    /**
     * 
     * @type {TextLocation}
     * @memberof TextMatch
     */
    subgroup?: TextLocation;
}


/**
 * Check if a given object implements the TextMatch interface.
 */
export function instanceOfTextMatch(value: object): value is TextMatch {
    if (!('group' in value) || value['group'] === undefined) return false;
    return true;
}

export function TextMatchFromJSON(json: any): TextMatch {
    return TextMatchFromJSONTyped(json, false);
}

export function TextMatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextMatch {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'group': TextLocationFromJSON(json['group']),
        'subgroup': json['subgroup'] == null ? undefined : TextLocationFromJSON(json['subgroup']),
    };
}

export function TextMatchToJSON(json: any): TextMatch {
    return TextMatchToJSONTyped(json, false);
}

export function TextMatchToJSONTyped(value?: TextMatch | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'group': TextLocationToJSON(value['group']),
        'subgroup': TextLocationToJSON(value['subgroup']),
    };
}

