/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LanguageServerProtocolLocationRange } from './LanguageServerProtocolLocationRange';
import {
    LanguageServerProtocolLocationRangeFromJSON,
    LanguageServerProtocolLocationRangeFromJSONTyped,
    LanguageServerProtocolLocationRangeToJSON,
    LanguageServerProtocolLocationRangeToJSONTyped,
} from './LanguageServerProtocolLocationRange';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * modeled after this (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#location)
 * 
 * uri: is jsut a file path
 * 
 * range: here is the location of where this item is within the file.
 * @export
 * @interface LanguageServerProtocolLocation
 */
export interface LanguageServerProtocolLocation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof LanguageServerProtocolLocation
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof LanguageServerProtocolLocation
     */
    uri: string;
    /**
     * 
     * @type {LanguageServerProtocolLocationRange}
     * @memberof LanguageServerProtocolLocation
     */
    range: LanguageServerProtocolLocationRange;
}

/**
 * Check if a given object implements the LanguageServerProtocolLocation interface.
 */
export function instanceOfLanguageServerProtocolLocation(value: object): value is LanguageServerProtocolLocation {
    if (!('uri' in value) || value['uri'] === undefined) return false;
    if (!('range' in value) || value['range'] === undefined) return false;
    return true;
}

export function LanguageServerProtocolLocationFromJSON(json: any): LanguageServerProtocolLocation {
    return LanguageServerProtocolLocationFromJSONTyped(json, false);
}

export function LanguageServerProtocolLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): LanguageServerProtocolLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'uri': json['uri'],
        'range': LanguageServerProtocolLocationRangeFromJSON(json['range']),
    };
}

export function LanguageServerProtocolLocationToJSON(json: any): LanguageServerProtocolLocation {
    return LanguageServerProtocolLocationToJSONTyped(json, false);
}

export function LanguageServerProtocolLocationToJSONTyped(value?: LanguageServerProtocolLocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'uri': value['uri'],
        'range': LanguageServerProtocolLocationRangeToJSON(value['range']),
    };
}

