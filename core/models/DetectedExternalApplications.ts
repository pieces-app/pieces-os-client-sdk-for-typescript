/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { DetectedExternalApplication } from './DetectedExternalApplication';
import {
    DetectedExternalApplicationFromJSON,
    DetectedExternalApplicationFromJSONTyped,
    DetectedExternalApplicationToJSON,
    DetectedExternalApplicationToJSONTyped,
} from './DetectedExternalApplication';

/**
 * This is used as the returnable for the /applications/external && /applications/external/related endpoints.
 * 
 * This will return an iterable of Deteched Application a detected Application is an application that is currently installed on your machine.
 * 
 * the /applications/external/related endpoint, will return a subset of the applications returned mainly applications that we detect are Pieces Applications that you have yet to install + names of applications where Pieces is coming soon.
 * @export
 * @interface DetectedExternalApplications
 */
export interface DetectedExternalApplications {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof DetectedExternalApplications
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<DetectedExternalApplication>}
     * @memberof DetectedExternalApplications
     */
    iterable: Array<DetectedExternalApplication>;
}


/**
 * Check if a given object implements the DetectedExternalApplications interface.
 */
export function instanceOfDetectedExternalApplications(value: object): value is DetectedExternalApplications {
    if (!('iterable' in value) || value['iterable'] === undefined) return false;
    return true;
}

export function DetectedExternalApplicationsFromJSON(json: any): DetectedExternalApplications {
    return DetectedExternalApplicationsFromJSONTyped(json, false);
}

export function DetectedExternalApplicationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetectedExternalApplications {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(DetectedExternalApplicationFromJSON)),
    };
}

export function DetectedExternalApplicationsToJSON(json: any): DetectedExternalApplications {
    return DetectedExternalApplicationsToJSONTyped(json, false);
}

export function DetectedExternalApplicationsToJSONTyped(value?: DetectedExternalApplications | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'iterable': ((value['iterable'] as Array<any>).map(DetectedExternalApplicationToJSON)),
    };
}

