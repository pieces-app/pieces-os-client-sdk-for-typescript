/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { ByteDescriptor } from './ByteDescriptor';
import {
    ByteDescriptorFromJSON,
    ByteDescriptorFromJSONTyped,
    ByteDescriptorToJSON,
    ByteDescriptorToJSONTyped,
} from './ByteDescriptor';

/**
 * This will return is the given path was verified/ or it was invalid.
 * 
 * and if it is valid if it is a file/folder
 * 
 * note: file/directory are both null.
 * @export
 * @interface VerifiedOSFilesystemPath
 */
export interface VerifiedOSFilesystemPath {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof VerifiedOSFilesystemPath
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof VerifiedOSFilesystemPath
     */
    path: string;
    /**
     * 
     * @type {boolean}
     * @memberof VerifiedOSFilesystemPath
     */
    file?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifiedOSFilesystemPath
     */
    directory?: boolean;
    /**
     * This means if the path(file/folder) exists on the machine.
     * @type {boolean}
     * @memberof VerifiedOSFilesystemPath
     */
    verified: boolean;
    /**
     * This means that attempting to access the file was not aloud(ie no permission)
     * @type {boolean}
     * @memberof VerifiedOSFilesystemPath
     */
    denied?: boolean;
    /**
     * 
     * @type {ByteDescriptor}
     * @memberof VerifiedOSFilesystemPath
     */
    bytes?: ByteDescriptor;
}


/**
 * Check if a given object implements the VerifiedOSFilesystemPath interface.
 */
export function instanceOfVerifiedOSFilesystemPath(value: object): value is VerifiedOSFilesystemPath {
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('verified' in value) || value['verified'] === undefined) return false;
    return true;
}

export function VerifiedOSFilesystemPathFromJSON(json: any): VerifiedOSFilesystemPath {
    return VerifiedOSFilesystemPathFromJSONTyped(json, false);
}

export function VerifiedOSFilesystemPathFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerifiedOSFilesystemPath {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'path': json['path'],
        'file': json['file'] == null ? undefined : json['file'],
        'directory': json['directory'] == null ? undefined : json['directory'],
        'verified': json['verified'],
        'denied': json['denied'] == null ? undefined : json['denied'],
        'bytes': json['bytes'] == null ? undefined : ByteDescriptorFromJSON(json['bytes']),
    };
}

export function VerifiedOSFilesystemPathToJSON(json: any): VerifiedOSFilesystemPath {
    return VerifiedOSFilesystemPathToJSONTyped(json, false);
}

export function VerifiedOSFilesystemPathToJSONTyped(value?: VerifiedOSFilesystemPath | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'path': value['path'],
        'file': value['file'],
        'directory': value['directory'],
        'verified': value['verified'],
        'denied': value['denied'],
        'bytes': ByteDescriptorToJSON(value['bytes']),
    };
}

