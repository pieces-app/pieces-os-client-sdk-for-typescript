/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * This is used to map the types of the iterable to given booleans of their respective material types
 * @export
 * @interface WorkstreamSuggestionType
 */
export interface WorkstreamSuggestionType {
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    schema?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    summary?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    asset?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    tag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    website?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    anchor?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    conversation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    person?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    seed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    seeds?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    summaries?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    assets?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    tags?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    websites?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    anchors?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    conversations?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    persons?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    annotation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    annotations?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    conversationMessage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    conversationMessages?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    hint?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    hints?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    sensitive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    sensitives?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    source?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    sources?: boolean;
}


/**
 * Check if a given object implements the WorkstreamSuggestionType interface.
 */
export function instanceOfWorkstreamSuggestionType(value: object): value is WorkstreamSuggestionType {
    return true;
}

export function WorkstreamSuggestionTypeFromJSON(json: any): WorkstreamSuggestionType {
    return WorkstreamSuggestionTypeFromJSONTyped(json, false);
}

export function WorkstreamSuggestionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamSuggestionType {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : json['schema'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'asset': json['asset'] == null ? undefined : json['asset'],
        'tag': json['tag'] == null ? undefined : json['tag'],
        'website': json['website'] == null ? undefined : json['website'],
        'anchor': json['anchor'] == null ? undefined : json['anchor'],
        'conversation': json['conversation'] == null ? undefined : json['conversation'],
        'person': json['person'] == null ? undefined : json['person'],
        'seed': json['seed'] == null ? undefined : json['seed'],
        'seeds': json['seeds'] == null ? undefined : json['seeds'],
        'summaries': json['summaries'] == null ? undefined : json['summaries'],
        'assets': json['assets'] == null ? undefined : json['assets'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'websites': json['websites'] == null ? undefined : json['websites'],
        'anchors': json['anchors'] == null ? undefined : json['anchors'],
        'conversations': json['conversations'] == null ? undefined : json['conversations'],
        'persons': json['persons'] == null ? undefined : json['persons'],
        'annotation': json['annotation'] == null ? undefined : json['annotation'],
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'conversationMessage': json['conversationMessage'] == null ? undefined : json['conversationMessage'],
        'conversationMessages': json['conversationMessages'] == null ? undefined : json['conversationMessages'],
        'hint': json['hint'] == null ? undefined : json['hint'],
        'hints': json['hints'] == null ? undefined : json['hints'],
        'sensitive': json['sensitive'] == null ? undefined : json['sensitive'],
        'sensitives': json['sensitives'] == null ? undefined : json['sensitives'],
        'source': json['source'] == null ? undefined : json['source'],
        'sources': json['sources'] == null ? undefined : json['sources'],
    };
}

export function WorkstreamSuggestionTypeToJSON(json: any): WorkstreamSuggestionType {
    return WorkstreamSuggestionTypeToJSONTyped(json, false);
}

export function WorkstreamSuggestionTypeToJSONTyped(value?: WorkstreamSuggestionType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': value['schema'],
        'summary': value['summary'],
        'asset': value['asset'],
        'tag': value['tag'],
        'website': value['website'],
        'anchor': value['anchor'],
        'conversation': value['conversation'],
        'person': value['person'],
        'seed': value['seed'],
        'seeds': value['seeds'],
        'summaries': value['summaries'],
        'assets': value['assets'],
        'tags': value['tags'],
        'websites': value['websites'],
        'anchors': value['anchors'],
        'conversations': value['conversations'],
        'persons': value['persons'],
        'annotation': value['annotation'],
        'annotations': value['annotations'],
        'conversationMessage': value['conversationMessage'],
        'conversationMessages': value['conversationMessages'],
        'hint': value['hint'],
        'hints': value['hints'],
        'sensitive': value['sensitive'],
        'sensitives': value['sensitives'],
        'source': value['source'],
        'sources': value['sources'],
    };
}

