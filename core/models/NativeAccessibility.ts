/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a specific model to encapsulate NativeAccessibility data from the LTM(used within the WorkstreamEvent.
 * @export
 * @interface NativeAccessibility
 */
export interface NativeAccessibility {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof NativeAccessibility
     */
    schema?: EmbeddedModelSchema;
    /**
     * The accessibility text extracted.
     * @type {string}
     * @memberof NativeAccessibility
     */
    accessibilityText: string;
    /**
     * The title of the application.
     * @type {string}
     * @memberof NativeAccessibility
     */
    appTitle: string;
    /**
     * The title of the window.
     * @type {string}
     * @memberof NativeAccessibility
     */
    windowTitle: string;
    /**
     * The URL of the browser.
     * @type {string}
     * @memberof NativeAccessibility
     */
    browserUrl?: string;
    /**
     * Indicates whether the workflow mapping is merged.
     * @type {boolean}
     * @memberof NativeAccessibility
     */
    isMerged: boolean;
    /**
     * Indicates whether the workflow mapping is cached.
     * @type {boolean}
     * @memberof NativeAccessibility
     */
    isCached: boolean;
}

/**
 * Check if a given object implements the NativeAccessibility interface.
 */
export function instanceOfNativeAccessibility(value: object): value is NativeAccessibility {
    if (!('accessibilityText' in value) || value['accessibilityText'] === undefined) return false;
    if (!('appTitle' in value) || value['appTitle'] === undefined) return false;
    if (!('windowTitle' in value) || value['windowTitle'] === undefined) return false;
    if (!('isMerged' in value) || value['isMerged'] === undefined) return false;
    if (!('isCached' in value) || value['isCached'] === undefined) return false;
    return true;
}

export function NativeAccessibilityFromJSON(json: any): NativeAccessibility {
    return NativeAccessibilityFromJSONTyped(json, false);
}

export function NativeAccessibilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): NativeAccessibility {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'accessibilityText': json['accessibilityText'],
        'appTitle': json['appTitle'],
        'windowTitle': json['windowTitle'],
        'browserUrl': json['browserUrl'] == null ? undefined : json['browserUrl'],
        'isMerged': json['isMerged'],
        'isCached': json['isCached'],
    };
}

export function NativeAccessibilityToJSON(json: any): NativeAccessibility {
    return NativeAccessibilityToJSONTyped(json, false);
}

export function NativeAccessibilityToJSONTyped(value?: NativeAccessibility | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'accessibilityText': value['accessibilityText'],
        'appTitle': value['appTitle'],
        'windowTitle': value['windowTitle'],
        'browserUrl': value['browserUrl'],
        'isMerged': value['isMerged'],
        'isCached': value['isCached'],
    };
}

