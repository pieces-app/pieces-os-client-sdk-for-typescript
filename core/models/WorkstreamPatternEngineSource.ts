/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';

/**
 * This is a specific model for a given WPE qdrant source.
 * 
 * note: application is optional b/c we may want a network sorce in the future
 * TODO: think about adding an enum or something that will delimit the type of processor(vision/filewatcher/network/audio)
 * 
 * TODO: in the future we can add tabs/filepaths to this model here.
 * TODO: Enum for source/processor ? i.e. WorkstreamPatternEngineProcessorEnum.VISION, WorkstreamPatternEngineProcessorEnum.NETWORK, WorkstreamPatternEngineProcessorEnum.FILE_IO, WorkstreamPatternEngineProcessorEnum.AUDIO, etc.
 * 
 * NOTE: if all three are null we will thro an error.
 * @export
 * @interface WorkstreamPatternEngineSource
 */
export interface WorkstreamPatternEngineSource {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof WorkstreamPatternEngineSource
     */
    schema?: EmbeddedModelSchema;
    /**
     * THIS IS DEPRECATED WILL NOT BE USED
     * @type {string}
     * @memberof WorkstreamPatternEngineSource
     * @deprecated
     */
    name?: string;
    /**
     * This is the name of the tab or open file
     * @type {string}
     * @memberof WorkstreamPatternEngineSource
     */
    window?: string;
    /**
     * This is a url that was extracted from the WPE data.
     * @type {string}
     * @memberof WorkstreamPatternEngineSource
     */
    url?: string;
    /**
     * This is the name of the window(foreground window)/application.(this will always be present)
     * @type {string}
     * @memberof WorkstreamPatternEngineSource
     */
    application?: string;
    /**
     * This is the path is which this application download location is (NOTE, not being used quite yet)
     * @type {string}
     * @memberof WorkstreamPatternEngineSource
     */
    installation?: string;
}


/**
 * Check if a given object implements the WorkstreamPatternEngineSource interface.
 */
export function instanceOfWorkstreamPatternEngineSource(value: object): value is WorkstreamPatternEngineSource {
    return true;
}

export function WorkstreamPatternEngineSourceFromJSON(json: any): WorkstreamPatternEngineSource {
    return WorkstreamPatternEngineSourceFromJSONTyped(json, false);
}

export function WorkstreamPatternEngineSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamPatternEngineSource {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'name': json['name'] == null ? undefined : json['name'],
        'window': json['window'] == null ? undefined : json['window'],
        'url': json['url'] == null ? undefined : json['url'],
        'application': json['application'] == null ? undefined : json['application'],
        'installation': json['installation'] == null ? undefined : json['installation'],
    };
}

export function WorkstreamPatternEngineSourceToJSON(json: any): WorkstreamPatternEngineSource {
    return WorkstreamPatternEngineSourceToJSONTyped(json, false);
}

export function WorkstreamPatternEngineSourceToJSONTyped(value?: WorkstreamPatternEngineSource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'name': value['name'],
        'window': value['window'],
        'url': value['url'],
        'application': value['application'],
        'installation': value['installation'],
    };
}

