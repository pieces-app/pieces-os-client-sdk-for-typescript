/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedTags } from './FlattenedTags';
import {
    FlattenedTagsFromJSON,
    FlattenedTagsFromJSONTyped,
    FlattenedTagsToJSON,
    FlattenedTagsToJSONTyped,
} from './FlattenedTags';
import type { FlattenedAnnotations } from './FlattenedAnnotations';
import {
    FlattenedAnnotationsFromJSON,
    FlattenedAnnotationsFromJSONTyped,
    FlattenedAnnotationsToJSON,
    FlattenedAnnotationsToJSONTyped,
} from './FlattenedAnnotations';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { FlattenedFormats } from './FlattenedFormats';
import {
    FlattenedFormatsFromJSON,
    FlattenedFormatsFromJSONTyped,
    FlattenedFormatsToJSON,
    FlattenedFormatsToJSONTyped,
} from './FlattenedFormats';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    GroupedTimestampToJSONTyped,
} from './GroupedTimestamp';
import type { FlattenedHints } from './FlattenedHints';
import {
    FlattenedHintsFromJSON,
    FlattenedHintsFromJSONTyped,
    FlattenedHintsToJSON,
    FlattenedHintsToJSONTyped,
} from './FlattenedHints';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
    FlattenedConversationsToJSONTyped,
} from './FlattenedConversations';
import type { FlattenedShares } from './FlattenedShares';
import {
    FlattenedSharesFromJSON,
    FlattenedSharesFromJSONTyped,
    FlattenedSharesToJSON,
    FlattenedSharesToJSONTyped,
} from './FlattenedShares';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
    FlattenedWebsitesToJSONTyped,
} from './FlattenedWebsites';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
    FlattenedWorkstreamSummariesToJSONTyped,
} from './FlattenedWorkstreamSummaries';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    ScoreToJSONTyped,
} from './Score';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
    FlattenedConversationMessagesToJSONTyped,
} from './FlattenedConversationMessages';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    MechanismEnumToJSONTyped,
} from './MechanismEnum';
import type { FlattenedActivities } from './FlattenedActivities';
import {
    FlattenedActivitiesFromJSON,
    FlattenedActivitiesFromJSONTyped,
    FlattenedActivitiesToJSON,
    FlattenedActivitiesToJSONTyped,
} from './FlattenedActivities';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
    FlattenedPersonsToJSONTyped,
} from './FlattenedPersons';
import type { FlattenedSensitives } from './FlattenedSensitives';
import {
    FlattenedSensitivesFromJSON,
    FlattenedSensitivesFromJSONTyped,
    FlattenedSensitivesToJSON,
    FlattenedSensitivesToJSONTyped,
} from './FlattenedSensitives';
import type { FlattenedAnchors } from './FlattenedAnchors';
import {
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
    FlattenedAnchorsToJSONTyped,
} from './FlattenedAnchors';
import type { FlattenedPreview } from './FlattenedPreview';
import {
    FlattenedPreviewFromJSON,
    FlattenedPreviewFromJSONTyped,
    FlattenedPreviewToJSON,
    FlattenedPreviewToJSONTyped,
} from './FlattenedPreview';

/**
 * An Asset Model representing data extracted from an Application connecting a group of data containing one or more Formats. [DAG Compatible - Directed Acyclic Graph Data Structure]
 * 
 * FlattenedAsset prevent Cycles in Reference because all outbound references are strings as opposed to crosspollinated objects.
 * 
 * i.e. FlattenedFormat.preview is Type String, and
 * FlattenedFormat.original is Type String
 * @export
 * @interface FlattenedAsset
 */
export interface FlattenedAsset {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedAsset
     */
    schema?: EmbeddedModelSchema;
    /**
     * The globally available UID representing the asset in the Database, both locally and in the cloud.
     * @type {string}
     * @memberof FlattenedAsset
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FlattenedAsset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FlattenedAsset
     */
    creator: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedAsset
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedAsset
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedAsset
     */
    synced?: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedAsset
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {FlattenedFormats}
     * @memberof FlattenedAsset
     */
    formats: FlattenedFormats;
    /**
     * 
     * @type {FlattenedPreview}
     * @memberof FlattenedAsset
     */
    preview: FlattenedPreview;
    /**
     * An identifier of the format that is a reference to the original.
     * @type {string}
     * @memberof FlattenedAsset
     */
    original: string;
    /**
     * 
     * @type {FlattenedShares}
     * @memberof FlattenedAsset
     */
    shares?: FlattenedShares;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof FlattenedAsset
     */
    mechanism: MechanismEnum;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof FlattenedAsset
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedAsset
     */
    interacted?: GroupedTimestamp;
    /**
     * 
     * @type {FlattenedTags}
     * @memberof FlattenedAsset
     */
    tags?: FlattenedTags;
    /**
     * 
     * @type {FlattenedSensitives}
     * @memberof FlattenedAsset
     */
    sensitives?: FlattenedSensitives;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof FlattenedAsset
     */
    persons?: FlattenedPersons;
    /**
     * This is an optional boolean that will flag that this asset came from a currated collection.
     * @type {boolean}
     * @memberof FlattenedAsset
     */
    curated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FlattenedAsset
     */
    discovered?: boolean;
    /**
     * 
     * @type {FlattenedActivities}
     * @memberof FlattenedAsset
     */
    activities?: FlattenedActivities;
    /**
     * 
     * @type {Score}
     * @memberof FlattenedAsset
     */
    score?: Score;
    /**
     * 
     * @type {boolean}
     * @memberof FlattenedAsset
     */
    favorited?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FlattenedAsset
     */
    pseudo?: boolean;
    /**
     * 
     * @type {FlattenedAnnotations}
     * @memberof FlattenedAsset
     */
    annotations?: FlattenedAnnotations;
    /**
     * 
     * @type {FlattenedHints}
     * @memberof FlattenedAsset
     */
    hints?: FlattenedHints;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof FlattenedAsset
     */
    anchors?: FlattenedAnchors;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof FlattenedAsset
     */
    conversations?: FlattenedConversations;
    /**
     * This will let us know if this asset was generated as a 'demo' snippet
     * @type {boolean}
     * @memberof FlattenedAsset
     */
    demo?: boolean;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof FlattenedAsset
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof FlattenedAsset
     */
    messages?: FlattenedConversationMessages;
}


/**
 * Check if a given object implements the FlattenedAsset interface.
 */
export function instanceOfFlattenedAsset(value: object): value is FlattenedAsset {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creator' in value) || value['creator'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('formats' in value) || value['formats'] === undefined) return false;
    if (!('preview' in value) || value['preview'] === undefined) return false;
    if (!('original' in value) || value['original'] === undefined) return false;
    if (!('mechanism' in value) || value['mechanism'] === undefined) return false;
    return true;
}

export function FlattenedAssetFromJSON(json: any): FlattenedAsset {
    return FlattenedAssetFromJSONTyped(json, false);
}

export function FlattenedAssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedAsset {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'creator': json['creator'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'synced': json['synced'] == null ? undefined : GroupedTimestampFromJSON(json['synced']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'formats': FlattenedFormatsFromJSON(json['formats']),
        'preview': FlattenedPreviewFromJSON(json['preview']),
        'original': json['original'],
        'shares': json['shares'] == null ? undefined : FlattenedSharesFromJSON(json['shares']),
        'mechanism': MechanismEnumFromJSON(json['mechanism']),
        'websites': json['websites'] == null ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'interacted': json['interacted'] == null ? undefined : GroupedTimestampFromJSON(json['interacted']),
        'tags': json['tags'] == null ? undefined : FlattenedTagsFromJSON(json['tags']),
        'sensitives': json['sensitives'] == null ? undefined : FlattenedSensitivesFromJSON(json['sensitives']),
        'persons': json['persons'] == null ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'curated': json['curated'] == null ? undefined : json['curated'],
        'discovered': json['discovered'] == null ? undefined : json['discovered'],
        'activities': json['activities'] == null ? undefined : FlattenedActivitiesFromJSON(json['activities']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'favorited': json['favorited'] == null ? undefined : json['favorited'],
        'pseudo': json['pseudo'] == null ? undefined : json['pseudo'],
        'annotations': json['annotations'] == null ? undefined : FlattenedAnnotationsFromJSON(json['annotations']),
        'hints': json['hints'] == null ? undefined : FlattenedHintsFromJSON(json['hints']),
        'anchors': json['anchors'] == null ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
        'conversations': json['conversations'] == null ? undefined : FlattenedConversationsFromJSON(json['conversations']),
        'demo': json['demo'] == null ? undefined : json['demo'],
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
    };
}

export function FlattenedAssetToJSON(json: any): FlattenedAsset {
    return FlattenedAssetToJSONTyped(json, false);
}

export function FlattenedAssetToJSONTyped(value?: FlattenedAsset | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'name': value['name'],
        'creator': value['creator'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'synced': GroupedTimestampToJSON(value['synced']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'formats': FlattenedFormatsToJSON(value['formats']),
        'preview': FlattenedPreviewToJSON(value['preview']),
        'original': value['original'],
        'shares': FlattenedSharesToJSON(value['shares']),
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'websites': FlattenedWebsitesToJSON(value['websites']),
        'interacted': GroupedTimestampToJSON(value['interacted']),
        'tags': FlattenedTagsToJSON(value['tags']),
        'sensitives': FlattenedSensitivesToJSON(value['sensitives']),
        'persons': FlattenedPersonsToJSON(value['persons']),
        'curated': value['curated'],
        'discovered': value['discovered'],
        'activities': FlattenedActivitiesToJSON(value['activities']),
        'score': ScoreToJSON(value['score']),
        'favorited': value['favorited'],
        'pseudo': value['pseudo'],
        'annotations': FlattenedAnnotationsToJSON(value['annotations']),
        'hints': FlattenedHintsToJSON(value['hints']),
        'anchors': FlattenedAnchorsToJSON(value['anchors']),
        'conversations': FlattenedConversationsToJSON(value['conversations']),
        'demo': value['demo'],
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
    };
}

