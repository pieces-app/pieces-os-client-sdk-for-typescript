/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    EmbeddedModelSchemaToJSONTyped,
} from './EmbeddedModelSchema';
import type { WorkstreamEventContext } from './WorkstreamEventContext';
import {
    WorkstreamEventContextFromJSON,
    WorkstreamEventContextFromJSONTyped,
    WorkstreamEventContextToJSON,
    WorkstreamEventContextToJSONTyped,
} from './WorkstreamEventContext';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
    ApplicationToJSONTyped,
} from './Application';

/**
 * This is used in the input of the /workstream/feed/refresh
 * 
 * The application here will let us know if what scope you would like to refresh the stream for. IE an Application will 
 * provide bias in the items that are displayed.
 * 
 * note: context can be used here to provide further bias to the suggestions.
 * 
 * if query is provided we will use global search.
 * @export
 * @interface SeededWorkstreamSuggestionsRefresh
 */
export interface SeededWorkstreamSuggestionsRefresh {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededWorkstreamSuggestionsRefresh
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Application}
     * @memberof SeededWorkstreamSuggestionsRefresh
     */
    application: Application;
    /**
     * 
     * @type {WorkstreamEventContext}
     * @memberof SeededWorkstreamSuggestionsRefresh
     */
    context?: WorkstreamEventContext;
    /**
     * 
     * @type {string}
     * @memberof SeededWorkstreamSuggestionsRefresh
     */
    query?: string;
}


/**
 * Check if a given object implements the SeededWorkstreamSuggestionsRefresh interface.
 */
export function instanceOfSeededWorkstreamSuggestionsRefresh(value: object): value is SeededWorkstreamSuggestionsRefresh {
    if (!('application' in value) || value['application'] === undefined) return false;
    return true;
}

export function SeededWorkstreamSuggestionsRefreshFromJSON(json: any): SeededWorkstreamSuggestionsRefresh {
    return SeededWorkstreamSuggestionsRefreshFromJSONTyped(json, false);
}

export function SeededWorkstreamSuggestionsRefreshFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededWorkstreamSuggestionsRefresh {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'application': ApplicationFromJSON(json['application']),
        'context': json['context'] == null ? undefined : WorkstreamEventContextFromJSON(json['context']),
        'query': json['query'] == null ? undefined : json['query'],
    };
}

export function SeededWorkstreamSuggestionsRefreshToJSON(json: any): SeededWorkstreamSuggestionsRefresh {
    return SeededWorkstreamSuggestionsRefreshToJSONTyped(json, false);
}

export function SeededWorkstreamSuggestionsRefreshToJSONTyped(value?: SeededWorkstreamSuggestionsRefresh | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'application': ApplicationToJSON(value['application']),
        'context': WorkstreamEventContextToJSON(value['context']),
        'query': value['query'],
    };
}

