/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Range,
  SeededScoreIncrement,
} from '../models/index';
import {
    RangeFromJSON,
    RangeToJSON,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models/index';

export interface RangeAssociateConversationGroundingTemporalRangeWorkstreamsRequest {
    range: string;
    conversation: string;
}

export interface RangeAssociateConversationMessageRequest {
    range: string;
    message: string;
}

export interface RangeAssociateWorkstreamSummaryRequest {
    range: string;
    workstreamSummary: string;
}

export interface RangeDisassociateConversationGroundingTemporalRangeWorkstreamsRequest {
    range: string;
    conversation: string;
}

export interface RangeDisassociateConversationMessageRequest {
    range: string;
    message: string;
}

export interface RangeDisassociateWorkstreamSummaryRequest {
    range: string;
    workstreamSummary: string;
}

export interface RangeScoresIncrementRequest {
    range: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface RangeUpdateRequest {
    range?: Range;
}

export interface RangesSpecificRangeSnapshotRequest {
    range: string;
}

/**
 * 
 */
export class RangeApi extends runtime.BaseAPI {

    /**
     * This will associate a range with a conversation(grounding.temporal.workstreams). This will do the same thing as the conversation equivalent.
     * /range/{range}/conversations/grounding/temporal_range/workstreams/associate/{conversation} [POST]
     */
    async rangeAssociateConversationGroundingTemporalRangeWorkstreamsRaw(requestParameters: RangeAssociateConversationGroundingTemporalRangeWorkstreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeAssociateConversationGroundingTemporalRangeWorkstreams().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling rangeAssociateConversationGroundingTemporalRangeWorkstreams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/conversations/grounding/temporal_range/workstreams/associate/{conversation}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a range with a conversation(grounding.temporal.workstreams). This will do the same thing as the conversation equivalent.
     * /range/{range}/conversations/grounding/temporal_range/workstreams/associate/{conversation} [POST]
     */
    async rangeAssociateConversationGroundingTemporalRangeWorkstreams(requestParameters: RangeAssociateConversationGroundingTemporalRangeWorkstreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeAssociateConversationGroundingTemporalRangeWorkstreamsRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a asset with a conversation_message. This will do the same thing as the conversation_message equivalent.
     * /range/{range}/messages/associate/{message} [POST]
     */
    async rangeAssociateConversationMessageRaw(requestParameters: RangeAssociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeAssociateConversationMessage().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling rangeAssociateConversationMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/messages/associate/{message}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a asset with a conversation_message. This will do the same thing as the conversation_message equivalent.
     * /range/{range}/messages/associate/{message} [POST]
     */
    async rangeAssociateConversationMessage(requestParameters: RangeAssociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeAssociateConversationMessageRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a range with a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /range/{range}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async rangeAssociateWorkstreamSummaryRaw(requestParameters: RangeAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeAssociateWorkstreamSummary().'
            );
        }

        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling rangeAssociateWorkstreamSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/workstream_summaries/associate/{workstream_summary}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a range with a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /range/{range}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async rangeAssociateWorkstreamSummary(requestParameters: RangeAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeAssociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a range from a conversation(grounding.temporal.workstreams). This will do the same thing as the conversation equivalent.
     * /range/{range}/conversations/grounding/temporal_range/workstreams/disassociate/{conversation} [POST]
     */
    async rangeDisassociateConversationGroundingTemporalRangeWorkstreamsRaw(requestParameters: RangeDisassociateConversationGroundingTemporalRangeWorkstreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeDisassociateConversationGroundingTemporalRangeWorkstreams().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling rangeDisassociateConversationGroundingTemporalRangeWorkstreams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/conversations/grounding/temporal_range/workstreams/disassociate/{conversation}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a range from a conversation(grounding.temporal.workstreams). This will do the same thing as the conversation equivalent.
     * /range/{range}/conversations/grounding/temporal_range/workstreams/disassociate/{conversation} [POST]
     */
    async rangeDisassociateConversationGroundingTemporalRangeWorkstreams(requestParameters: RangeDisassociateConversationGroundingTemporalRangeWorkstreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeDisassociateConversationGroundingTemporalRangeWorkstreamsRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a conversation_message from an range. This will do the same thing as the conversation_message equivalent.
     * /range/{range}/messages/disassociate/{message} [POST]
     */
    async rangeDisassociateConversationMessageRaw(requestParameters: RangeDisassociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeDisassociateConversationMessage().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling rangeDisassociateConversationMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/messages/disassociate/{message}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a conversation_message from an range. This will do the same thing as the conversation_message equivalent.
     * /range/{range}/messages/disassociate/{message} [POST]
     */
    async rangeDisassociateConversationMessage(requestParameters: RangeDisassociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeDisassociateConversationMessageRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a range from a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /range/{range}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async rangeDisassociateWorkstreamSummaryRaw(requestParameters: RangeDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeDisassociateWorkstreamSummary().'
            );
        }

        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling rangeDisassociateWorkstreamSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/workstream_summaries/disassociate/{workstream_summary}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a range from a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /range/{range}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async rangeDisassociateWorkstreamSummary(requestParameters: RangeDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeDisassociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/range/{range}/scores/increment\' [POST]
     */
    async rangeScoresIncrementRaw(requestParameters: RangeScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangeScoresIncrement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}/scores/increment`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters['seededScoreIncrement']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/range/{range}/scores/increment\' [POST]
     */
    async rangeScoresIncrement(requestParameters: RangeScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rangeScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will update a specific range.
     * /range/update [POST]
     */
    async rangeUpdateRaw(requestParameters: RangeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Range>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RangeToJSON(requestParameters['range']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RangeFromJSON(jsonValue));
    }

    /**
     * This will update a specific range.
     * /range/update [POST]
     */
    async rangeUpdate(requestParameters: RangeUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Range> {
        const response = await this.rangeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will get a snapshot of a single range.
     * /range/{range} [GET]
     */
    async rangesSpecificRangeSnapshotRaw(requestParameters: RangesSpecificRangeSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Range>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling rangesSpecificRangeSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/range/{range}`.replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RangeFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a single range.
     * /range/{range} [GET]
     */
    async rangesSpecificRangeSnapshot(requestParameters: RangesSpecificRangeSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Range> {
        const response = await this.rangesSpecificRangeSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
