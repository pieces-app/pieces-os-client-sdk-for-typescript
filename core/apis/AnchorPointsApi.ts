/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnchorPoint,
  AnchorPoints,
  SeededAnchorPoint,
  StreamedIdentifiers,
} from '../models/index';
import {
    AnchorPointFromJSON,
    AnchorPointToJSON,
    AnchorPointsFromJSON,
    AnchorPointsToJSON,
    SeededAnchorPointFromJSON,
    SeededAnchorPointToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
} from '../models/index';

export interface AnchorPointsCreateNewAnchorPointRequest {
    transferables?: boolean;
    seededAnchorPoint?: SeededAnchorPoint;
}

export interface AnchorPointsDeleteSpecificAnchorPointRequest {
    anchorPoint: string;
}

export interface AnchorPointsSnapshotRequest {
    transferables?: boolean;
}

/**
 * 
 */
export class AnchorPointsApi extends runtime.BaseAPI {

    /**
     * This will create a anchorPoint.
     * /anchor_points/create [POST]
     */
    async anchorPointsCreateNewAnchorPointRaw(requestParameters: AnchorPointsCreateNewAnchorPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnchorPoint>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/anchor_points/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededAnchorPointToJSON(requestParameters['seededAnchorPoint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnchorPointFromJSON(jsonValue));
    }

    /**
     * This will create a anchorPoint.
     * /anchor_points/create [POST]
     */
    async anchorPointsCreateNewAnchorPoint(requestParameters: AnchorPointsCreateNewAnchorPointRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnchorPoint> {
        const response = await this.anchorPointsCreateNewAnchorPointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific anchorPoint!
     * /anchor_points/{anchor_point}/delete [POST]
     */
    async anchorPointsDeleteSpecificAnchorPointRaw(requestParameters: AnchorPointsDeleteSpecificAnchorPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['anchorPoint'] == null) {
            throw new runtime.RequiredError(
                'anchorPoint',
                'Required parameter "anchorPoint" was null or undefined when calling anchorPointsDeleteSpecificAnchorPoint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/anchor_points/{anchor_point}/delete`.replace(`{${"anchor_point"}}`, encodeURIComponent(String(requestParameters['anchorPoint']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific anchorPoint!
     * /anchor_points/{anchor_point}/delete [POST]
     */
    async anchorPointsDeleteSpecificAnchorPoint(requestParameters: AnchorPointsDeleteSpecificAnchorPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.anchorPointsDeleteSpecificAnchorPointRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of all your anchorPoints.
     * /anchor_points [GET]
     */
    async anchorPointsSnapshotRaw(requestParameters: AnchorPointsSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnchorPoints>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/anchor_points`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnchorPointsFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all your anchorPoints.
     * /anchor_points [GET]
     */
    async anchorPointsSnapshot(requestParameters: AnchorPointsSnapshotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnchorPoints> {
        const response = await this.anchorPointsSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your annotation identifiers (UUIDs).
     * /anchor_points/stream/identifiers [WS]
     */
    async anchorPointsStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/anchor_points/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your annotation identifiers (UUIDs).
     * /anchor_points/stream/identifiers [WS]
     */
    async anchorPointsStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.anchorPointsStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

}
