/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Activities,
  Asset,
  AssetReclassification,
  Conversations,
  ExportedAsset,
  Formats,
  SeededAccessor,
  SeededScoreIncrement,
} from '../models/index';
import {
    ActivitiesFromJSON,
    ActivitiesToJSON,
    AssetFromJSON,
    AssetToJSON,
    AssetReclassificationFromJSON,
    AssetReclassificationToJSON,
    ConversationsFromJSON,
    ConversationsToJSON,
    ExportedAssetFromJSON,
    ExportedAssetToJSON,
    FormatsFromJSON,
    FormatsToJSON,
    SeededAccessorFromJSON,
    SeededAccessorToJSON,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models/index';

export interface AssetAssociateAnchorRequest {
    asset: string;
    anchor: string;
}

export interface AssetAssociateAnnotationRequest {
    asset: string;
    annotation: string;
}

export interface AssetAssociateConversationRequest {
    asset: string;
    conversation: string;
}

export interface AssetAssociateConversationMessageRequest {
    asset: string;
    message: string;
}

export interface AssetAssociateHintRequest {
    asset: string;
    hint: string;
}

export interface AssetAssociatePersonRequest {
    asset: string;
    person: string;
}

export interface AssetAssociateTagRequest {
    asset: string;
    tag: string;
}

export interface AssetAssociateWebsiteRequest {
    asset: string;
    website: string;
}

export interface AssetAssociateWorkstreamSummaryRequest {
    asset: string;
    workstreamSummary: string;
}

export interface AssetDisassociateAnchorRequest {
    asset: string;
    anchor: string;
}

export interface AssetDisassociateAnnotationRequest {
    asset: string;
    annotation: string;
}

export interface AssetDisassociateConversationRequest {
    asset: string;
    conversation: string;
}

export interface AssetDisassociateConversationMessageRequest {
    asset: string;
    message: string;
}

export interface AssetDisassociateHintRequest {
    asset: string;
    hint: string;
}

export interface AssetDisassociatePersonRequest {
    asset: string;
    person: string;
}

export interface AssetDisassociateTagRequest {
    tag: string;
    asset: string;
}

export interface AssetDisassociateWebsiteRequest {
    website: string;
    asset: string;
}

export interface AssetDisassociateWorkstreamSummaryRequest {
    asset: string;
    workstreamSummary: string;
}

export interface AssetFormatsRequest {
    asset: string;
    transferables?: boolean;
}

export interface AssetReclassifyRequest {
    transferables?: boolean;
    assetReclassification?: AssetReclassification;
}

export interface AssetScoresIncrementRequest {
    asset: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface AssetSnapshotRequest {
    asset: string;
    transferables?: boolean;
    packageActivities?: boolean;
}

export interface AssetSnapshotPostRequest {
    asset: string;
    transferables?: boolean;
    seededAccessor?: SeededAccessor;
}

export interface AssetSpecificAssetActivitiesRequest {
    asset: string;
    transferables?: boolean;
}

export interface AssetSpecificAssetConversationsRequest {
    asset: string;
    transferables?: boolean;
}

export interface AssetSpecificAssetExportRequest {
    asset: string;
    exportType: AssetSpecificAssetExportExportTypeEnum;
}

export interface AssetUpdateRequest {
    transferables?: boolean;
    asset?: Asset;
}

/**
 * 
 */
export class AssetApi extends runtime.BaseAPI {

    /**
     * associates an anchor and an asset. It performs the same action as the anchor equivalent.
     * /asset/{asset}/persons/associate/{anchor} [POST]
     */
    async assetAssociateAnchorRaw(requestParameters: AssetAssociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateAnchor().'
            );
        }

        if (requestParameters['anchor'] == null) {
            throw new runtime.RequiredError(
                'anchor',
                'Required parameter "anchor" was null or undefined when calling assetAssociateAnchor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/anchors/associate/{anchor}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters['anchor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * associates an anchor and an asset. It performs the same action as the anchor equivalent.
     * /asset/{asset}/persons/associate/{anchor} [POST]
     */
    async assetAssociateAnchor(requestParameters: AssetAssociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateAnchorRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate an annotation with an asset.
     * /asset/{asset}/annotations/associate/{annotation} [POST]
     */
    async assetAssociateAnnotationRaw(requestParameters: AssetAssociateAnnotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateAnnotation().'
            );
        }

        if (requestParameters['annotation'] == null) {
            throw new runtime.RequiredError(
                'annotation',
                'Required parameter "annotation" was null or undefined when calling assetAssociateAnnotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/annotations/associate/{annotation}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters['annotation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate an annotation with an asset.
     * /asset/{asset}/annotations/associate/{annotation} [POST]
     */
    async assetAssociateAnnotation(requestParameters: AssetAssociateAnnotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateAnnotationRaw(requestParameters, initOverrides);
    }

    /**
     * associates a conversation and an asset. It performs the same action as the conversation equivalent.
     * /asset/{asset}/conversations/associate/{conversation} [POST]
     */
    async assetAssociateConversationRaw(requestParameters: AssetAssociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling assetAssociateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/conversations/associate/{conversation}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * associates a conversation and an asset. It performs the same action as the conversation equivalent.
     * /asset/{asset}/conversations/associate/{conversation} [POST]
     */
    async assetAssociateConversation(requestParameters: AssetAssociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a asset with a conversation_message. This will do the same thing as the conversation_message equivalent.
     * /asset/{asset}/messages/associate/{message} [POST]
     */
    async assetAssociateConversationMessageRaw(requestParameters: AssetAssociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateConversationMessage().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling assetAssociateConversationMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/messages/associate/{message}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a asset with a conversation_message. This will do the same thing as the conversation_message equivalent.
     * /asset/{asset}/messages/associate/{message} [POST]
     */
    async assetAssociateConversationMessage(requestParameters: AssetAssociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateConversationMessageRaw(requestParameters, initOverrides);
    }

    /**
     * associates an asset and a hint. It performs the same action as the hint equivalent.
     * /asset/{asset}/hints/associate/{hint} [POST]
     */
    async assetAssociateHintRaw(requestParameters: AssetAssociateHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateHint().'
            );
        }

        if (requestParameters['hint'] == null) {
            throw new runtime.RequiredError(
                'hint',
                'Required parameter "hint" was null or undefined when calling assetAssociateHint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/hints/associate/{hint}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters['hint']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * associates an asset and a hint. It performs the same action as the hint equivalent.
     * /asset/{asset}/hints/associate/{hint} [POST]
     */
    async assetAssociateHint(requestParameters: AssetAssociateHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateHintRaw(requestParameters, initOverrides);
    }

    /**
     * associates a person and an asset. It performs the same action as the person equivalent.
     * /asset/{asset}/persons/associate/{person} [POST]
     */
    async assetAssociatePersonRaw(requestParameters: AssetAssociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling assetAssociatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/persons/associate/{person}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters['person']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * associates a person and an asset. It performs the same action as the person equivalent.
     * /asset/{asset}/persons/associate/{person} [POST]
     */
    async assetAssociatePerson(requestParameters: AssetAssociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociatePersonRaw(requestParameters, initOverrides);
    }

    /**
     * Associates a tag with a specified asset. It performs the same action as the tag equivalent.
     * /asset/{asset}/tags/associate/{tag} [POST]
     */
    async assetAssociateTagRaw(requestParameters: AssetAssociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateTag().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling assetAssociateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/tags/associate/{tag}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Associates a tag with a specified asset. It performs the same action as the tag equivalent.
     * /asset/{asset}/tags/associate/{tag} [POST]
     */
    async assetAssociateTag(requestParameters: AssetAssociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateTagRaw(requestParameters, initOverrides);
    }

    /**
     * Associates a website with an asset. It performs the same action as its website equivalent.
     * /asset/{asset}/websites/associate/{website} [POST]
     */
    async assetAssociateWebsiteRaw(requestParameters: AssetAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling assetAssociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/websites/associate/{website}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Associates a website with an asset. It performs the same action as its website equivalent.
     * /asset/{asset}/websites/associate/{website} [POST]
     */
    async assetAssociateWebsite(requestParameters: AssetAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a asset with a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /asset/{asset}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async assetAssociateWorkstreamSummaryRaw(requestParameters: AssetAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetAssociateWorkstreamSummary().'
            );
        }

        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling assetAssociateWorkstreamSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/workstream_summaries/associate/{workstream_summary}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a asset with a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /asset/{asset}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async assetAssociateWorkstreamSummary(requestParameters: AssetAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAssociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociates a anchor from an asset. It performs the same action as the anchor equivalent.
     * /asset/{asset}/anchors/disassociate/{anchor} [POST]
     */
    async assetDisassociateAnchorRaw(requestParameters: AssetDisassociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateAnchor().'
            );
        }

        if (requestParameters['anchor'] == null) {
            throw new runtime.RequiredError(
                'anchor',
                'Required parameter "anchor" was null or undefined when calling assetDisassociateAnchor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/anchors/disassociate/{anchor}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters['anchor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates a anchor from an asset. It performs the same action as the anchor equivalent.
     * /asset/{asset}/anchors/disassociate/{anchor} [POST]
     */
    async assetDisassociateAnchor(requestParameters: AssetDisassociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateAnchorRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to dissassociate an annotation from an asset.
     * /asset/{asset}/annotations/disassociate/{annotation} [POST]
     */
    async assetDisassociateAnnotationRaw(requestParameters: AssetDisassociateAnnotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateAnnotation().'
            );
        }

        if (requestParameters['annotation'] == null) {
            throw new runtime.RequiredError(
                'annotation',
                'Required parameter "annotation" was null or undefined when calling assetDisassociateAnnotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/annotations/disassociate/{annotation}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters['annotation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to dissassociate an annotation from an asset.
     * /asset/{asset}/annotations/disassociate/{annotation} [POST]
     */
    async assetDisassociateAnnotation(requestParameters: AssetDisassociateAnnotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateAnnotationRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociates a conversation from an asset. It performs the same action as the conversation equivalent.
     * /asset/{asset}/conversations/disassociate/{conversation} [POST]
     */
    async assetDisassociateConversationRaw(requestParameters: AssetDisassociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling assetDisassociateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/conversations/disassociate/{conversation}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates a conversation from an asset. It performs the same action as the conversation equivalent.
     * /asset/{asset}/conversations/disassociate/{conversation} [POST]
     */
    async assetDisassociateConversation(requestParameters: AssetDisassociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a conversation_message from an asset. This will do the same thing as the conversation_message equivalent.
     * /asset/{asset}/messages/disassociate/{message} [POST]
     */
    async assetDisassociateConversationMessageRaw(requestParameters: AssetDisassociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateConversationMessage().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling assetDisassociateConversationMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/messages/disassociate/{message}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a conversation_message from an asset. This will do the same thing as the conversation_message equivalent.
     * /asset/{asset}/messages/disassociate/{message} [POST]
     */
    async assetDisassociateConversationMessage(requestParameters: AssetDisassociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateConversationMessageRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociates an asset from a hint. It performs the same action as the hint equivalent.
     * /asset/{asset}/hints/disassociate/{hint} [POST]
     */
    async assetDisassociateHintRaw(requestParameters: AssetDisassociateHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateHint().'
            );
        }

        if (requestParameters['hint'] == null) {
            throw new runtime.RequiredError(
                'hint',
                'Required parameter "hint" was null or undefined when calling assetDisassociateHint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/hints/disassociate/{hint}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters['hint']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates an asset from a hint. It performs the same action as the hint equivalent.
     * /asset/{asset}/hints/disassociate/{hint} [POST]
     */
    async assetDisassociateHint(requestParameters: AssetDisassociateHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateHintRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociates a person from an asset. It performs the same action as the person equivalent.
     * /asset/{asset}/persons/disassociate/{person} [POST]
     */
    async assetDisassociatePersonRaw(requestParameters: AssetDisassociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling assetDisassociatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/persons/disassociate/{person}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters['person']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates a person from an asset. It performs the same action as the person equivalent.
     * /asset/{asset}/persons/disassociate/{person} [POST]
     */
    async assetDisassociatePerson(requestParameters: AssetDisassociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociatePersonRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociates a tag from an asset. It performs the same action as the tag equivalent.
     * /asset/{asset}/tags/disassociate/{tag} [POST]
     */
    async assetDisassociateTagRaw(requestParameters: AssetDisassociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling assetDisassociateTag().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/tags/disassociate/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates a tag from an asset. It performs the same action as the tag equivalent.
     * /asset/{asset}/tags/disassociate/{tag} [POST]
     */
    async assetDisassociateTag(requestParameters: AssetDisassociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateTagRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociates a website from an asset. It performs the same action as the website equivalent.
     * /asset/{asset}/websites/disassociate/{website} [POST]
     */
    async assetDisassociateWebsiteRaw(requestParameters: AssetDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling assetDisassociateWebsite().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/websites/disassociate/{website}`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates a website from an asset. It performs the same action as the website equivalent.
     * /asset/{asset}/websites/disassociate/{website} [POST]
     */
    async assetDisassociateWebsite(requestParameters: AssetDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate an asset from a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /asset/{asset}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async assetDisassociateWorkstreamSummaryRaw(requestParameters: AssetDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetDisassociateWorkstreamSummary().'
            );
        }

        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling assetDisassociateWorkstreamSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/workstream_summaries/disassociate/{workstream_summary}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate an asset from a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /asset/{asset}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async assetDisassociateWorkstreamSummary(requestParameters: AssetDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetDisassociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the formats available for a specified asset.
     * /asset/{asset}/formats [GET] Scoped To Asset
     */
    async assetFormatsRaw(requestParameters: AssetFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Formats>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetFormats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/formats`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormatsFromJSON(jsonValue));
    }

    /**
     * Retrieves the formats available for a specified asset.
     * /asset/{asset}/formats [GET] Scoped To Asset
     */
    async assetFormats(requestParameters: AssetFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Formats> {
        const response = await this.assetFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the formats available for a specified asset.
     * /asset/reclassify [POST]
     */
    async assetReclassifyRaw(requestParameters: AssetReclassifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/reclassify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReclassificationToJSON(requestParameters['assetReclassification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Retrieves the formats available for a specified asset.
     * /asset/reclassify [POST]
     */
    async assetReclassify(requestParameters: AssetReclassifyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetReclassifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Increments the scores associated with the specified asset based on the provided SeededScoreIncrement data in the request body.
     * /asset/{asset}/scores/increment [POST]
     */
    async assetScoresIncrementRaw(requestParameters: AssetScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetScoresIncrement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/scores/increment`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters['seededScoreIncrement']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Increments the scores associated with the specified asset based on the provided SeededScoreIncrement data in the request body.
     * /asset/{asset}/scores/increment [POST]
     */
    async assetScoresIncrement(requestParameters: AssetScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the snapshot of a specific asset
     * /asset/{asset} [GET] Scoped To Asset
     */
    async assetSnapshotRaw(requestParameters: AssetSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetSnapshot().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        if (requestParameters['packageActivities'] != null) {
            queryParameters['package_activities'] = requestParameters['packageActivities'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Retrieves the snapshot of a specific asset
     * /asset/{asset} [GET] Scoped To Asset
     */
    async assetSnapshot(requestParameters: AssetSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a snapshot of a specific asset, along with the user requesting the snapshot.
     * /asset/{asset} [POST] Scoped to an Asset
     */
    async assetSnapshotPostRaw(requestParameters: AssetSnapshotPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetSnapshotPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededAccessorToJSON(requestParameters['seededAccessor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Retrieves a snapshot of a specific asset, along with the user requesting the snapshot.
     * /asset/{asset} [POST] Scoped to an Asset
     */
    async assetSnapshotPost(requestParameters: AssetSnapshotPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetSnapshotPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves activity events specific to the given asset.
     * /asset/{asset}/activities [GET]
     */
    async assetSpecificAssetActivitiesRaw(requestParameters: AssetSpecificAssetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activities>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetSpecificAssetActivities().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/activities`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesFromJSON(jsonValue));
    }

    /**
     * Retrieves activity events specific to the given asset.
     * /asset/{asset}/activities [GET]
     */
    async assetSpecificAssetActivities(requestParameters: AssetSpecificAssetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activities> {
        const response = await this.assetSpecificAssetActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves conversations specific to the given asset.
     * /asset/{asset}/conversations [GET]
     */
    async assetSpecificAssetConversationsRaw(requestParameters: AssetSpecificAssetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversations>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetSpecificAssetConversations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/conversations`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationsFromJSON(jsonValue));
    }

    /**
     * Retrieves conversations specific to the given asset.
     * /asset/{asset}/conversations [GET]
     */
    async assetSpecificAssetConversations(requestParameters: AssetSpecificAssetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversations> {
        const response = await this.assetSpecificAssetConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an export version of the specified asset.
     * /asset/{asset}/export [GET]
     */
    async assetSpecificAssetExportRaw(requestParameters: AssetSpecificAssetExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportedAsset>> {
        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetSpecificAssetExport().'
            );
        }

        if (requestParameters['exportType'] == null) {
            throw new runtime.RequiredError(
                'exportType',
                'Required parameter "exportType" was null or undefined when calling assetSpecificAssetExport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['exportType'] != null) {
            queryParameters['export_type'] = requestParameters['exportType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/{asset}/export`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportedAssetFromJSON(jsonValue));
    }

    /**
     * Retrieves an export version of the specified asset.
     * /asset/{asset}/export [GET]
     */
    async assetSpecificAssetExport(requestParameters: AssetSpecificAssetExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportedAsset> {
        const response = await this.assetSpecificAssetExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows the user to update an existing Asset. It accepts the Asset object that needs updating and returns the fully updated Asset.
     * /asset/update [POST] Scoped to Asset
     */
    async assetUpdateRaw(requestParameters: AssetUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/asset/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetToJSON(requestParameters['asset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Allows the user to update an existing Asset. It accepts the Asset object that needs updating and returns the fully updated Asset.
     * /asset/update [POST] Scoped to Asset
     */
    async assetUpdate(requestParameters: AssetUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AssetSpecificAssetExportExportTypeEnum = {
    Unknown: 'UNKNOWN',
    Html: 'HTML',
    Md: 'MD'
} as const;
export type AssetSpecificAssetExportExportTypeEnum = typeof AssetSpecificAssetExportExportTypeEnum[keyof typeof AssetSpecificAssetExportExportTypeEnum];
