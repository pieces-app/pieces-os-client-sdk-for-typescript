/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentifiedWorkstreamPatternEngineSource,
  IdentifiedWorkstreamPatternEngineSources,
  SearchInput,
  SearchedIdentifiedWorkstreamPatternEngineSources,
  SeededWorkstreamPatternEngineSource,
  StreamedIdentifiers,
} from '../models/index';
import {
    IdentifiedWorkstreamPatternEngineSourceFromJSON,
    IdentifiedWorkstreamPatternEngineSourceToJSON,
    IdentifiedWorkstreamPatternEngineSourcesFromJSON,
    IdentifiedWorkstreamPatternEngineSourcesToJSON,
    SearchInputFromJSON,
    SearchInputToJSON,
    SearchedIdentifiedWorkstreamPatternEngineSourcesFromJSON,
    SearchedIdentifiedWorkstreamPatternEngineSourcesToJSON,
    SeededWorkstreamPatternEngineSourceFromJSON,
    SeededWorkstreamPatternEngineSourceToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
} from '../models/index';

export interface WorkstreamPatternEngineSearchSourcesRequest {
    transferables?: boolean;
    searchInput?: SearchInput;
}

export interface WorkstreamPatternEngineSourcesCreateNewSourceRequest {
    transferables?: boolean;
    seededWorkstreamPatternEngineSource?: SeededWorkstreamPatternEngineSource;
}

export interface WorkstreamPatternEngineSourcesDeleteSpecificSourceRequest {
    source: string;
}

export interface WorkstreamPatternEngineSourcesSnapshotRequest {
    transferables?: boolean;
}

/**
 * 
 */
export class WorkstreamPatternEngineSourcesApi extends runtime.BaseAPI {

    /**
     * This will search your workstream pattern engine sources
     * /workstream_pattern_engine/sources/search [POST]
     */
    async workstreamPatternEngineSearchSourcesRaw(requestParameters: WorkstreamPatternEngineSearchSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchedIdentifiedWorkstreamPatternEngineSources>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/sources/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchInputToJSON(requestParameters['searchInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedIdentifiedWorkstreamPatternEngineSourcesFromJSON(jsonValue));
    }

    /**
     * This will search your workstream pattern engine sources
     * /workstream_pattern_engine/sources/search [POST]
     */
    async workstreamPatternEngineSearchSources(requestParameters: WorkstreamPatternEngineSearchSourcesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchedIdentifiedWorkstreamPatternEngineSources> {
        const response = await this.workstreamPatternEngineSearchSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will create a anchor and attach it to a specific asset(s) This will also ensure the anchor is normalized.
     * /workstream_pattern_engine/sources/create [POST]
     */
    async workstreamPatternEngineSourcesCreateNewSourceRaw(requestParameters: WorkstreamPatternEngineSourcesCreateNewSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentifiedWorkstreamPatternEngineSource>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/sources/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededWorkstreamPatternEngineSourceToJSON(requestParameters['seededWorkstreamPatternEngineSource']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentifiedWorkstreamPatternEngineSourceFromJSON(jsonValue));
    }

    /**
     * This will create a anchor and attach it to a specific asset(s) This will also ensure the anchor is normalized.
     * /workstream_pattern_engine/sources/create [POST]
     */
    async workstreamPatternEngineSourcesCreateNewSource(requestParameters: WorkstreamPatternEngineSourcesCreateNewSourceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentifiedWorkstreamPatternEngineSource> {
        const response = await this.workstreamPatternEngineSourcesCreateNewSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific workstream pattern engine source!
     * /workstream_pattern_engine/sources/{source}/delete [POST]
     */
    async workstreamPatternEngineSourcesDeleteSpecificSourceRaw(requestParameters: WorkstreamPatternEngineSourcesDeleteSpecificSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourcesDeleteSpecificSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/sources/{source}/delete`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific workstream pattern engine source!
     * /workstream_pattern_engine/sources/{source}/delete [POST]
     */
    async workstreamPatternEngineSourcesDeleteSpecificSource(requestParameters: WorkstreamPatternEngineSourcesDeleteSpecificSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourcesDeleteSpecificSourceRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of all your anchors.
     * /workstream_pattern_engine/sources [GET]
     */
    async workstreamPatternEngineSourcesSnapshotRaw(requestParameters: WorkstreamPatternEngineSourcesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentifiedWorkstreamPatternEngineSources>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentifiedWorkstreamPatternEngineSourcesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all your anchors.
     * /workstream_pattern_engine/sources [GET]
     */
    async workstreamPatternEngineSourcesSnapshot(requestParameters: WorkstreamPatternEngineSourcesSnapshotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentifiedWorkstreamPatternEngineSources> {
        const response = await this.workstreamPatternEngineSourcesSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your workstream-pattern-engine soures identifiers (UUIDs).
     * /workstream_pattern_engine/sources/stream/identifiers [WS]
     */
    async workstreamPatternEngineSourcesStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/sources/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your workstream-pattern-engine soures identifiers (UUIDs).
     * /workstream_pattern_engine/sources/stream/identifiers [WS]
     */
    async workstreamPatternEngineSourcesStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.workstreamPatternEngineSourcesStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

}
