/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Hint,
  Hints,
  SearchInput,
  SearchedHints,
  SeededHint,
  StreamedIdentifiers,
} from '../models/index';
import {
    HintFromJSON,
    HintToJSON,
    HintsFromJSON,
    HintsToJSON,
    SearchInputFromJSON,
    SearchInputToJSON,
    SearchedHintsFromJSON,
    SearchedHintsToJSON,
    SeededHintFromJSON,
    SeededHintToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
} from '../models/index';

export interface HintsCreateNewHintRequest {
    seededHint?: SeededHint;
}

export interface HintsDeleteSpecificHintRequest {
    hint: string;
}

export interface SearchHintsRequest {
    transferables?: boolean;
    searchInput?: SearchInput;
}

/**
 * 
 */
export class HintsApi extends runtime.BaseAPI {

    /**
     * This will create a hint.
     * /hints/create [POST]
     */
    async hintsCreateNewHintRaw(requestParameters: HintsCreateNewHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hint>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/hints/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededHintToJSON(requestParameters['seededHint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HintFromJSON(jsonValue));
    }

    /**
     * This will create a hint.
     * /hints/create [POST]
     */
    async hintsCreateNewHint(requestParameters: HintsCreateNewHintRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hint> {
        const response = await this.hintsCreateNewHintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific hint.
     * /hints/{hint}/delete [POST]
     */
    async hintsDeleteSpecificHintRaw(requestParameters: HintsDeleteSpecificHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hint'] == null) {
            throw new runtime.RequiredError(
                'hint',
                'Required parameter "hint" was null or undefined when calling hintsDeleteSpecificHint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/hints/{hint}/delete`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters['hint']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific hint.
     * /hints/{hint}/delete [POST]
     */
    async hintsDeleteSpecificHint(requestParameters: HintsDeleteSpecificHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hintsDeleteSpecificHintRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of all of the hints.
     * /hints [GET]
     */
    async hintsSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hints>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/hints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HintsFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of the hints.
     * /hints [GET]
     */
    async hintsSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hints> {
        const response = await this.hintsSnapshotRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your hint identifiers (UUIDs).
     * /hints/stream/identifiers [WS]
     */
    async hintsStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/hints/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your hint identifiers (UUIDs).
     * /hints/stream/identifiers [WS]
     */
    async hintsStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.hintsStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

    /**
     * This will search your hints for a specific hint  note: we will just search the hint value
     * /hints/search [POST]
     */
    async searchHintsRaw(requestParameters: SearchHintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchedHints>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/hints/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchInputToJSON(requestParameters['searchInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedHintsFromJSON(jsonValue));
    }

    /**
     * This will search your hints for a specific hint  note: we will just search the hint value
     * /hints/search [POST]
     */
    async searchHints(requestParameters: SearchHintsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchedHints> {
        const response = await this.searchHintsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
