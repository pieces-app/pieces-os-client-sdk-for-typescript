/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchInput,
  SearchedSensitives,
  SeededSensitive,
  Sensitive,
  Sensitives,
  StreamedIdentifiers,
} from '../models/index';
import {
    SearchInputFromJSON,
    SearchInputToJSON,
    SearchedSensitivesFromJSON,
    SearchedSensitivesToJSON,
    SeededSensitiveFromJSON,
    SeededSensitiveToJSON,
    SensitiveFromJSON,
    SensitiveToJSON,
    SensitivesFromJSON,
    SensitivesToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
} from '../models/index';

export interface SearchSensitivesRequest {
    transferables?: boolean;
    searchInput?: SearchInput;
}

export interface SensitivesCreateNewSensitiveRequest {
    seededSensitive?: SeededSensitive;
}

export interface SensitivesDeleteSensitiveRequest {
    sensitive: string;
}

/**
 * 
 */
export class SensitivesApi extends runtime.BaseAPI {

    /**
     * This will search your sensitives for a specific sensitive  note: we will search the value of the sensitive
     * /sensitives/search [POST]
     */
    async searchSensitivesRaw(requestParameters: SearchSensitivesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchedSensitives>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/sensitives/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchInputToJSON(requestParameters['searchInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedSensitivesFromJSON(jsonValue));
    }

    /**
     * This will search your sensitives for a specific sensitive  note: we will search the value of the sensitive
     * /sensitives/search [POST]
     */
    async searchSensitives(requestParameters: SearchSensitivesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchedSensitives> {
        const response = await this.searchSensitivesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will create a new sensitive model.
     * /sensitives/create [POST]
     */
    async sensitivesCreateNewSensitiveRaw(requestParameters: SensitivesCreateNewSensitiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sensitive>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/sensitives/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededSensitiveToJSON(requestParameters['seededSensitive']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensitiveFromJSON(jsonValue));
    }

    /**
     * This will create a new sensitive model.
     * /sensitives/create [POST]
     */
    async sensitivesCreateNewSensitive(requestParameters: SensitivesCreateNewSensitiveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sensitive> {
        const response = await this.sensitivesCreateNewSensitiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a sensitive based on the sensitive uuid.
     * /sensitives/{sensitive}/delete [POST]
     */
    async sensitivesDeleteSensitiveRaw(requestParameters: SensitivesDeleteSensitiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sensitive'] == null) {
            throw new runtime.RequiredError(
                'sensitive',
                'Required parameter "sensitive" was null or undefined when calling sensitivesDeleteSensitive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/sensitives/{sensitive}/delete`.replace(`{${"sensitive"}}`, encodeURIComponent(String(requestParameters['sensitive']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a sensitive based on the sensitive uuid.
     * /sensitives/{sensitive}/delete [POST]
     */
    async sensitivesDeleteSensitive(requestParameters: SensitivesDeleteSensitiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sensitivesDeleteSensitiveRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of all of the sensitives.
     * /sensitives [GET]
     */
    async sensitivesSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sensitives>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/sensitives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensitivesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of the sensitives.
     * /sensitives [GET]
     */
    async sensitivesSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sensitives> {
        const response = await this.sensitivesSnapshotRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your sensitive identifiers (UUIDs).
     * /sensitives/stream/identifiers [WS]
     */
    async sensitivesStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/sensitives/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your sensitive identifiers (UUIDs).
     * /sensitives/stream/identifiers [WS]
     */
    async sensitivesStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.sensitivesStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

}
