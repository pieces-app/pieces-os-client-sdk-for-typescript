/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExistentMetadata,
  ExistingMetadata,
  SearchInput,
  SearchedWebsites,
  SeededWebsite,
  StreamedIdentifiers,
  Website,
  Websites,
} from '../models/index';
import {
    ExistentMetadataFromJSON,
    ExistentMetadataToJSON,
    ExistingMetadataFromJSON,
    ExistingMetadataToJSON,
    SearchInputFromJSON,
    SearchInputToJSON,
    SearchedWebsitesFromJSON,
    SearchedWebsitesToJSON,
    SeededWebsiteFromJSON,
    SeededWebsiteToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
    WebsiteFromJSON,
    WebsiteToJSON,
    WebsitesFromJSON,
    WebsitesToJSON,
} from '../models/index';

export interface SearchWebsitesRequest {
    transferables?: boolean;
    searchInput?: SearchInput;
}

export interface WebsitesCreateNewWebsiteRequest {
    transferables?: boolean;
    seededWebsite?: SeededWebsite;
}

export interface WebsitesDeleteSpecificWebsiteRequest {
    website: string;
}

export interface WebsitesExistsRequest {
    existentMetadata?: ExistentMetadata;
}

export interface WebsitesSnapshotRequest {
    transferables?: boolean;
}

/**
 * 
 */
export class WebsitesApi extends runtime.BaseAPI {

    /**
     * This will search your websites for a specific website  note: we will search the url, and search the name of the website
     * /websites/search [POST]
     */
    async searchWebsitesRaw(requestParameters: SearchWebsitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchedWebsites>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/websites/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchInputToJSON(requestParameters['searchInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedWebsitesFromJSON(jsonValue));
    }

    /**
     * This will search your websites for a specific website  note: we will search the url, and search the name of the website
     * /websites/search [POST]
     */
    async searchWebsites(requestParameters: SearchWebsitesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchedWebsites> {
        const response = await this.searchWebsitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will create a website and attach it to a specific asset.
     * /websites/create [POST]
     */
    async websitesCreateNewWebsiteRaw(requestParameters: WebsitesCreateNewWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Website>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/websites/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededWebsiteToJSON(requestParameters['seededWebsite']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteFromJSON(jsonValue));
    }

    /**
     * This will create a website and attach it to a specific asset.
     * /websites/create [POST]
     */
    async websitesCreateNewWebsite(requestParameters: WebsitesCreateNewWebsiteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Website> {
        const response = await this.websitesCreateNewWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific website!
     * /websites/{website}/delete [POST]
     */
    async websitesDeleteSpecificWebsiteRaw(requestParameters: WebsitesDeleteSpecificWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling websitesDeleteSpecificWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/websites/{website}/delete`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific website!
     * /websites/{website}/delete [POST]
     */
    async websitesDeleteSpecificWebsite(requestParameters: WebsitesDeleteSpecificWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.websitesDeleteSpecificWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will check all of the websites in our database to see if this specific provided website actually exists, if not we will just return a null website in the output.
     * /websites/exists [POST]
     */
    async websitesExistsRaw(requestParameters: WebsitesExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExistingMetadata>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/websites/exists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExistentMetadataToJSON(requestParameters['existentMetadata']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExistingMetadataFromJSON(jsonValue));
    }

    /**
     * This will check all of the websites in our database to see if this specific provided website actually exists, if not we will just return a null website in the output.
     * /websites/exists [POST]
     */
    async websitesExists(requestParameters: WebsitesExistsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExistingMetadata> {
        const response = await this.websitesExistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will get a snapshot of all your websites.
     * /websites [GET]
     */
    async websitesSnapshotRaw(requestParameters: WebsitesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Websites>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/websites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsitesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all your websites.
     * /websites [GET]
     */
    async websitesSnapshot(requestParameters: WebsitesSnapshotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Websites> {
        const response = await this.websitesSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your website identifiers (UUIDs).
     * /websites/stream/identifiers [WS]
     */
    async websitesStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/websites/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your website identifiers (UUIDs).
     * /websites/stream/identifiers [WS]
     */
    async websitesStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.websitesStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

}
