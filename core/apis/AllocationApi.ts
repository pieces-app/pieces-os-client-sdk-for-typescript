/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllocationCloud,
} from '../models/index';
import {
    AllocationCloudFromJSON,
    AllocationCloudToJSON,
} from '../models/index';

export interface AllocationSnapshotRequest {
    allocation: string;
}

export interface AllocationUpdateRequest {
    allocationCloud?: AllocationCloud;
}

/**
 * 
 */
export class AllocationApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a specific allocation.
     * /allocation/{allocation} [GET]
     */
    async allocationSnapshotRaw(requestParameters: AllocationSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllocationCloud>> {
        if (requestParameters['allocation'] == null) {
            throw new runtime.RequiredError(
                'allocation',
                'Required parameter "allocation" was null or undefined when calling allocationSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/allocation/{allocation}`.replace(`{${"allocation"}}`, encodeURIComponent(String(requestParameters['allocation']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllocationCloudFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific allocation.
     * /allocation/{allocation} [GET]
     */
    async allocationSnapshot(requestParameters: AllocationSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllocationCloud> {
        const response = await this.allocationSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will update a specific allocation.
     * /allocation/update [POST]
     */
    async allocationUpdateRaw(requestParameters: AllocationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllocationCloud>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/allocation/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllocationCloudToJSON(requestParameters['allocationCloud']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllocationCloudFromJSON(jsonValue));
    }

    /**
     * This will update a specific allocation.
     * /allocation/update [POST]
     */
    async allocationUpdate(requestParameters: AllocationUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllocationCloud> {
        const response = await this.allocationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
