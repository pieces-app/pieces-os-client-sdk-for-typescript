/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Distribution,
  Distributions,
  SeededDistribution,
} from '../models/index';
import {
    DistributionFromJSON,
    DistributionToJSON,
    DistributionsFromJSON,
    DistributionsToJSON,
    SeededDistributionFromJSON,
    SeededDistributionToJSON,
} from '../models/index';

export interface DistributionsCreateNewDistributionRequest {
    seededDistribution?: SeededDistribution;
}

export interface DistributionsDeleteSpecificDistributionRequest {
    distribution: string;
}

/**
 * 
 */
export class DistributionsApi extends runtime.BaseAPI {

    /**
     * This will create a new distribution.
     * /distributions/create [POST]
     */
    async distributionsCreateNewDistributionRaw(requestParameters: DistributionsCreateNewDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Distribution>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/distributions/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededDistributionToJSON(requestParameters['seededDistribution']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionFromJSON(jsonValue));
    }

    /**
     * This will create a new distribution.
     * /distributions/create [POST]
     */
    async distributionsCreateNewDistribution(requestParameters: DistributionsCreateNewDistributionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Distribution> {
        const response = await this.distributionsCreateNewDistributionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific distribution.
     * /distributions/{distribution}/delete [POST]
     */
    async distributionsDeleteSpecificDistributionRaw(requestParameters: DistributionsDeleteSpecificDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['distribution'] == null) {
            throw new runtime.RequiredError(
                'distribution',
                'Required parameter "distribution" was null or undefined when calling distributionsDeleteSpecificDistribution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/distributions/{distribution}/delete`.replace(`{${"distribution"}}`, encodeURIComponent(String(requestParameters['distribution']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific distribution.
     * /distributions/{distribution}/delete [POST]
     */
    async distributionsDeleteSpecificDistribution(requestParameters: DistributionsDeleteSpecificDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.distributionsDeleteSpecificDistributionRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a specific snapshot of all our distributions.
     * /distributions [GET]
     */
    async distributionsSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Distributions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/distributions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionsFromJSON(jsonValue));
    }

    /**
     * This will get a specific snapshot of all our distributions.
     * /distributions [GET]
     */
    async distributionsSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Distributions> {
        const response = await this.distributionsSnapshotRaw(initOverrides);
        return await response.value();
    }

}
