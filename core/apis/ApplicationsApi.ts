/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Application,
  Applications,
  ApplicationsBulkUpdateCapabilitiesInput,
  DetectedExternalApplications,
  Session,
  StreamedIdentifiers,
} from '../models/index';
import {
    ApplicationFromJSON,
    ApplicationToJSON,
    ApplicationsFromJSON,
    ApplicationsToJSON,
    ApplicationsBulkUpdateCapabilitiesInputFromJSON,
    ApplicationsBulkUpdateCapabilitiesInputToJSON,
    DetectedExternalApplicationsFromJSON,
    DetectedExternalApplicationsToJSON,
    SessionFromJSON,
    SessionToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
} from '../models/index';

export interface ApplicationsBulkUpdateApplicationCapabilitiesRequest {
    applicationsBulkUpdateCapabilitiesInput?: ApplicationsBulkUpdateCapabilitiesInput;
}

export interface ApplicationsRegisterRequest {
    application?: Application;
}

export interface ApplicationsSessionCloseRequest {
    body?: string;
}

export interface ApplicationsSpecificApplicationSnapshotRequest {
    application: string;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * This will bulk update all our applications to have a set of specific capabilities(depending on the input)
     * /applications/update/capabilities [POST]
     */
    async applicationsBulkUpdateApplicationCapabilitiesRaw(requestParameters: ApplicationsBulkUpdateApplicationCapabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Applications>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/update/capabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationsBulkUpdateCapabilitiesInputToJSON(requestParameters['applicationsBulkUpdateCapabilitiesInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationsFromJSON(jsonValue));
    }

    /**
     * This will bulk update all our applications to have a set of specific capabilities(depending on the input)
     * /applications/update/capabilities [POST]
     */
    async applicationsBulkUpdateApplicationCapabilities(requestParameters: ApplicationsBulkUpdateApplicationCapabilitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Applications> {
        const response = await this.applicationsBulkUpdateApplicationCapabilitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of external applications installed on the user\'s machine that have potential integrations with Pieces, including those not yet installed by the user and those anticipated to be supported in the future.
     * /applications/external/related [GET]
     */
    async applicationsExternalRelatedRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectedExternalApplications>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/external/related`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectedExternalApplicationsFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of external applications installed on the user\'s machine that have potential integrations with Pieces, including those not yet installed by the user and those anticipated to be supported in the future.
     * /applications/external/related [GET]
     */
    async applicationsExternalRelated(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectedExternalApplications> {
        const response = await this.applicationsExternalRelatedRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provides a snapshot of all external applications detected on the user\'s machine, such as Microsoft Teams classic, Google Chat, Obsidian, etc.
     * /applications/external [GET]
     */
    async applicationsExternalSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectedExternalApplications>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/external`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectedExternalApplicationsFromJSON(jsonValue));
    }

    /**
     * Provides a snapshot of all external applications detected on the user\'s machine, such as Microsoft Teams classic, Google Chat, Obsidian, etc.
     * /applications/external [GET]
     */
    async applicationsExternalSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectedExternalApplications> {
        const response = await this.applicationsExternalSnapshotRaw(initOverrides);
        return await response.value();
    }

    /**
     * Registers a new application within the Pieces ecosystem.
     * /applications/register [POST]
     * @deprecated
     */
    async applicationsRegisterRaw(requestParameters: ApplicationsRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationToJSON(requestParameters['application']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Registers a new application within the Pieces ecosystem.
     * /applications/register [POST]
     * @deprecated
     */
    async applicationsRegister(requestParameters: ApplicationsRegisterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Closes an active session, identified by a session UUID, marking the end of the user\'s current interaction with the Pieces application.
     * /applications/session/close [POST]
     * @deprecated
     */
    async applicationsSessionCloseRaw(requestParameters: ApplicationsSessionCloseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/session/close`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Closes an active session, identified by a session UUID, marking the end of the user\'s current interaction with the Pieces application.
     * /applications/session/close [POST]
     * @deprecated
     */
    async applicationsSessionClose(requestParameters: ApplicationsSessionCloseRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.applicationsSessionCloseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiates a new session, marking the start of a user\'s interaction with the Pieces application.
     * /applications/session/open [POST]
     * @deprecated
     */
    async applicationsSessionOpenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/session/open`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Initiates a new session, marking the start of a user\'s interaction with the Pieces application.
     * /applications/session/open [POST]
     * @deprecated
     */
    async applicationsSessionOpen(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.applicationsSessionOpenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a comprehensive overview of all applications tracked by the Pieces system, including status, version, and engagement metrics.
     * /applications [GET]
     */
    async applicationsSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Applications>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationsFromJSON(jsonValue));
    }

    /**
     * Retrieves a comprehensive overview of all applications tracked by the Pieces system, including status, version, and engagement metrics.
     * /applications [GET]
     */
    async applicationsSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Applications> {
        const response = await this.applicationsSnapshotRaw(initOverrides);
        return await response.value();
    }

    /**
     * Obtains a snapshot with information about a specific application, identified by its UUID.
     * /applications/{application} [GET]
     */
    async applicationsSpecificApplicationSnapshotRaw(requestParameters: ApplicationsSpecificApplicationSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters['application'] == null) {
            throw new runtime.RequiredError(
                'application',
                'Required parameter "application" was null or undefined when calling applicationsSpecificApplicationSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/{application}`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters['application']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Obtains a snapshot with information about a specific application, identified by its UUID.
     * /applications/{application} [GET]
     */
    async applicationsSpecificApplicationSnapshot(requestParameters: ApplicationsSpecificApplicationSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsSpecificApplicationSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your application identifiers (UUIDs).
     * /applications/stream/identifiers [WS]
     */
    async applicationsStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/applications/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your application identifiers (UUIDs).
     * /applications/stream/identifiers [WS]
     */
    async applicationsStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.applicationsStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

}
