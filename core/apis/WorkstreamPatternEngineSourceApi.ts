/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentifiedWorkstreamPatternEngineSource,
  SeededScoreIncrement,
} from '../models/index';
import {
    IdentifiedWorkstreamPatternEngineSourceFromJSON,
    IdentifiedWorkstreamPatternEngineSourceToJSON,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models/index';

export interface WorkstreamPatternEngineSourceAssociateAnchorRequest {
    source: string;
    anchor: string;
}

export interface WorkstreamPatternEngineSourceAssociateConversationRequest {
    source: string;
    conversation: string;
}

export interface WorkstreamPatternEngineSourceAssociateConversationMessageRequest {
    source: string;
    message: string;
}

export interface WorkstreamPatternEngineSourceAssociatePersonRequest {
    source: string;
    person: string;
}

export interface WorkstreamPatternEngineSourceAssociateWebsiteRequest {
    source: string;
    website: string;
}

export interface WorkstreamPatternEngineSourceAssociateWorkstreamEventRequest {
    source: string;
    workstreamEvent: string;
}

export interface WorkstreamPatternEngineSourceAssociateWorkstreamSummaryRequest {
    source: string;
    workstreamSummary: string;
}

export interface WorkstreamPatternEngineSourceDisassociateAnchorRequest {
    source: string;
    anchor: string;
}

export interface WorkstreamPatternEngineSourceDisassociateConversationRequest {
    source: string;
    conversation: string;
}

export interface WorkstreamPatternEngineSourceDisassociateConversationMessageRequest {
    source: string;
    message: string;
}

export interface WorkstreamPatternEngineSourceDisassociatePersonRequest {
    source: string;
    person: string;
}

export interface WorkstreamPatternEngineSourceDisassociateWebsiteRequest {
    source: string;
    website: string;
}

export interface WorkstreamPatternEngineSourceDisassociateWorkstreamEventRequest {
    source: string;
    workstreamEvent: string;
}

export interface WorkstreamPatternEngineSourceDisassociateWorkstreamSummaryRequest {
    source: string;
    workstreamSummary: string;
}

export interface WorkstreamPatternEngineSourceScoresIncrementRequest {
    source: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface WorkstreamPatternEngineSourceUpdateRequest {
    transferables?: boolean;
    identifiedWorkstreamPatternEngineSource?: IdentifiedWorkstreamPatternEngineSource;
}

export interface WorkstreamPatternEngineSourcesSpecificSourceSnapshotRequest {
    source: string;
    transferables?: boolean;
}

/**
 * 
 */
export class WorkstreamPatternEngineSourceApi extends runtime.BaseAPI {

    /**
     * This will enable us to associate an anchor with a source.
     * /workstream_pattern_engine/source/{source}/anchors/associate/{anchor} [POST]
     */
    async workstreamPatternEngineSourceAssociateAnchorRaw(requestParameters: WorkstreamPatternEngineSourceAssociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociateAnchor().'
            );
        }

        if (requestParameters['anchor'] == null) {
            throw new runtime.RequiredError(
                'anchor',
                'Required parameter "anchor" was null or undefined when calling workstreamPatternEngineSourceAssociateAnchor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/anchors/associate/{anchor}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters['anchor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to associate an anchor with a source.
     * /workstream_pattern_engine/source/{source}/anchors/associate/{anchor} [POST]
     */
    async workstreamPatternEngineSourceAssociateAnchor(requestParameters: WorkstreamPatternEngineSourceAssociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociateAnchorRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a conversation. This will do the same thing as the conversation equivalent.
     * /workstream_pattern_engine/source/{source}/conversations/grounding/sources/associate/{conversation} [POST]
     */
    async workstreamPatternEngineSourceAssociateConversationRaw(requestParameters: WorkstreamPatternEngineSourceAssociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling workstreamPatternEngineSourceAssociateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/conversations/grounding/sources/associate/{conversation}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a conversation. This will do the same thing as the conversation equivalent.
     * /workstream_pattern_engine/source/{source}/conversations/grounding/sources/associate/{conversation} [POST]
     */
    async workstreamPatternEngineSourceAssociateConversation(requestParameters: WorkstreamPatternEngineSourceAssociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a conversation_message. This will do the same thing as the conversation_message equivalent.
     * /workstream_pattern_engine/source/{source}/messages/associate/{message} [POST]
     */
    async workstreamPatternEngineSourceAssociateConversationMessageRaw(requestParameters: WorkstreamPatternEngineSourceAssociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociateConversationMessage().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling workstreamPatternEngineSourceAssociateConversationMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/messages/associate/{message}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a conversation_message. This will do the same thing as the conversation_message equivalent.
     * /workstream_pattern_engine/source/{source}/messages/associate/{message} [POST]
     */
    async workstreamPatternEngineSourceAssociateConversationMessage(requestParameters: WorkstreamPatternEngineSourceAssociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociateConversationMessageRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to associate a person with a source.
     * /workstream_pattern_engine/source/{source}/persons/associate/{person} [POST]
     */
    async workstreamPatternEngineSourceAssociatePersonRaw(requestParameters: WorkstreamPatternEngineSourceAssociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling workstreamPatternEngineSourceAssociatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/persons/associate/{person}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters['person']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to associate a person with a source.
     * /workstream_pattern_engine/source/{source}/persons/associate/{person} [POST]
     */
    async workstreamPatternEngineSourceAssociatePerson(requestParameters: WorkstreamPatternEngineSourceAssociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociatePersonRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to associate a website with a source.
     * /workstream_pattern_engine/source/{source}/websites/associate/{website} [POST]
     */
    async workstreamPatternEngineSourceAssociateWebsiteRaw(requestParameters: WorkstreamPatternEngineSourceAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling workstreamPatternEngineSourceAssociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/websites/associate/{website}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to associate a website with a source.
     * /workstream_pattern_engine/source/{source}/websites/associate/{website} [POST]
     */
    async workstreamPatternEngineSourceAssociateWebsite(requestParameters: WorkstreamPatternEngineSourceAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_events/associate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceAssociateWorkstreamEventRaw(requestParameters: WorkstreamPatternEngineSourceAssociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociateWorkstreamEvent().'
            );
        }

        if (requestParameters['workstreamEvent'] == null) {
            throw new runtime.RequiredError(
                'workstreamEvent',
                'Required parameter "workstreamEvent" was null or undefined when calling workstreamPatternEngineSourceAssociateWorkstreamEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/workstream_events/associate/{workstream_event}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"workstream_event"}}`, encodeURIComponent(String(requestParameters['workstreamEvent']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_events/associate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceAssociateWorkstreamEvent(requestParameters: WorkstreamPatternEngineSourceAssociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociateWorkstreamEventRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a workstream_summary. This will do the same thing as the workstream_summary equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async workstreamPatternEngineSourceAssociateWorkstreamSummaryRaw(requestParameters: WorkstreamPatternEngineSourceAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceAssociateWorkstreamSummary().'
            );
        }

        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamPatternEngineSourceAssociateWorkstreamSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/workstream_summaries/associate/{workstream_summary}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a workstream_pattern_engine_source with a workstream_summary. This will do the same thing as the workstream_summary equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async workstreamPatternEngineSourceAssociateWorkstreamSummary(requestParameters: WorkstreamPatternEngineSourceAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceAssociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate an anchor from a source.
     * /workstream_pattern_engine/source/{source}/anchors/disassociate/{anchor} [POST]
     */
    async workstreamPatternEngineSourceDisassociateAnchorRaw(requestParameters: WorkstreamPatternEngineSourceDisassociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociateAnchor().'
            );
        }

        if (requestParameters['anchor'] == null) {
            throw new runtime.RequiredError(
                'anchor',
                'Required parameter "anchor" was null or undefined when calling workstreamPatternEngineSourceDisassociateAnchor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/anchors/disassociate/{anchor}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters['anchor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate an anchor from a source.
     * /workstream_pattern_engine/source/{source}/anchors/disassociate/{anchor} [POST]
     */
    async workstreamPatternEngineSourceDisassociateAnchor(requestParameters: WorkstreamPatternEngineSourceDisassociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociateAnchorRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a workstream_pattern_engine_source from a conversation. This will do the same thing as the conversation equivalent.
     * /workstream_pattern_engine/source/{source}/conversations/grounding/sources/disassociate/{conversation} [POST]
     */
    async workstreamPatternEngineSourceDisassociateConversationRaw(requestParameters: WorkstreamPatternEngineSourceDisassociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling workstreamPatternEngineSourceDisassociateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/conversations/grounding/sources/disassociate/{conversation}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a workstream_pattern_engine_source from a conversation. This will do the same thing as the conversation equivalent.
     * /workstream_pattern_engine/source/{source}/conversations/grounding/sources/disassociate/{conversation} [POST]
     */
    async workstreamPatternEngineSourceDisassociateConversation(requestParameters: WorkstreamPatternEngineSourceDisassociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a conversation_message from an workstream_pattern_engine_source. This will do the same thing as the conversation_message equivalent.
     * /workstream_pattern_engine/source/{source}/messages/disassociate/{message} [POST]
     */
    async workstreamPatternEngineSourceDisassociateConversationMessageRaw(requestParameters: WorkstreamPatternEngineSourceDisassociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociateConversationMessage().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling workstreamPatternEngineSourceDisassociateConversationMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/messages/disassociate/{message}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters['message']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a conversation_message from an workstream_pattern_engine_source. This will do the same thing as the conversation_message equivalent.
     * /workstream_pattern_engine/source/{source}/messages/disassociate/{message} [POST]
     */
    async workstreamPatternEngineSourceDisassociateConversationMessage(requestParameters: WorkstreamPatternEngineSourceDisassociateConversationMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociateConversationMessageRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a person from a source.
     * /workstream_pattern_engine/source/{source}/persons/disassociate/{person} [POST]
     */
    async workstreamPatternEngineSourceDisassociatePersonRaw(requestParameters: WorkstreamPatternEngineSourceDisassociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling workstreamPatternEngineSourceDisassociatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/persons/disassociate/{person}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters['person']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a person from a source.
     * /workstream_pattern_engine/source/{source}/persons/disassociate/{person} [POST]
     */
    async workstreamPatternEngineSourceDisassociatePerson(requestParameters: WorkstreamPatternEngineSourceDisassociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociatePersonRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a website from a source.
     * /workstream_pattern_engine/source/{source}/websites/disassociate/{website} [POST]
     */
    async workstreamPatternEngineSourceDisassociateWebsiteRaw(requestParameters: WorkstreamPatternEngineSourceDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling workstreamPatternEngineSourceDisassociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/websites/disassociate/{website}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a website from a source.
     * /workstream_pattern_engine/source/{source}/websites/disassociate/{website} [POST]
     */
    async workstreamPatternEngineSourceDisassociateWebsite(requestParameters: WorkstreamPatternEngineSourceDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a workstream_pattern_engine_source from a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_events/disassociate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceDisassociateWorkstreamEventRaw(requestParameters: WorkstreamPatternEngineSourceDisassociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociateWorkstreamEvent().'
            );
        }

        if (requestParameters['workstreamEvent'] == null) {
            throw new runtime.RequiredError(
                'workstreamEvent',
                'Required parameter "workstreamEvent" was null or undefined when calling workstreamPatternEngineSourceDisassociateWorkstreamEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/workstream_events/disassociate/{workstream_event}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"workstream_event"}}`, encodeURIComponent(String(requestParameters['workstreamEvent']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a workstream_pattern_engine_source from a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_events/disassociate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceDisassociateWorkstreamEvent(requestParameters: WorkstreamPatternEngineSourceDisassociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociateWorkstreamEventRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a workstream_pattern_engine_source from a workstream_summary. This will do the same thing as the workstream_summary equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async workstreamPatternEngineSourceDisassociateWorkstreamSummaryRaw(requestParameters: WorkstreamPatternEngineSourceDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceDisassociateWorkstreamSummary().'
            );
        }

        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamPatternEngineSourceDisassociateWorkstreamSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/workstream_summaries/disassociate/{workstream_summary}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a workstream_pattern_engine_source from a workstream_summary. This will do the same thing as the workstream_summary equivalent.
     * /workstream_pattern_engine/source/{source}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async workstreamPatternEngineSourceDisassociateWorkstreamSummary(requestParameters: WorkstreamPatternEngineSourceDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceDisassociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/workstream_pattern_engine/source/{source}/scores/increment\' [POST]
     */
    async workstreamPatternEngineSourceScoresIncrementRaw(requestParameters: WorkstreamPatternEngineSourceScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourceScoresIncrement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}/scores/increment`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters['seededScoreIncrement']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/workstream_pattern_engine/source/{source}/scores/increment\' [POST]
     */
    async workstreamPatternEngineSourceScoresIncrement(requestParameters: WorkstreamPatternEngineSourceScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will update a specific workstream pattern engine source.
     * /workstream_pattern_engine/source/update [POST]
     */
    async workstreamPatternEngineSourceUpdateRaw(requestParameters: WorkstreamPatternEngineSourceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentifiedWorkstreamPatternEngineSource>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentifiedWorkstreamPatternEngineSourceToJSON(requestParameters['identifiedWorkstreamPatternEngineSource']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentifiedWorkstreamPatternEngineSourceFromJSON(jsonValue));
    }

    /**
     * This will update a specific workstream pattern engine source.
     * /workstream_pattern_engine/source/update [POST]
     */
    async workstreamPatternEngineSourceUpdate(requestParameters: WorkstreamPatternEngineSourceUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentifiedWorkstreamPatternEngineSource> {
        const response = await this.workstreamPatternEngineSourceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will get a snapshot of a single workstream pattern engine source.
     * /workstream_pattern_engine/source/{source} [GET]
     */
    async workstreamPatternEngineSourcesSpecificSourceSnapshotRaw(requestParameters: WorkstreamPatternEngineSourcesSpecificSourceSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentifiedWorkstreamPatternEngineSource>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling workstreamPatternEngineSourcesSpecificSourceSnapshot().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentifiedWorkstreamPatternEngineSourceFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a single workstream pattern engine source.
     * /workstream_pattern_engine/source/{source} [GET]
     */
    async workstreamPatternEngineSourcesSpecificSourceSnapshot(requestParameters: WorkstreamPatternEngineSourcesSpecificSourceSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentifiedWorkstreamPatternEngineSource> {
        const response = await this.workstreamPatternEngineSourcesSpecificSourceSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
