/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Activities,
  Activity,
  SeededActivity,
  StreamedIdentifiers,
} from '../models/index';
import {
    ActivitiesFromJSON,
    ActivitiesToJSON,
    ActivityFromJSON,
    ActivityToJSON,
    SeededActivityFromJSON,
    SeededActivityToJSON,
    StreamedIdentifiersFromJSON,
    StreamedIdentifiersToJSON,
} from '../models/index';

export interface ActivitiesCreateNewActivityRequest {
    transferables?: boolean;
    seededActivity?: SeededActivity;
}

export interface ActivitiesDeleteSpecificActivityRequest {
    activity: string;
}

export interface ActivitiesSnapshotRequest {
    transferables?: boolean;
    pseudo?: boolean;
}

/**
 * 
 */
export class ActivitiesApi extends runtime.BaseAPI {

    /**
     * This will create a new Activity.
     * /activities/create [POST]
     */
    async activitiesCreateNewActivityRaw(requestParameters: ActivitiesCreateNewActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/activities/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededActivityToJSON(requestParameters['seededActivity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * This will create a new Activity.
     * /activities/create [POST]
     */
    async activitiesCreateNewActivity(requestParameters: ActivitiesCreateNewActivityRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.activitiesCreateNewActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific activity.  important note: if we delete an activity: that is going to be a generic or a specific/ we will also delete its counter part i.e the specific. and vise versa, this ensures that the references are always cleaned.
     * /activities/{activity}/delete [POST]
     */
    async activitiesDeleteSpecificActivityRaw(requestParameters: ActivitiesDeleteSpecificActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['activity'] == null) {
            throw new runtime.RequiredError(
                'activity',
                'Required parameter "activity" was null or undefined when calling activitiesDeleteSpecificActivity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/activities/{activity}/delete`.replace(`{${"activity"}}`, encodeURIComponent(String(requestParameters['activity']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific activity.  important note: if we delete an activity: that is going to be a generic or a specific/ we will also delete its counter part i.e the specific. and vise versa, this ensures that the references are always cleaned.
     * /activities/{activity}/delete [POST]
     */
    async activitiesDeleteSpecificActivity(requestParameters: ActivitiesDeleteSpecificActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.activitiesDeleteSpecificActivityRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of all of the activities
     * /activities [GET]
     */
    async activitiesSnapshotRaw(requestParameters: ActivitiesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activities>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        if (requestParameters['pseudo'] != null) {
            queryParameters['pseudo'] = requestParameters['pseudo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of the activities
     * /activities [GET]
     */
    async activitiesSnapshot(requestParameters: ActivitiesSnapshotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activities> {
        const response = await this.activitiesSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a WebSocket connection that emits changes to your activity identifiers (UUIDs).
     * /activities/stream/identifiers [WS]
     */
    async activitiesStreamIdentifiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamedIdentifiers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/activities/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamedIdentifiersFromJSON(jsonValue));
    }

    /**
     * Provides a WebSocket connection that emits changes to your activity identifiers (UUIDs).
     * /activities/stream/identifiers [WS]
     */
    async activitiesStreamIdentifiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamedIdentifiers> {
        const response = await this.activitiesStreamIdentifiersRaw(initOverrides);
        return await response.value();
    }

}
