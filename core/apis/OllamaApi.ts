/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OllamaDeployment,
  OllamaDeployments,
  OllamaStatus,
} from '../models/index';
import {
    OllamaDeploymentFromJSON,
    OllamaDeploymentToJSON,
    OllamaDeploymentsFromJSON,
    OllamaDeploymentsToJSON,
    OllamaStatusFromJSON,
    OllamaStatusToJSON,
} from '../models/index';

export interface OllamaInstallCancelRequest {
    identifier: string;
}

export interface OllamaInstallSnapshotRequest {
    identifier: string;
}

export interface OllamaUninstallRequest {
    ollamaDeployment?: OllamaDeployment;
}

export interface OllamaUpdateRequest {
    ollamaDeployment?: OllamaDeployment;
}

export interface OllamaUpdateCancelRequest {
    identifier: string;
}

export interface OllamaUpdateSnapshotRequest {
    identifier: string;
}

/**
 * 
 */
export class OllamaApi extends runtime.BaseAPI {

    /**
     * This will start the installation for ollama. NOTE: This will return immediately, use the update status
     * /ollama/install [POST]
     */
    async ollamaInstallRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/install`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will start the installation for ollama. NOTE: This will return immediately, use the update status
     * /ollama/install [POST]
     */
    async ollamaInstall(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaInstallRaw(initOverrides);
        return await response.value();
    }

    /**
     * This will cancel a specific installation that is in-progress.
     * /ollama/install/{identifier}/cancel [POST]
     */
    async ollamaInstallCancelRaw(requestParameters: OllamaInstallCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        if (requestParameters['identifier'] == null) {
            throw new runtime.RequiredError(
                'identifier',
                'Required parameter "identifier" was null or undefined when calling ollamaInstallCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/install/{identifier}/cancel`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters['identifier']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will cancel a specific installation that is in-progress.
     * /ollama/install/{identifier}/cancel [POST]
     */
    async ollamaInstallCancel(requestParameters: OllamaInstallCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaInstallCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will get the status of a given installation
     * /ollama/install/{identifier} [GET]
     */
    async ollamaInstallSnapshotRaw(requestParameters: OllamaInstallSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        if (requestParameters['identifier'] == null) {
            throw new runtime.RequiredError(
                'identifier',
                'Required parameter "identifier" was null or undefined when calling ollamaInstallSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/install/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters['identifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will get the status of a given installation
     * /ollama/install/{identifier} [GET]
     */
    async ollamaInstallSnapshot(requestParameters: OllamaInstallSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaInstallSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will return all the installation in a given session
     * /ollama/installs [GET]
     */
    async ollamaInstallsSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployments>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/installs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentsFromJSON(jsonValue));
    }

    /**
     * This will return all the installation in a given session
     * /ollama/installs [GET]
     */
    async ollamaInstallsSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployments> {
        const response = await this.ollamaInstallsSnapshotRaw(initOverrides);
        return await response.value();
    }

    /**
     * This will get a status on Ollama, ie if ollama is installed, if it needs an update,  if there are installations in progress, or updates in progress
     * /ollama/status [GET]
     */
    async ollamaStatusCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaStatusFromJSON(jsonValue));
    }

    /**
     * This will get a status on Ollama, ie if ollama is installed, if it needs an update,  if there are installations in progress, or updates in progress
     * /ollama/status [GET]
     */
    async ollamaStatusCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaStatus> {
        const response = await this.ollamaStatusCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * This provides a Websocket connection, that will emit a change on the initial connection and then all realtime updates: - if an update have started - if an installation has started - if Ollama has been installed/uninstalled - if an updated is required for Ollama
     * /ollama/status/stream [WS]
     */
    async ollamaStatusCheckStreamRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/status/stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaStatusFromJSON(jsonValue));
    }

    /**
     * This provides a Websocket connection, that will emit a change on the initial connection and then all realtime updates: - if an update have started - if an installation has started - if Ollama has been installed/uninstalled - if an updated is required for Ollama
     * /ollama/status/stream [WS]
     */
    async ollamaStatusCheckStream(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaStatus> {
        const response = await this.ollamaStatusCheckStreamRaw(initOverrides);
        return await response.value();
    }

    /**
     * This will uninstall Ollama.  NOTE: the request body is the installation that will be deleted.
     * /ollama/uninstall [POST]
     */
    async ollamaUninstallRaw(requestParameters: OllamaUninstallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/uninstall`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OllamaDeploymentToJSON(requestParameters['ollamaDeployment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will uninstall Ollama.  NOTE: the request body is the installation that will be deleted.
     * /ollama/uninstall [POST]
     */
    async ollamaUninstall(requestParameters: OllamaUninstallRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaUninstallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will start the update for ollama. NOTE: This will return immediately, use the ollama status endpoint to checks it status. NOTE: This will required a user to pass in deployment that they would like to update to.(only thing required will be version here, and that this is a valid version to update to.)
     * /ollama/update [POST]
     */
    async ollamaUpdateRaw(requestParameters: OllamaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OllamaDeploymentToJSON(requestParameters['ollamaDeployment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will start the update for ollama. NOTE: This will return immediately, use the ollama status endpoint to checks it status. NOTE: This will required a user to pass in deployment that they would like to update to.(only thing required will be version here, and that this is a valid version to update to.)
     * /ollama/update [POST]
     */
    async ollamaUpdate(requestParameters: OllamaUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will cancel a specific update that is in-progress.
     * /ollama/update/{identifier}/cancel [POST]
     */
    async ollamaUpdateCancelRaw(requestParameters: OllamaUpdateCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        if (requestParameters['identifier'] == null) {
            throw new runtime.RequiredError(
                'identifier',
                'Required parameter "identifier" was null or undefined when calling ollamaUpdateCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/update/{identifier}/cancel`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters['identifier']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will cancel a specific update that is in-progress.
     * /ollama/update/{identifier}/cancel [POST]
     */
    async ollamaUpdateCancel(requestParameters: OllamaUpdateCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaUpdateCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will get the status of a given update.
     * /ollama/update/{identifier} [GET]
     */
    async ollamaUpdateSnapshotRaw(requestParameters: OllamaUpdateSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployment>> {
        if (requestParameters['identifier'] == null) {
            throw new runtime.RequiredError(
                'identifier',
                'Required parameter "identifier" was null or undefined when calling ollamaUpdateSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/update/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters['identifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentFromJSON(jsonValue));
    }

    /**
     * This will get the status of a given update.
     * /ollama/update/{identifier} [GET]
     */
    async ollamaUpdateSnapshot(requestParameters: OllamaUpdateSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployment> {
        const response = await this.ollamaUpdateSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will return all the attempted updates in a given session
     * /ollama/updates [GET]
     */
    async ollamaUpdatesSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaDeployments>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/ollama/updates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaDeploymentsFromJSON(jsonValue));
    }

    /**
     * This will return all the attempted updates in a given session
     * /ollama/updates [GET]
     */
    async ollamaUpdatesSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaDeployments> {
        const response = await this.ollamaUpdatesSnapshotRaw(initOverrides);
        return await response.value();
    }

}
