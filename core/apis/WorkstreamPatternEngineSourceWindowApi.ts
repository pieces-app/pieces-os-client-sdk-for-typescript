/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SeededScoreIncrement,
  WorkstreamPatternEngineSourceWindow,
} from '../models/index';
import {
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
    WorkstreamPatternEngineSourceWindowFromJSON,
    WorkstreamPatternEngineSourceWindowToJSON,
} from '../models/index';

export interface WorkstreamPatternEngineSourceWindowAssociateTagRequest {
    sourceWindow: string;
    tag: string;
}

export interface WorkstreamPatternEngineSourceWindowAssociateWebsiteRequest {
    sourceWindow: string;
    website: string;
}

export interface WorkstreamPatternEngineSourceWindowAssociateWorkstreamEventRequest {
    sourceWindow: string;
    workstreamEvent: string;
}

export interface WorkstreamPatternEngineSourceWindowDisassociateTagRequest {
    sourceWindow: string;
    tag: string;
}

export interface WorkstreamPatternEngineSourceWindowDisassociateWebsiteRequest {
    sourceWindow: string;
    website: string;
}

export interface WorkstreamPatternEngineSourceWindowDisassociateWorkstreamEventRequest {
    sourceWindow: string;
    workstreamEvent: string;
}

export interface WorkstreamPatternEngineSourceWindowScoresIncrementRequest {
    sourceWindow: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface WorkstreamPatternEngineSourceWindowSpecificSourceWindowSnapshotRequest {
    sourceWindow: string;
    transferables?: boolean;
}

export interface WorkstreamPatternEngineSourceWindowUpdateRequest {
    transferables?: boolean;
    workstreamPatternEngineSourceWindow?: WorkstreamPatternEngineSourceWindow;
}

/**
 * 
 */
export class WorkstreamPatternEngineSourceWindowApi extends runtime.BaseAPI {

    /**
     * This will enable us to associate a tag with a source window.
     * /workstream_pattern_engine/source_window/{source_window}/tags/associate/{tag} [POST]
     */
    async workstreamPatternEngineSourceWindowAssociateTagRaw(requestParameters: WorkstreamPatternEngineSourceWindowAssociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowAssociateTag().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling workstreamPatternEngineSourceWindowAssociateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/tags/associate/{tag}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to associate a tag with a source window.
     * /workstream_pattern_engine/source_window/{source_window}/tags/associate/{tag} [POST]
     */
    async workstreamPatternEngineSourceWindowAssociateTag(requestParameters: WorkstreamPatternEngineSourceWindowAssociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowAssociateTagRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to associate a website with a source window.
     * /workstream_pattern_engine/source_window/{source_window}/websites/associate/{website} [POST]
     */
    async workstreamPatternEngineSourceWindowAssociateWebsiteRaw(requestParameters: WorkstreamPatternEngineSourceWindowAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowAssociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling workstreamPatternEngineSourceWindowAssociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/websites/associate/{website}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to associate a website with a source window.
     * /workstream_pattern_engine/source_window/{source_window}/websites/associate/{website} [POST]
     */
    async workstreamPatternEngineSourceWindowAssociateWebsite(requestParameters: WorkstreamPatternEngineSourceWindowAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowAssociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to associate a workstream event with a source window.
     * /workstream_pattern_engine/source_window/{source_window}/workstream_events/associate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceWindowAssociateWorkstreamEventRaw(requestParameters: WorkstreamPatternEngineSourceWindowAssociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowAssociateWorkstreamEvent().'
            );
        }

        if (requestParameters['workstreamEvent'] == null) {
            throw new runtime.RequiredError(
                'workstreamEvent',
                'Required parameter "workstreamEvent" was null or undefined when calling workstreamPatternEngineSourceWindowAssociateWorkstreamEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/workstream_events/associate/{workstream_event}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))).replace(`{${"workstream_event"}}`, encodeURIComponent(String(requestParameters['workstreamEvent']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to associate a workstream event with a source window.
     * /workstream_pattern_engine/source_window/{source_window}/workstream_events/associate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceWindowAssociateWorkstreamEvent(requestParameters: WorkstreamPatternEngineSourceWindowAssociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowAssociateWorkstreamEventRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a tag from a source window.
     * /workstream_pattern_engine/source_window/{source_window}/tags/disassociate/{tag} [POST]
     */
    async workstreamPatternEngineSourceWindowDisassociateTagRaw(requestParameters: WorkstreamPatternEngineSourceWindowDisassociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowDisassociateTag().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling workstreamPatternEngineSourceWindowDisassociateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/tags/disassociate/{tag}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a tag from a source window.
     * /workstream_pattern_engine/source_window/{source_window}/tags/disassociate/{tag} [POST]
     */
    async workstreamPatternEngineSourceWindowDisassociateTag(requestParameters: WorkstreamPatternEngineSourceWindowDisassociateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowDisassociateTagRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a website from a source window.
     * /workstream_pattern_engine/source_window/{source_window}/websites/disassociate/{website} [POST]
     */
    async workstreamPatternEngineSourceWindowDisassociateWebsiteRaw(requestParameters: WorkstreamPatternEngineSourceWindowDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowDisassociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling workstreamPatternEngineSourceWindowDisassociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/websites/disassociate/{website}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a website from a source window.
     * /workstream_pattern_engine/source_window/{source_window}/websites/disassociate/{website} [POST]
     */
    async workstreamPatternEngineSourceWindowDisassociateWebsite(requestParameters: WorkstreamPatternEngineSourceWindowDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowDisassociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a workstream event from a source window.
     * /workstream_pattern_engine/source_window/{source_window}/workstream_events/disassociate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceWindowDisassociateWorkstreamEventRaw(requestParameters: WorkstreamPatternEngineSourceWindowDisassociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowDisassociateWorkstreamEvent().'
            );
        }

        if (requestParameters['workstreamEvent'] == null) {
            throw new runtime.RequiredError(
                'workstreamEvent',
                'Required parameter "workstreamEvent" was null or undefined when calling workstreamPatternEngineSourceWindowDisassociateWorkstreamEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/workstream_events/disassociate/{workstream_event}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))).replace(`{${"workstream_event"}}`, encodeURIComponent(String(requestParameters['workstreamEvent']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a workstream event from a source window.
     * /workstream_pattern_engine/source_window/{source_window}/workstream_events/disassociate/{workstream_event} [POST]
     */
    async workstreamPatternEngineSourceWindowDisassociateWorkstreamEvent(requestParameters: WorkstreamPatternEngineSourceWindowDisassociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowDisassociateWorkstreamEventRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to increment the scores for the workstream pattern engine source window.
     * /workstream_pattern_engine/source_window/{source_window}/scores/increment [POST]
     */
    async workstreamPatternEngineSourceWindowScoresIncrementRaw(requestParameters: WorkstreamPatternEngineSourceWindowScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowScoresIncrement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}/scores/increment`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters['seededScoreIncrement']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to increment the scores for the workstream pattern engine source window.
     * /workstream_pattern_engine/source_window/{source_window}/scores/increment [POST]
     */
    async workstreamPatternEngineSourceWindowScoresIncrement(requestParameters: WorkstreamPatternEngineSourceWindowScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineSourceWindowScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to get a specific source window for the workstream pattern engine.
     * /workstream_pattern_engine/source_window/{source_window} [GET]
     */
    async workstreamPatternEngineSourceWindowSpecificSourceWindowSnapshotRaw(requestParameters: WorkstreamPatternEngineSourceWindowSpecificSourceWindowSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamPatternEngineSourceWindow>> {
        if (requestParameters['sourceWindow'] == null) {
            throw new runtime.RequiredError(
                'sourceWindow',
                'Required parameter "sourceWindow" was null or undefined when calling workstreamPatternEngineSourceWindowSpecificSourceWindowSnapshot().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/{source_window}`.replace(`{${"source_window"}}`, encodeURIComponent(String(requestParameters['sourceWindow']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamPatternEngineSourceWindowFromJSON(jsonValue));
    }

    /**
     * This will enable us to get a specific source window for the workstream pattern engine.
     * /workstream_pattern_engine/source_window/{source_window} [GET]
     */
    async workstreamPatternEngineSourceWindowSpecificSourceWindowSnapshot(requestParameters: WorkstreamPatternEngineSourceWindowSpecificSourceWindowSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamPatternEngineSourceWindow> {
        const response = await this.workstreamPatternEngineSourceWindowSpecificSourceWindowSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will enable us to update a source window for the workstream pattern engine.
     * /workstream_pattern_engine/source_window/update [POST]
     */
    async workstreamPatternEngineSourceWindowUpdateRaw(requestParameters: WorkstreamPatternEngineSourceWindowUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamPatternEngineSourceWindow>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-ID"] = await this.configuration.apiKey("X-Application-ID"); // application authentication
        }

        const response = await this.request({
            path: `/workstream_pattern_engine/source_window/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkstreamPatternEngineSourceWindowToJSON(requestParameters['workstreamPatternEngineSourceWindow']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamPatternEngineSourceWindowFromJSON(jsonValue));
    }

    /**
     * This will enable us to update a source window for the workstream pattern engine.
     * /workstream_pattern_engine/source_window/update [POST]
     */
    async workstreamPatternEngineSourceWindowUpdate(requestParameters: WorkstreamPatternEngineSourceWindowUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamPatternEngineSourceWindow> {
        const response = await this.workstreamPatternEngineSourceWindowUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
